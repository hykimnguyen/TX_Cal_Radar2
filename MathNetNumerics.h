// CVI wrapper header file for .NET assembly: MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null
//
// This is specified by the '__assemblyName' constant in the generated source file.
// If there are multiple versions of this assembly, and you want .NET to determine 
// the appropriate one to load, then you can remove the version, culture, and public 
// key token information from the constant and just specify the name of the assembly.
//
// Other assemblies referenced by the target assembly:
// Name: mscorlib, Location: C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll
//
// If any assembly, including the target assembly, is not installed in the
// Global Assembly Cache (GAC) or in the application directory, and the wrapper
// code needs to load the assembly to convert types like arrays and enums, then
// you must register the path of the assembly with the CVI .NET library by
// calling CDotNetRegisterAssemblyPath before calling the wrapper code.
//
// Types exposed by the target assembly but defined in other assemblies:
// CVI name: System_Func_T2, .NET name: System.Func`2, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IList_T1, .NET name: System.Collections.Generic.IList`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_AsyncCallback, .NET name: System.AsyncCallback, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T2, .NET name: System.Func`2, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1[[System.Tuple`3[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[MathNet.Numerics.Complex32, MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1[[System.Collections.Generic.IEnumerable`1[[System.Numerics.Complex, MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IList_T1, .NET name: System.Collections.Generic.IList`1[[System.Numerics.Complex, MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IList_T1, .NET name: System.Collections.Generic.IList`1[[MathNet.Numerics.LinearAlgebra.Double.Vector, MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T4, .NET name: System.Func`4, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T2, .NET name: System.Func`2[[System.Double, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Double, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IList_T1, .NET name: System.Collections.Generic.IList`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T2, .NET name: System.Func`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IComparer_T1, .NET name: System.Collections.Generic.IComparer`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T2, .NET name: System.Func`2, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T2, .NET name: System.Func`2, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T3, .NET name: System.Func`3, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_IAsyncResult, .NET name: System.IAsyncResult, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T3, .NET name: System.Func`3, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerator_T1, .NET name: System.Collections.Generic.IEnumerator`1[[MathNet.Numerics.Complex32, MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T2, .NET name: System.Func`2, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerator_T1, .NET name: System.Collections.Generic.IEnumerator`1[[System.Numerics.Complex, MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T2, .NET name: System.Func`2, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1[[System.Numerics.Complex, MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1[[MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IIterationStopCriterium, MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T3, .NET name: System.Func`3, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1[[System.Tuple`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[MathNet.Numerics.LinearAlgebra.Generic.Vector`1[[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T2, .NET name: System.Func`2[[System.Numerics.Complex, MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null],[System.Numerics.Complex, MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T2, .NET name: System.Func`2, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1[[System.Tuple`3[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Double, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Action, .NET name: System.Action, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T2, .NET name: System.Func`2, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T2, .NET name: System.Func`2, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T3, .NET name: System.Func`3, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1[[System.Tuple`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[MathNet.Numerics.LinearAlgebra.Generic.Vector`1[[System.Double, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Delegate, .NET name: System.Delegate, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Reflection_MethodInfo, .NET name: System.Reflection.MethodInfo, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1[[System.Tuple`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[MathNet.Numerics.LinearAlgebra.Generic.Vector`1[[System.Numerics.Complex, MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null]], MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T3, .NET name: System.Func`3, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T2, .NET name: System.Func`2, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T4, .NET name: System.Func`4[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[MathNet.Numerics.Complex32, MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null],[MathNet.Numerics.Complex32, MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1[[System.Collections.Generic.IEnumerable`1[[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1[[System.Tuple`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[MathNet.Numerics.Complex32, MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T3, .NET name: System.Func`3, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IList_T1, .NET name: System.Collections.Generic.IList`1[[System.Double, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T4, .NET name: System.Func`4[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IComparer_T1, .NET name: System.Collections.Generic.IComparer`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IList_T1, .NET name: System.Collections.Generic.IList`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T2, .NET name: System.Func`2, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1[[System.Tuple`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Double, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerator_T1, .NET name: System.Collections.Generic.IEnumerator`1[[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IComparer_T1, .NET name: System.Collections.Generic.IComparer`1[[MathNet.Numerics.Statistics.Bucket, MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T2, .NET name: System.Func`2, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IList_T1, .NET name: System.Collections.Generic.IList`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T4, .NET name: System.Func`4, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T2, .NET name: System.Func`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Numerics.Complex, MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IList_T1, .NET name: System.Collections.Generic.IList`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T2, .NET name: System.Func`2, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T2, .NET name: System.Func`2, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IList_T1, .NET name: System.Collections.Generic.IList`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Reflection_AssemblyName, .NET name: System.Reflection.AssemblyName, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1[[System.Tuple`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Numerics.Complex, MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IList_T1, .NET name: System.Collections.Generic.IList`1[[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1[[System.Tuple`3[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Numerics.Complex, MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Runtime_Serialization_StreamingContext, .NET name: System.Runtime.Serialization.StreamingContext, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T2, .NET name: System.Func`2[[MathNet.Numerics.Complex32, MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null],[MathNet.Numerics.Complex32, MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IList_T1, .NET name: System.Collections.Generic.IList`1[[MathNet.Numerics.Complex32, MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IComparer_T1, .NET name: System.Collections.Generic.IComparer`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IList_T1, .NET name: System.Collections.Generic.IList`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T2, .NET name: System.Func`2, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1[[System.Tuple`3[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T2, .NET name: System.Func`2, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T3, .NET name: System.Func`3, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1[[System.Collections.Generic.IEnumerable`1[[System.Double, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1[[MathNet.Numerics.Complex32, MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T3, .NET name: System.Func`3[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Double, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Double, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1[[System.Int32[], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T2, .NET name: System.Func`2, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T2, .NET name: System.Func`2, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Action_T1, .NET name: System.Action`1[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IList_T1, .NET name: System.Collections.Generic.IList`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T2, .NET name: System.Func`2, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T3, .NET name: System.Func`3, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1[[MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IIterationStopCriterium, MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IComparer_T1, .NET name: System.Collections.Generic.IComparer`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Exception, .NET name: System.Exception, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1[[System.Double[], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T4, .NET name: System.Func`4, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T2, .NET name: System.Func`2, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Type, .NET name: System.Type, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IList_T1, .NET name: System.Collections.Generic.IList`1[[MathNet.Numerics.LinearAlgebra.Complex.Vector, MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T3, .NET name: System.Func`3, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T3, .NET name: System.Func`3[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[MathNet.Numerics.Complex32, MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T3, .NET name: System.Func`3[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Double, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T4, .NET name: System.Func`4[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Numerics.Complex, MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null],[System.Numerics.Complex, MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Action_T2, .NET name: System.Action`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T3, .NET name: System.Func`3[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[MathNet.Numerics.Complex32, MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null],[MathNet.Numerics.Complex32, MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1[[MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IIterationStopCriterium, MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_IFormatProvider, .NET name: System.IFormatProvider, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T3, .NET name: System.Func`3[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T2, .NET name: System.Func`2, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IList_T1, .NET name: System.Collections.Generic.IList`1[[MathNet.Numerics.LinearAlgebra.Single.Vector, MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Resources_ResourceManager, .NET name: System.Resources.ResourceManager, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T2, .NET name: System.Func`2, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T3, .NET name: System.Func`3[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1[[MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IIterationStopCriterium, MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T3, .NET name: System.Func`3, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T2, .NET name: System.Func`2, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T3, .NET name: System.Func`3, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Action_T2, .NET name: System.Action`2, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T4, .NET name: System.Func`4, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T2, .NET name: System.Func`2, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IList_T1, .NET name: System.Collections.Generic.IList`1[[System.Int64, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T2, .NET name: System.Func`2, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Random, .NET name: System.Random, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T2, .NET name: System.Func`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Double, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T2, .NET name: System.Func`2, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IList_T1, .NET name: System.Collections.Generic.IList`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerator_T1, .NET name: System.Collections.Generic.IEnumerator`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T2, .NET name: System.Func`2, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T2, .NET name: System.Func`2, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1[[System.Collections.Generic.IEnumerable`1[[MathNet.Numerics.Complex32, MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1[[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T2, .NET name: System.Func`2[[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerator_T1, .NET name: System.Collections.Generic.IEnumerator`1[[System.Double, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1[[System.Nullable`1[[System.Double, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Globalization_CultureInfo, .NET name: System.Globalization.CultureInfo, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T2, .NET name: System.Func`2, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Reflection_Assembly, .NET name: System.Reflection.Assembly, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T2, .NET name: System.Func`2, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IList_T1, .NET name: System.Collections.Generic.IList`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IList_T1, .NET name: System.Collections.Generic.IList`1[[MathNet.Numerics.LinearAlgebra.Complex32.Vector, MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1[[MathNet.Numerics.Distributions.MeanPrecisionPair, MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T4, .NET name: System.Func`4, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1[[System.Tuple`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Runtime_Serialization_SerializationInfo, .NET name: System.Runtime.Serialization.SerializationInfo, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T3, .NET name: System.Func`3[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Numerics.Complex, MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IList_T1, .NET name: System.Collections.Generic.IList`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IList_T1, .NET name: System.Collections.Generic.IList`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IList_T1, .NET name: System.Collections.Generic.IList`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1[[System.Double, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T3, .NET name: System.Func`3[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Numerics.Complex, MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null],[System.Numerics.Complex, MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T2, .NET name: System.Func`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[MathNet.Numerics.Complex32, MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T2, .NET name: System.Func`2, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IList_T1, .NET name: System.Collections.Generic.IList`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Func_T4, .NET name: System.Func`4[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Double, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Double, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IList_T1, .NET name: System.Collections.Generic.IList`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IList_T1, .NET name: System.Collections.Generic.IList`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IList_T1, .NET name: System.Collections.Generic.IList`1, Assembly: mscorlib, Module: Global Assembly Cache
// CVI name: System_Collections_Generic_IEnumerable_T1, .NET name: System.Collections.Generic.IEnumerable`1[[System.Tuple`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[MathNet.Numerics.LinearAlgebra.Generic.Vector`1[[MathNet.Numerics.Complex32, MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null]], MathNet.Numerics, Version=2.5.0.27, Culture=neutral, PublicKeyToken=null]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Assembly: mscorlib, Module: Global Assembly Cache

#include <cvidotnet.h>

#ifdef __cplusplus
extern "C" {
#endif

// Type definitions
typedef struct __MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1 * MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1;
typedef struct __MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider * MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider;
typedef struct __MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider * MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider;
typedef struct __MathNet_Numerics_Combinatorics * MathNet_Numerics_Combinatorics;
typedef struct __MathNet_Numerics_IPrecisionSupport_T1 * MathNet_Numerics_IPrecisionSupport_T1;
typedef struct __MathNet_Numerics_Complex32 * MathNet_Numerics_Complex32;
typedef struct __System_IFormatProvider * System_IFormatProvider;
typedef struct __System_Numerics_Complex * System_Numerics_Complex;
typedef struct __MathNet_Numerics_ComplexExtensions * MathNet_Numerics_ComplexExtensions;
typedef struct __MathNet_Numerics_Constants * MathNet_Numerics_Constants;
typedef struct __MathNet_Numerics_Control * MathNet_Numerics_Control;
typedef struct __MathNet_Numerics_Distributions_IDistribution * MathNet_Numerics_Distributions_IDistribution;
typedef struct __System_Random * System_Random;
typedef struct __MathNet_Numerics_Distributions_IContinuousDistribution * MathNet_Numerics_Distributions_IContinuousDistribution;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __MathNet_Numerics_Distributions_Beta * MathNet_Numerics_Distributions_Beta;
typedef struct __MathNet_Numerics_Distributions_Cauchy * MathNet_Numerics_Distributions_Cauchy;
typedef struct __MathNet_Numerics_Distributions_Chi * MathNet_Numerics_Distributions_Chi;
typedef struct __MathNet_Numerics_Distributions_ChiSquare * MathNet_Numerics_Distributions_ChiSquare;
typedef struct __MathNet_Numerics_Distributions_ContinuousUniform * MathNet_Numerics_Distributions_ContinuousUniform;
typedef struct __MathNet_Numerics_Distributions_Erlang * MathNet_Numerics_Distributions_Erlang;
typedef struct __MathNet_Numerics_Distributions_Exponential * MathNet_Numerics_Distributions_Exponential;
typedef struct __MathNet_Numerics_Distributions_FisherSnedecor * MathNet_Numerics_Distributions_FisherSnedecor;
typedef struct __MathNet_Numerics_Distributions_Gamma * MathNet_Numerics_Distributions_Gamma;
typedef struct __MathNet_Numerics_Distributions_InverseGamma * MathNet_Numerics_Distributions_InverseGamma;
typedef struct __MathNet_Numerics_Distributions_Laplace * MathNet_Numerics_Distributions_Laplace;
typedef struct __MathNet_Numerics_Distributions_LogNormal * MathNet_Numerics_Distributions_LogNormal;
typedef struct __MathNet_Numerics_Distributions_Normal * MathNet_Numerics_Distributions_Normal;
typedef struct __MathNet_Numerics_Distributions_Pareto * MathNet_Numerics_Distributions_Pareto;
typedef struct __MathNet_Numerics_Distributions_Rayleigh * MathNet_Numerics_Distributions_Rayleigh;
typedef struct __MathNet_Numerics_Distributions_Stable * MathNet_Numerics_Distributions_Stable;
typedef struct __MathNet_Numerics_Distributions_StudentT * MathNet_Numerics_Distributions_StudentT;
typedef struct __MathNet_Numerics_Distributions_Weibull * MathNet_Numerics_Distributions_Weibull;
typedef struct __MathNet_Numerics_Distributions_IDiscreteDistribution * MathNet_Numerics_Distributions_IDiscreteDistribution;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __MathNet_Numerics_Distributions_Bernoulli * MathNet_Numerics_Distributions_Bernoulli;
typedef struct __MathNet_Numerics_Distributions_Binomial * MathNet_Numerics_Distributions_Binomial;
typedef struct __MathNet_Numerics_Distributions_Categorical * MathNet_Numerics_Distributions_Categorical;
typedef struct __MathNet_Numerics_Distributions_ConwayMaxwellPoisson * MathNet_Numerics_Distributions_ConwayMaxwellPoisson;
typedef struct __MathNet_Numerics_Distributions_DiscreteUniform * MathNet_Numerics_Distributions_DiscreteUniform;
typedef struct __MathNet_Numerics_Distributions_Geometric * MathNet_Numerics_Distributions_Geometric;
typedef struct __MathNet_Numerics_Distributions_Hypergeometric * MathNet_Numerics_Distributions_Hypergeometric;
typedef struct __MathNet_Numerics_Distributions_NegativeBinomial * MathNet_Numerics_Distributions_NegativeBinomial;
typedef struct __MathNet_Numerics_Distributions_Poisson * MathNet_Numerics_Distributions_Poisson;
typedef struct __MathNet_Numerics_Distributions_Zipf * MathNet_Numerics_Distributions_Zipf;
typedef struct __MathNet_Numerics_Distributions_Dirichlet * MathNet_Numerics_Distributions_Dirichlet;
typedef struct __MathNet_Numerics_Distributions_InverseWishart * MathNet_Numerics_Distributions_InverseWishart;
typedef struct __MathNet_Numerics_Distributions_MatrixNormal * MathNet_Numerics_Distributions_MatrixNormal;
typedef struct __MathNet_Numerics_Distributions_Multinomial * MathNet_Numerics_Distributions_Multinomial;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __MathNet_Numerics_Distributions_MeanPrecisionPair * MathNet_Numerics_Distributions_MeanPrecisionPair;
typedef struct __MathNet_Numerics_Distributions_NormalGamma * MathNet_Numerics_Distributions_NormalGamma;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __MathNet_Numerics_Distributions_Wishart * MathNet_Numerics_Distributions_Wishart;
typedef struct __MathNet_Numerics_Financial_AbsoluteReturnMeasures * MathNet_Numerics_Financial_AbsoluteReturnMeasures;
typedef struct __MathNet_Numerics_Financial_AbsoluteRiskMeasures * MathNet_Numerics_Financial_AbsoluteRiskMeasures;
typedef struct __MathNet_Numerics_IntegralTransforms_Algorithms_DiscreteFourierTransform * MathNet_Numerics_IntegralTransforms_Algorithms_DiscreteFourierTransform;
typedef struct __MathNet_Numerics_IntegralTransforms_Algorithms_DiscreteHartleyTransform * MathNet_Numerics_IntegralTransforms_Algorithms_DiscreteHartleyTransform;
typedef struct __MathNet_Numerics_IntegralTransforms_Transform * MathNet_Numerics_IntegralTransforms_Transform;
typedef struct __MathNet_Numerics_Integration_Algorithms_DoubleExponentialTransformation * MathNet_Numerics_Integration_Algorithms_DoubleExponentialTransformation;
typedef struct __System_Func_T2 * System_Func_T2;
typedef struct __MathNet_Numerics_Integration_Algorithms_NewtonCotesTrapeziumRule * MathNet_Numerics_Integration_Algorithms_NewtonCotesTrapeziumRule;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __MathNet_Numerics_Integration_Algorithms_SimpsonRule * MathNet_Numerics_Integration_Algorithms_SimpsonRule;
typedef struct __MathNet_Numerics_Integration_Integrate * MathNet_Numerics_Integration_Integrate;
typedef struct __MathNet_Numerics_Interpolation_IInterpolation * MathNet_Numerics_Interpolation_IInterpolation;
typedef struct __MathNet_Numerics_Interpolation_Algorithms_AkimaSplineInterpolation * MathNet_Numerics_Interpolation_Algorithms_AkimaSplineInterpolation;
typedef struct __System_Collections_Generic_IList_T1 * System_Collections_Generic_IList_T1;
typedef struct __MathNet_Numerics_Interpolation_Algorithms_BarycentricInterpolation * MathNet_Numerics_Interpolation_Algorithms_BarycentricInterpolation;
typedef struct __MathNet_Numerics_Interpolation_Algorithms_BulirschStoerRationalInterpolation * MathNet_Numerics_Interpolation_Algorithms_BulirschStoerRationalInterpolation;
typedef struct __MathNet_Numerics_Interpolation_Algorithms_CubicHermiteSplineInterpolation * MathNet_Numerics_Interpolation_Algorithms_CubicHermiteSplineInterpolation;
typedef struct __MathNet_Numerics_Interpolation_Algorithms_CubicSplineInterpolation * MathNet_Numerics_Interpolation_Algorithms_CubicSplineInterpolation;
typedef struct __MathNet_Numerics_Interpolation_Algorithms_EquidistantPolynomialInterpolation * MathNet_Numerics_Interpolation_Algorithms_EquidistantPolynomialInterpolation;
typedef struct __MathNet_Numerics_Interpolation_Algorithms_FloaterHormannRationalInterpolation * MathNet_Numerics_Interpolation_Algorithms_FloaterHormannRationalInterpolation;
typedef struct __MathNet_Numerics_Interpolation_Algorithms_LinearSplineInterpolation * MathNet_Numerics_Interpolation_Algorithms_LinearSplineInterpolation;
typedef struct __MathNet_Numerics_Interpolation_Algorithms_NevillePolynomialInterpolation * MathNet_Numerics_Interpolation_Algorithms_NevillePolynomialInterpolation;
typedef struct __MathNet_Numerics_Interpolation_Algorithms_SplineInterpolation * MathNet_Numerics_Interpolation_Algorithms_SplineInterpolation;
typedef struct __MathNet_Numerics_Interpolation_Interpolate * MathNet_Numerics_Interpolation_Interpolate;
typedef struct __MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Func_T2 * System_Func_T2;
typedef struct __System_Func_T4 * System_Func_T4;
typedef struct __System_Exception * System_Exception;
typedef struct __System_Collections_Generic_IList_T1 * System_Collections_Generic_IList_T1;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_Matrix * MathNet_Numerics_LinearAlgebra_Complex32_Matrix;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Func_T2 * System_Func_T2;
typedef struct __System_Func_T4 * System_Func_T4;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix * MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Func_T3 * System_Func_T3;
typedef struct __MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * MathNet_Numerics_LinearAlgebra_Generic_Vector_T1;
typedef struct __System_Collections_Generic_IEnumerator_T1 * System_Collections_Generic_IEnumerator_T1;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Func_T2 * System_Func_T2;
typedef struct __System_Func_T3 * System_Func_T3;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_Vector * MathNet_Numerics_LinearAlgebra_Complex32_Vector;
typedef struct __System_Collections_Generic_IEnumerator_T1 * System_Collections_Generic_IEnumerator_T1;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Func_T3 * System_Func_T3;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_DenseVector * MathNet_Numerics_LinearAlgebra_Complex32_DenseVector;
typedef struct __System_Func_T2 * System_Func_T2;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix * MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_ExtensionMethods * MathNet_Numerics_LinearAlgebra_Complex32_ExtensionMethods;
typedef struct __MathNet_Numerics_LinearAlgebra_Generic_ISolver_T1 * MathNet_Numerics_LinearAlgebra_Generic_ISolver_T1;
typedef struct __MathNet_Numerics_LinearAlgebra_Generic_Factorization_Cholesky_T1 * MathNet_Numerics_LinearAlgebra_Generic_Factorization_Cholesky_T1;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Cholesky * MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Cholesky;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseCholesky * MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseCholesky;
typedef struct __MathNet_Numerics_LinearAlgebra_Generic_Factorization_Evd_T1 * MathNet_Numerics_LinearAlgebra_Generic_Factorization_Evd_T1;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Evd * MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Evd;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseEvd * MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseEvd;
typedef struct __MathNet_Numerics_LinearAlgebra_Generic_Factorization_QR_T1 * MathNet_Numerics_LinearAlgebra_Generic_Factorization_QR_T1;
typedef struct __MathNet_Numerics_LinearAlgebra_Generic_Factorization_GramSchmidt_T1 * MathNet_Numerics_LinearAlgebra_Generic_Factorization_GramSchmidt_T1;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_Factorization_GramSchmidt * MathNet_Numerics_LinearAlgebra_Complex32_Factorization_GramSchmidt;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseGramSchmidt * MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseGramSchmidt;
typedef struct __MathNet_Numerics_LinearAlgebra_Generic_Factorization_LU_T1 * MathNet_Numerics_LinearAlgebra_Generic_Factorization_LU_T1;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_Factorization_LU * MathNet_Numerics_LinearAlgebra_Complex32_Factorization_LU;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseLU * MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseLU;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_Factorization_QR * MathNet_Numerics_LinearAlgebra_Complex32_Factorization_QR;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseQR * MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseQR;
typedef struct __MathNet_Numerics_LinearAlgebra_Generic_Factorization_Svd_T1 * MathNet_Numerics_LinearAlgebra_Generic_Factorization_Svd_T1;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Svd * MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Svd;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseSvd * MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseSvd;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserCholesky * MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserCholesky;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserEvd * MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserEvd;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserGramSchmidt * MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserGramSchmidt;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserLU * MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserLU;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserQR * MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserQR;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserSvd * MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserSvd;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterativeSolver * MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterativeSolver;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterativeSolverSetup * MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterativeSolverSetup;
typedef struct __System_Type * System_Type;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterator * MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterator;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_BiCgStab * MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_BiCgStab;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_CompositeSolver * MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_CompositeSolver;
typedef struct __System_Reflection_AssemblyName * System_Reflection_AssemblyName;
typedef struct __System_Reflection_Assembly * System_Reflection_Assembly;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_CompositeSolver_DoubleComparer * MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_CompositeSolver_DoubleComparer;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_GpBiCg * MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_GpBiCg;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_MlkBiCgStab * MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_MlkBiCgStab;
typedef struct __System_Collections_Generic_IList_T1 * System_Collections_Generic_IList_T1;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_TFQMR * MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_TFQMR;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterator * MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterator;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_IPreConditioner * MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_IPreConditioner;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_Diagonal * MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_Diagonal;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_Ilutp * MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_Ilutp;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_IncompleteLU * MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_IncompleteLU;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IIterationStopCriterium * MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IIterationStopCriterium;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_DivergenceStopCriterium * MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_DivergenceStopCriterium;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_FailureStopCriterium * MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_FailureStopCriterium;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IterationCountStopCriterium * MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IterationCountStopCriterium;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_ResidualStopCriterium * MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_ResidualStopCriterium;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix * MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix;
typedef struct __System_Collections_Generic_IList_T1 * System_Collections_Generic_IList_T1;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex32_SparseVector * MathNet_Numerics_LinearAlgebra_Complex32_SparseVector;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_Matrix * MathNet_Numerics_LinearAlgebra_Complex_Matrix;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Func_T2 * System_Func_T2;
typedef struct __System_Func_T4 * System_Func_T4;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix * MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Func_T3 * System_Func_T3;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_Vector * MathNet_Numerics_LinearAlgebra_Complex_Vector;
typedef struct __System_Collections_Generic_IEnumerator_T1 * System_Collections_Generic_IEnumerator_T1;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Func_T3 * System_Func_T3;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_DenseVector * MathNet_Numerics_LinearAlgebra_Complex_DenseVector;
typedef struct __System_Func_T2 * System_Func_T2;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix * MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_ExtensionMethods * MathNet_Numerics_LinearAlgebra_Complex_ExtensionMethods;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_Factorization_Cholesky * MathNet_Numerics_LinearAlgebra_Complex_Factorization_Cholesky;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseCholesky * MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseCholesky;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_Factorization_Evd * MathNet_Numerics_LinearAlgebra_Complex_Factorization_Evd;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseEvd * MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseEvd;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_Factorization_GramSchmidt * MathNet_Numerics_LinearAlgebra_Complex_Factorization_GramSchmidt;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseGramSchmidt * MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseGramSchmidt;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_Factorization_LU * MathNet_Numerics_LinearAlgebra_Complex_Factorization_LU;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseLU * MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseLU;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_Factorization_QR * MathNet_Numerics_LinearAlgebra_Complex_Factorization_QR;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseQR * MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseQR;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_Factorization_Svd * MathNet_Numerics_LinearAlgebra_Complex_Factorization_Svd;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseSvd * MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseSvd;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserCholesky * MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserCholesky;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserEvd * MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserEvd;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserGramSchmidt * MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserGramSchmidt;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserLU * MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserLU;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserQR * MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserQR;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserSvd * MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserSvd;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterativeSolver * MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterativeSolver;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterativeSolverSetup * MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterativeSolverSetup;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterator * MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterator;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_BiCgStab * MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_BiCgStab;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_CompositeSolver * MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_CompositeSolver;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_CompositeSolver_DoubleComparer * MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_CompositeSolver_DoubleComparer;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_GpBiCg * MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_GpBiCg;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_MlkBiCgStab * MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_MlkBiCgStab;
typedef struct __System_Collections_Generic_IList_T1 * System_Collections_Generic_IList_T1;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_TFQMR * MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_TFQMR;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterator * MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterator;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_IPreConditioner * MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_IPreConditioner;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_Diagonal * MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_Diagonal;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_Ilutp * MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_Ilutp;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_IncompleteLU * MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_IncompleteLU;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IIterationStopCriterium * MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IIterationStopCriterium;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_DivergenceStopCriterium * MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_DivergenceStopCriterium;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_FailureStopCriterium * MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_FailureStopCriterium;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IterationCountStopCriterium * MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IterationCountStopCriterium;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_ResidualStopCriterium * MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_ResidualStopCriterium;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix * MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix;
typedef struct __System_Collections_Generic_IList_T1 * System_Collections_Generic_IList_T1;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __MathNet_Numerics_LinearAlgebra_Complex_SparseVector * MathNet_Numerics_LinearAlgebra_Complex_SparseVector;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_Matrix * MathNet_Numerics_LinearAlgebra_Double_Matrix;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Func_T4 * System_Func_T4;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_DenseMatrix * MathNet_Numerics_LinearAlgebra_Double_DenseMatrix;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Func_T3 * System_Func_T3;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_Vector * MathNet_Numerics_LinearAlgebra_Double_Vector;
typedef struct __System_Collections_Generic_IEnumerator_T1 * System_Collections_Generic_IEnumerator_T1;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Func_T3 * System_Func_T3;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_DenseVector * MathNet_Numerics_LinearAlgebra_Double_DenseVector;
typedef struct __System_Func_T2 * System_Func_T2;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix * MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_ExtensionMethods * MathNet_Numerics_LinearAlgebra_Double_ExtensionMethods;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_Factorization_Cholesky * MathNet_Numerics_LinearAlgebra_Double_Factorization_Cholesky;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseCholesky * MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseCholesky;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_Factorization_Evd * MathNet_Numerics_LinearAlgebra_Double_Factorization_Evd;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseEvd * MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseEvd;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_Factorization_GramSchmidt * MathNet_Numerics_LinearAlgebra_Double_Factorization_GramSchmidt;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseGramSchmidt * MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseGramSchmidt;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_Factorization_LU * MathNet_Numerics_LinearAlgebra_Double_Factorization_LU;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseLU * MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseLU;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_Factorization_QR * MathNet_Numerics_LinearAlgebra_Double_Factorization_QR;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseQR * MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseQR;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_Factorization_Svd * MathNet_Numerics_LinearAlgebra_Double_Factorization_Svd;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseSvd * MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseSvd;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_Factorization_UserCholesky * MathNet_Numerics_LinearAlgebra_Double_Factorization_UserCholesky;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_Factorization_UserEvd * MathNet_Numerics_LinearAlgebra_Double_Factorization_UserEvd;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_Factorization_UserGramSchmidt * MathNet_Numerics_LinearAlgebra_Double_Factorization_UserGramSchmidt;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_Factorization_UserLU * MathNet_Numerics_LinearAlgebra_Double_Factorization_UserLU;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_Factorization_UserQR * MathNet_Numerics_LinearAlgebra_Double_Factorization_UserQR;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_Factorization_UserSvd * MathNet_Numerics_LinearAlgebra_Double_Factorization_UserSvd;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterativeSolver * MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterativeSolver;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterativeSolverSetup * MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterativeSolverSetup;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterator * MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterator;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_BiCgStab * MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_BiCgStab;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_CompositeSolver * MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_CompositeSolver;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_CompositeSolver_DoubleComparer * MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_CompositeSolver_DoubleComparer;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_GpBiCg * MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_GpBiCg;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_MlkBiCgStab * MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_MlkBiCgStab;
typedef struct __System_Collections_Generic_IList_T1 * System_Collections_Generic_IList_T1;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_TFQMR * MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_TFQMR;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterator * MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterator;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_IPreConditioner * MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_IPreConditioner;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_Diagonal * MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_Diagonal;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_Ilutp * MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_Ilutp;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_IncompleteLU * MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_IncompleteLU;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IIterationStopCriterium * MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IIterationStopCriterium;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_DivergenceStopCriterium * MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_DivergenceStopCriterium;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_FailureStopCriterium * MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_FailureStopCriterium;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IterationCountStopCriterium * MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IterationCountStopCriterium;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_ResidualStopCriterium * MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_ResidualStopCriterium;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_SparseMatrix * MathNet_Numerics_LinearAlgebra_Double_SparseMatrix;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __MathNet_Numerics_LinearAlgebra_Double_SparseVector * MathNet_Numerics_LinearAlgebra_Double_SparseVector;
typedef struct __MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus;
typedef struct __MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationCancelled * MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationCancelled;
typedef struct __MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationConverged * MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationConverged;
typedef struct __MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationDiverged * MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationDiverged;
typedef struct __MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationFailure * MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationFailure;
typedef struct __MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationIndetermined * MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationIndetermined;
typedef struct __MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationRunning * MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationRunning;
typedef struct __MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationStoppedWithoutConvergence * MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationStoppedWithoutConvergence;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_Matrix * MathNet_Numerics_LinearAlgebra_Single_Matrix;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Func_T2 * System_Func_T2;
typedef struct __System_Func_T4 * System_Func_T4;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_DenseMatrix * MathNet_Numerics_LinearAlgebra_Single_DenseMatrix;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Func_T3 * System_Func_T3;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_Vector * MathNet_Numerics_LinearAlgebra_Single_Vector;
typedef struct __System_Collections_Generic_IEnumerator_T1 * System_Collections_Generic_IEnumerator_T1;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Func_T3 * System_Func_T3;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_DenseVector * MathNet_Numerics_LinearAlgebra_Single_DenseVector;
typedef struct __System_Func_T2 * System_Func_T2;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix * MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_ExtensionMethods * MathNet_Numerics_LinearAlgebra_Single_ExtensionMethods;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_Factorization_Cholesky * MathNet_Numerics_LinearAlgebra_Single_Factorization_Cholesky;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseCholesky * MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseCholesky;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_Factorization_Evd * MathNet_Numerics_LinearAlgebra_Single_Factorization_Evd;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseEvd * MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseEvd;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_Factorization_GramSchmidt * MathNet_Numerics_LinearAlgebra_Single_Factorization_GramSchmidt;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseGramSchmidt * MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseGramSchmidt;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_Factorization_LU * MathNet_Numerics_LinearAlgebra_Single_Factorization_LU;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseLU * MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseLU;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_Factorization_QR * MathNet_Numerics_LinearAlgebra_Single_Factorization_QR;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseQR * MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseQR;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_Factorization_Svd * MathNet_Numerics_LinearAlgebra_Single_Factorization_Svd;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseSvd * MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseSvd;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_Factorization_UserCholesky * MathNet_Numerics_LinearAlgebra_Single_Factorization_UserCholesky;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_Factorization_UserEvd * MathNet_Numerics_LinearAlgebra_Single_Factorization_UserEvd;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_Factorization_UserGramSchmidt * MathNet_Numerics_LinearAlgebra_Single_Factorization_UserGramSchmidt;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_Factorization_UserLU * MathNet_Numerics_LinearAlgebra_Single_Factorization_UserLU;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_Factorization_UserQR * MathNet_Numerics_LinearAlgebra_Single_Factorization_UserQR;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_Factorization_UserSvd * MathNet_Numerics_LinearAlgebra_Single_Factorization_UserSvd;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterativeSolver * MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterativeSolver;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterativeSolverSetup * MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterativeSolverSetup;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterator * MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterator;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_BiCgStab * MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_BiCgStab;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_CompositeSolver * MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_CompositeSolver;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_CompositeSolver_DoubleComparer * MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_CompositeSolver_DoubleComparer;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_GpBiCg * MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_GpBiCg;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_MlkBiCgStab * MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_MlkBiCgStab;
typedef struct __System_Collections_Generic_IList_T1 * System_Collections_Generic_IList_T1;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_TFQMR * MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_TFQMR;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterator * MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterator;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_IPreConditioner * MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_IPreConditioner;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_Diagonal * MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_Diagonal;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_Ilutp * MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_Ilutp;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_IncompleteLU * MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_IncompleteLU;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IIterationStopCriterium * MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IIterationStopCriterium;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_DivergenceStopCriterium * MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_DivergenceStopCriterium;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_FailureStopCriterium * MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_FailureStopCriterium;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IterationCountStopCriterium * MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IterationCountStopCriterium;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_ResidualStopCriterium * MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_ResidualStopCriterium;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_SparseMatrix * MathNet_Numerics_LinearAlgebra_Single_SparseMatrix;
typedef struct __System_Collections_Generic_IList_T1 * System_Collections_Generic_IList_T1;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __MathNet_Numerics_LinearAlgebra_Single_SparseVector * MathNet_Numerics_LinearAlgebra_Single_SparseVector;
typedef struct __MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 * MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1;
typedef struct __System_Func_T2 * System_Func_T2;
typedef struct __System_Func_T4 * System_Func_T4;
typedef struct __MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1 * MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1;
typedef struct __System_Func_T3 * System_Func_T3;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Func_T2 * System_Func_T2;
typedef struct __System_Func_T4 * System_Func_T4;
typedef struct __MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 * MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Func_T2 * System_Func_T2;
typedef struct __System_Func_T3 * System_Func_T3;
typedef struct __MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1 * MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1;
typedef struct __System_Func_T2 * System_Func_T2;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Func_T2 * System_Func_T2;
typedef struct __System_Func_T3 * System_Func_T3;
typedef struct __MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1 * MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1;
typedef struct __System_Func_T2 * System_Func_T2;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Func_T2 * System_Func_T2;
typedef struct __System_Func_T4 * System_Func_T4;
typedef struct __MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 * MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1;
typedef struct __System_Func_T3 * System_Func_T3;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Collections_Generic_IList_T1 * System_Collections_Generic_IList_T1;
typedef struct __System_Func_T2 * System_Func_T2;
typedef struct __System_Func_T4 * System_Func_T4;
typedef struct __MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1 * MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1;
typedef struct __System_Func_T2 * System_Func_T2;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Func_T2 * System_Func_T2;
typedef struct __System_Func_T3 * System_Func_T3;
typedef struct __MathNet_Numerics_NumberTheory_IntegerTheory * MathNet_Numerics_NumberTheory_IntegerTheory;
typedef struct __System_Collections_Generic_IList_T1 * System_Collections_Generic_IList_T1;
typedef struct __MathNet_Numerics_Permutation * MathNet_Numerics_Permutation;
typedef struct __MathNet_Numerics_Precision * MathNet_Numerics_Precision;
typedef struct __System_Collections_Generic_IList_T1 * System_Collections_Generic_IList_T1;
typedef struct __MathNet_Numerics_Precision_DoubleLongUnion * MathNet_Numerics_Precision_DoubleLongUnion;
typedef struct __MathNet_Numerics_Properties_Resources * MathNet_Numerics_Properties_Resources;
typedef struct __System_Resources_ResourceManager * System_Resources_ResourceManager;
typedef struct __System_Globalization_CultureInfo * System_Globalization_CultureInfo;
typedef struct __MathNet_Numerics_Random_AbstractRandomNumberGenerator * MathNet_Numerics_Random_AbstractRandomNumberGenerator;
typedef struct __MathNet_Numerics_Random_Mcg31m1 * MathNet_Numerics_Random_Mcg31m1;
typedef struct __MathNet_Numerics_Random_Mcg59 * MathNet_Numerics_Random_Mcg59;
typedef struct __MathNet_Numerics_Random_MersenneTwister * MathNet_Numerics_Random_MersenneTwister;
typedef struct __MathNet_Numerics_Random_Mrg32k3a * MathNet_Numerics_Random_Mrg32k3a;
typedef struct __MathNet_Numerics_Random_Palf * MathNet_Numerics_Random_Palf;
typedef struct __MathNet_Numerics_Random_SystemRandomExtensions * MathNet_Numerics_Random_SystemRandomExtensions;
typedef struct __MathNet_Numerics_Random_WH1982 * MathNet_Numerics_Random_WH1982;
typedef struct __MathNet_Numerics_Random_WH2006 * MathNet_Numerics_Random_WH2006;
typedef struct __MathNet_Numerics_Random_Xorshift * MathNet_Numerics_Random_Xorshift;
typedef struct __MathNet_Numerics_SerializableAttribute * MathNet_Numerics_SerializableAttribute;
typedef struct __MathNet_Numerics_Signals_SignalGenerator * MathNet_Numerics_Signals_SignalGenerator;
typedef struct __System_Func_T2 * System_Func_T2;
typedef struct __System_Func_T2 * System_Func_T2;
typedef struct __System_Func_T2 * System_Func_T2;
typedef struct __System_Func_T2 * System_Func_T2;
typedef struct __System_Func_T2 * System_Func_T2;
typedef struct __System_Func_T2 * System_Func_T2;
typedef struct __System_Func_T2 * System_Func_T2;
typedef struct __System_Func_T2 * System_Func_T2;
typedef struct __System_Func_T2 * System_Func_T2;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Func_T2 * System_Func_T2;
typedef struct __System_Func_T2 * System_Func_T2;
typedef struct __System_Func_T2 * System_Func_T2;
typedef struct __System_Func_T2 * System_Func_T2;
typedef struct __System_Func_T3 * System_Func_T3;
typedef struct __MathNet_Numerics_Sorting * MathNet_Numerics_Sorting;
typedef struct __System_Collections_Generic_IList_T1 * System_Collections_Generic_IList_T1;
typedef struct __System_Collections_Generic_IList_T1 * System_Collections_Generic_IList_T1;
typedef struct __System_Collections_Generic_IList_T1 * System_Collections_Generic_IList_T1;
typedef struct __System_Collections_Generic_IList_T1 * System_Collections_Generic_IList_T1;
typedef struct __System_Collections_Generic_IList_T1 * System_Collections_Generic_IList_T1;
typedef struct __System_Collections_Generic_IList_T1 * System_Collections_Generic_IList_T1;
typedef struct __System_Collections_Generic_IList_T1 * System_Collections_Generic_IList_T1;
typedef struct __System_Collections_Generic_IList_T1 * System_Collections_Generic_IList_T1;
typedef struct __System_Collections_Generic_IComparer_T1 * System_Collections_Generic_IComparer_T1;
typedef struct __System_Collections_Generic_IList_T1 * System_Collections_Generic_IList_T1;
typedef struct __System_Collections_Generic_IList_T1 * System_Collections_Generic_IList_T1;
typedef struct __System_Collections_Generic_IComparer_T1 * System_Collections_Generic_IComparer_T1;
typedef struct __System_Collections_Generic_IList_T1 * System_Collections_Generic_IList_T1;
typedef struct __System_Collections_Generic_IList_T1 * System_Collections_Generic_IList_T1;
typedef struct __System_Collections_Generic_IList_T1 * System_Collections_Generic_IList_T1;
typedef struct __System_Collections_Generic_IComparer_T1 * System_Collections_Generic_IComparer_T1;
typedef struct __System_Collections_Generic_IList_T1 * System_Collections_Generic_IList_T1;
typedef struct __System_Collections_Generic_IComparer_T1 * System_Collections_Generic_IComparer_T1;
typedef struct __MathNet_Numerics_SpecialFunctions * MathNet_Numerics_SpecialFunctions;
typedef struct __MathNet_Numerics_Evaluate * MathNet_Numerics_Evaluate;
typedef struct __MathNet_Numerics_Statistics_ArrayStatistics * MathNet_Numerics_Statistics_ArrayStatistics;
typedef struct __MathNet_Numerics_Statistics_Correlation * MathNet_Numerics_Statistics_Correlation;
typedef struct __MathNet_Numerics_Statistics_DescriptiveStatistics * MathNet_Numerics_Statistics_DescriptiveStatistics;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __MathNet_Numerics_Statistics_Bucket * MathNet_Numerics_Statistics_Bucket;
typedef struct __System_Collections_Generic_IComparer_T1 * System_Collections_Generic_IComparer_T1;
typedef struct __MathNet_Numerics_Statistics_Histogram * MathNet_Numerics_Statistics_Histogram;
typedef struct __MathNet_Numerics_Statistics_Mcmc_McmcSampler_T1 * MathNet_Numerics_Statistics_Mcmc_McmcSampler_T1;
typedef struct __MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1 * MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1;
typedef struct __MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_DiffMethod * MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_DiffMethod;
typedef struct __System_Reflection_MethodInfo * System_Reflection_MethodInfo;
typedef struct __System_AsyncCallback * System_AsyncCallback;
typedef struct __System_IAsyncResult * System_IAsyncResult;
typedef struct __System_Runtime_Serialization_SerializationInfo * System_Runtime_Serialization_SerializationInfo;
typedef struct __System_Runtime_Serialization_StreamingContext * System_Runtime_Serialization_StreamingContext;
typedef struct __System_Delegate * System_Delegate;
typedef struct __MathNet_Numerics_Statistics_Mcmc_HybridMC * MathNet_Numerics_Statistics_Mcmc_HybridMC;
typedef struct __MathNet_Numerics_Statistics_Mcmc_Diagnostics_MCMCDiagnostics * MathNet_Numerics_Statistics_Mcmc_Diagnostics_MCMCDiagnostics;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Func_T2 * System_Func_T2;
typedef struct __System_Collections_Generic_IEnumerable_T1 * System_Collections_Generic_IEnumerable_T1;
typedef struct __System_Func_T2 * System_Func_T2;
typedef struct __MathNet_Numerics_Statistics_Mcmc_GlobalProposalSampler_T1 * MathNet_Numerics_Statistics_Mcmc_GlobalProposalSampler_T1;
typedef struct __MathNet_Numerics_Statistics_Mcmc_LocalProposalSampler_T1 * MathNet_Numerics_Statistics_Mcmc_LocalProposalSampler_T1;
typedef struct __MathNet_Numerics_Statistics_Mcmc_Density_T1 * MathNet_Numerics_Statistics_Mcmc_Density_T1;
typedef struct __MathNet_Numerics_Statistics_Mcmc_DensityLn_T1 * MathNet_Numerics_Statistics_Mcmc_DensityLn_T1;
typedef struct __MathNet_Numerics_Statistics_Mcmc_TransitionKernelLn_T1 * MathNet_Numerics_Statistics_Mcmc_TransitionKernelLn_T1;
typedef struct __MathNet_Numerics_Statistics_Mcmc_MetropolisHastingsSampler_T1 * MathNet_Numerics_Statistics_Mcmc_MetropolisHastingsSampler_T1;
typedef struct __MathNet_Numerics_Statistics_Mcmc_MetropolisSampler_T1 * MathNet_Numerics_Statistics_Mcmc_MetropolisSampler_T1;
typedef struct __MathNet_Numerics_Statistics_Mcmc_RejectionSampler_T1 * MathNet_Numerics_Statistics_Mcmc_RejectionSampler_T1;
typedef struct __MathNet_Numerics_Statistics_Mcmc_UnivariateHybridMC * MathNet_Numerics_Statistics_Mcmc_UnivariateHybridMC;
typedef struct __MathNet_Numerics_Statistics_Mcmc_UnivariateSliceSampler * MathNet_Numerics_Statistics_Mcmc_UnivariateSliceSampler;
typedef struct __MathNet_Numerics_Statistics_Percentile * MathNet_Numerics_Statistics_Percentile;
typedef struct __MathNet_Numerics_Statistics_SortedArrayStatistics * MathNet_Numerics_Statistics_SortedArrayStatistics;
typedef struct __MathNet_Numerics_Statistics_Statistics * MathNet_Numerics_Statistics_Statistics;
typedef struct __MathNet_Numerics_Statistics_StreamingStatistics * MathNet_Numerics_Statistics_StreamingStatistics;
typedef struct __MathNet_Numerics_TargetedPatchingOptOutAttribute * MathNet_Numerics_TargetedPatchingOptOutAttribute;
typedef struct __MathNet_Numerics_Threading_CommonParallel * MathNet_Numerics_Threading_CommonParallel;
typedef struct __System_Action_T1 * System_Action_T1;
typedef struct __System_Action_T2 * System_Action_T2;
typedef struct __System_Action_T2 * System_Action_T2;
typedef struct __System_Action * System_Action;
typedef struct __System_Func_T2 * System_Func_T2;
typedef struct __System_Func_T2 * System_Func_T2;
typedef struct __System_Func_T3 * System_Func_T3;
typedef struct __System_Func_T2 * System_Func_T2;
typedef struct __System_Func_T2 * System_Func_T2;
typedef struct __System_Func_T3 * System_Func_T3;
typedef struct __System_Func_T3 * System_Func_T3;
typedef struct __System_Func_T3 * System_Func_T3;
typedef struct __MathNet_Numerics_Trig * MathNet_Numerics_Trig;

// C wrapper for enumeration type MathNet.Numerics.Algorithms.LinearAlgebra.Norm
#ifndef MathNet_Numerics_Algorithms_LinearAlgebra_Norm_DEFINED
#define MathNet_Numerics_Algorithms_LinearAlgebra_Norm_DEFINED
typedef enum MathNet_Numerics_Algorithms_LinearAlgebra_Norm
{
	MathNet_Numerics_Algorithms_LinearAlgebra_Norm_OneNorm = 0x31,
	MathNet_Numerics_Algorithms_LinearAlgebra_Norm_FrobeniusNorm = 0x66,
	MathNet_Numerics_Algorithms_LinearAlgebra_Norm_InfinityNorm = 0x69,
	MathNet_Numerics_Algorithms_LinearAlgebra_Norm_LargestAbsoluteValue = 0x6d,
} MathNet_Numerics_Algorithms_LinearAlgebra_Norm;
#endif // MathNet_Numerics_Algorithms_LinearAlgebra_Norm_DEFINED

// C wrapper for enumeration type MathNet.Numerics.Algorithms.LinearAlgebra.Transpose
#ifndef MathNet_Numerics_Algorithms_LinearAlgebra_Transpose_DEFINED
#define MathNet_Numerics_Algorithms_LinearAlgebra_Transpose_DEFINED
typedef enum MathNet_Numerics_Algorithms_LinearAlgebra_Transpose
{
	MathNet_Numerics_Algorithms_LinearAlgebra_Transpose_DontTranspose = 0x6f,
	MathNet_Numerics_Algorithms_LinearAlgebra_Transpose_Transpose = 0x70,
	MathNet_Numerics_Algorithms_LinearAlgebra_Transpose_ConjugateTranspose = 0x71,
} MathNet_Numerics_Algorithms_LinearAlgebra_Transpose;
#endif // MathNet_Numerics_Algorithms_LinearAlgebra_Transpose_DEFINED

// C wrapper for enumeration type MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod
#ifndef MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod_DEFINED
#define MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod_DEFINED
typedef enum MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod
{
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod_Full = 0x0,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod_Thin = 0x1,
} MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod;
#endif // MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod_DEFINED

// C wrapper for enumeration type MathNet.Numerics.IntegralTransforms.FourierOptions
#ifndef MathNet_Numerics_IntegralTransforms_FourierOptions_DEFINED
#define MathNet_Numerics_IntegralTransforms_FourierOptions_DEFINED
typedef enum MathNet_Numerics_IntegralTransforms_FourierOptions
{
	MathNet_Numerics_IntegralTransforms_FourierOptions_Default = 0x0,
	MathNet_Numerics_IntegralTransforms_FourierOptions_InverseExponent = 0x1,
	MathNet_Numerics_IntegralTransforms_FourierOptions_AsymmetricScaling = 0x2,
	MathNet_Numerics_IntegralTransforms_FourierOptions_Matlab = 0x2,
	MathNet_Numerics_IntegralTransforms_FourierOptions_NoScaling = 0x4,
	MathNet_Numerics_IntegralTransforms_FourierOptions_NumericalRecipes = 0x5,
} MathNet_Numerics_IntegralTransforms_FourierOptions;
#endif // MathNet_Numerics_IntegralTransforms_FourierOptions_DEFINED

// C wrapper for enumeration type MathNet.Numerics.IntegralTransforms.HartleyOptions
#ifndef MathNet_Numerics_IntegralTransforms_HartleyOptions_DEFINED
#define MathNet_Numerics_IntegralTransforms_HartleyOptions_DEFINED
typedef enum MathNet_Numerics_IntegralTransforms_HartleyOptions
{
	MathNet_Numerics_IntegralTransforms_HartleyOptions_Default = 0x0,
	MathNet_Numerics_IntegralTransforms_HartleyOptions_AsymmetricScaling = 0x2,
	MathNet_Numerics_IntegralTransforms_HartleyOptions_NoScaling = 0x4,
} MathNet_Numerics_IntegralTransforms_HartleyOptions;
#endif // MathNet_Numerics_IntegralTransforms_HartleyOptions_DEFINED

// C wrapper for enumeration type MathNet.Numerics.Interpolation.SplineBoundaryCondition
#ifndef MathNet_Numerics_Interpolation_SplineBoundaryCondition_DEFINED
#define MathNet_Numerics_Interpolation_SplineBoundaryCondition_DEFINED
typedef enum MathNet_Numerics_Interpolation_SplineBoundaryCondition
{
	MathNet_Numerics_Interpolation_SplineBoundaryCondition_Natural = 0x0,
	MathNet_Numerics_Interpolation_SplineBoundaryCondition_ParabolicallyTerminated = 0x1,
	MathNet_Numerics_Interpolation_SplineBoundaryCondition_FirstDerivative = 0x2,
	MathNet_Numerics_Interpolation_SplineBoundaryCondition_SecondDerivative = 0x3,
} MathNet_Numerics_Interpolation_SplineBoundaryCondition;
#endif // MathNet_Numerics_Interpolation_SplineBoundaryCondition_DEFINED

// C wrapper for enumeration type MathNet.Numerics.LinearAlgebra.Generic.Solvers.StopCriterium.StopLevel
#ifndef MathNet_Numerics_LinearAlgebra_Generic_Solvers_StopCriterium_StopLevel_DEFINED
#define MathNet_Numerics_LinearAlgebra_Generic_Solvers_StopCriterium_StopLevel_DEFINED
typedef enum MathNet_Numerics_LinearAlgebra_Generic_Solvers_StopCriterium_StopLevel
{
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_StopCriterium_StopLevel_CalculationFailure = 0x0,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_StopCriterium_StopLevel_Divergence = 0x1,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_StopCriterium_StopLevel_StoppedWithoutConvergence = 0x2,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_StopCriterium_StopLevel_Convergence = 0x3,
} MathNet_Numerics_LinearAlgebra_Generic_Solvers_StopCriterium_StopLevel;
#endif // MathNet_Numerics_LinearAlgebra_Generic_Solvers_StopCriterium_StopLevel_DEFINED

// C wrapper for enumeration type MathNet.Numerics.Statistics.QuantileDefinition
#ifndef MathNet_Numerics_Statistics_QuantileDefinition_DEFINED
#define MathNet_Numerics_Statistics_QuantileDefinition_DEFINED
typedef enum MathNet_Numerics_Statistics_QuantileDefinition
{
	MathNet_Numerics_Statistics_QuantileDefinition_R1 = 0x1,
	MathNet_Numerics_Statistics_QuantileDefinition_SAS3 = 0x1,
	MathNet_Numerics_Statistics_QuantileDefinition_InverseCDF = 0x1,
	MathNet_Numerics_Statistics_QuantileDefinition_R2 = 0x2,
	MathNet_Numerics_Statistics_QuantileDefinition_SAS5 = 0x2,
	MathNet_Numerics_Statistics_QuantileDefinition_InverseCDFAverage = 0x2,
	MathNet_Numerics_Statistics_QuantileDefinition_R3 = 0x3,
	MathNet_Numerics_Statistics_QuantileDefinition_SAS2 = 0x3,
	MathNet_Numerics_Statistics_QuantileDefinition_Nearest = 0x3,
	MathNet_Numerics_Statistics_QuantileDefinition_R4 = 0x4,
	MathNet_Numerics_Statistics_QuantileDefinition_SAS1 = 0x4,
	MathNet_Numerics_Statistics_QuantileDefinition_California = 0x4,
	MathNet_Numerics_Statistics_QuantileDefinition_R5 = 0x5,
	MathNet_Numerics_Statistics_QuantileDefinition_Hydrology = 0x5,
	MathNet_Numerics_Statistics_QuantileDefinition_Hazen = 0x5,
	MathNet_Numerics_Statistics_QuantileDefinition_R6 = 0x6,
	MathNet_Numerics_Statistics_QuantileDefinition_SAS4 = 0x6,
	MathNet_Numerics_Statistics_QuantileDefinition_Nist = 0x6,
	MathNet_Numerics_Statistics_QuantileDefinition_Weibull = 0x6,
	MathNet_Numerics_Statistics_QuantileDefinition_SPSS = 0x6,
	MathNet_Numerics_Statistics_QuantileDefinition_R7 = 0x7,
	MathNet_Numerics_Statistics_QuantileDefinition_Excel = 0x7,
	MathNet_Numerics_Statistics_QuantileDefinition_Mode = 0x7,
	MathNet_Numerics_Statistics_QuantileDefinition_S = 0x7,
	MathNet_Numerics_Statistics_QuantileDefinition_R8 = 0x8,
	MathNet_Numerics_Statistics_QuantileDefinition_Median = 0x8,
	MathNet_Numerics_Statistics_QuantileDefinition_Default = 0x8,
	MathNet_Numerics_Statistics_QuantileDefinition_R9 = 0x9,
	MathNet_Numerics_Statistics_QuantileDefinition_Normal = 0x9,
} MathNet_Numerics_Statistics_QuantileDefinition;
#endif // MathNet_Numerics_Statistics_QuantileDefinition_DEFINED

// C wrapper for enumeration type MathNet.Numerics.Statistics.PercentileMethod
#ifndef MathNet_Numerics_Statistics_PercentileMethod_DEFINED
#define MathNet_Numerics_Statistics_PercentileMethod_DEFINED
typedef enum MathNet_Numerics_Statistics_PercentileMethod
{
	MathNet_Numerics_Statistics_PercentileMethod_Nist = 0x0,
	MathNet_Numerics_Statistics_PercentileMethod_Nearest = 0x1,
	MathNet_Numerics_Statistics_PercentileMethod_Excel = 0x2,
	MathNet_Numerics_Statistics_PercentileMethod_Interpolation = 0x3,
} MathNet_Numerics_Statistics_PercentileMethod;
#endif // MathNet_Numerics_Statistics_PercentileMethod_DEFINED


typedef int (CVICALLBACK * MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_DiffMethod__Callback_t)(void * callbackData,
		MathNet_Numerics_Statistics_Mcmc_DensityLn_T1 f,
		void * x,
		void * __returnValue);
typedef int (CVICALLBACK * MathNet_Numerics_Statistics_Mcmc_GlobalProposalSampler_T1__Callback_t)(void * callbackData,
		void * __returnValue);
typedef int (CVICALLBACK * MathNet_Numerics_Statistics_Mcmc_LocalProposalSampler_T1__Callback_t)(void * callbackData,
		void * init,
		void * __returnValue);
typedef int (CVICALLBACK * MathNet_Numerics_Statistics_Mcmc_Density_T1__Callback_t)(void * callbackData,
		void * sample,
		double * __returnValue);
typedef int (CVICALLBACK * MathNet_Numerics_Statistics_Mcmc_DensityLn_T1__Callback_t)(void * callbackData,
		void * sample,
		double * __returnValue);
typedef int (CVICALLBACK * MathNet_Numerics_Statistics_Mcmc_TransitionKernelLn_T1__Callback_t)(void * callbackData,
		void * to,
		void * from,
		double * __returnValue);


// Global Functions
int CVIFUNC Initialize_MathNet_Numerics(void);
int CVIFUNC Close_MathNet_Numerics(void);

// Type: MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1_AddVectorToScaledVector(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1 __instance,
	char * T,
	void * y,
	ssize_t __yLength,
	void * alpha,
	void * x,
	ssize_t __xLength,
	void * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1_ScaleArray(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1 __instance,
	char * T,
	void * alpha,
	void * x,
	ssize_t __xLength,
	void * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1_DotProduct(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1 __instance,
	char * T,
	void * x,
	ssize_t __xLength,
	void * y,
	ssize_t __yLength,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1_AddArrays(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1 __instance,
	char * T,
	void * x,
	ssize_t __xLength,
	void * y,
	ssize_t __yLength,
	void * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1_SubtractArrays(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1 __instance,
	char * T,
	void * x,
	ssize_t __xLength,
	void * y,
	ssize_t __yLength,
	void * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1_PointWiseMultiplyArrays(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1 __instance,
	char * T,
	void * x,
	ssize_t __xLength,
	void * y,
	ssize_t __yLength,
	void * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1_PointWiseDivideArrays(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1 __instance,
	char * T,
	void * x,
	ssize_t __xLength,
	void * y,
	ssize_t __yLength,
	void * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1_MatrixNorm(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1 __instance,
	char * T,
	MathNet_Numerics_Algorithms_LinearAlgebra_Norm norm,
	int rows,
	int columns,
	void * matrix,
	ssize_t __matrixLength,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1_MatrixMultiply(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1 __instance,
	char * T,
	void * x,
	ssize_t __xLength,
	int rowsX,
	int columnsX,
	void * y,
	ssize_t __yLength,
	int rowsY,
	int columnsY,
	void * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1_MatrixMultiplyWithUpdate(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1 __instance,
	char * T,
	MathNet_Numerics_Algorithms_LinearAlgebra_Transpose transposeA,
	MathNet_Numerics_Algorithms_LinearAlgebra_Transpose transposeB,
	void * alpha,
	void * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	void * b,
	ssize_t __bLength,
	int rowsB,
	int columnsB,
	void * beta,
	void * c,
	ssize_t __cLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1_LUFactor(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1 __instance,
	char * T,
	void * data,
	ssize_t __dataLength,
	int order,
	int * ipiv,
	ssize_t __ipivLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1_LUInverse(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1 __instance,
	char * T,
	void * a,
	ssize_t __aLength,
	int order,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1_LUInverseFactored(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1 __instance,
	char * T,
	void * a,
	ssize_t __aLength,
	int order,
	int * ipiv,
	ssize_t __ipivLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1_LUInverse_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1 __instance,
	char * T,
	void * a,
	ssize_t __aLength,
	int order,
	void * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1_LUInverseFactored_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1 __instance,
	char * T,
	void * a,
	ssize_t __aLength,
	int order,
	int * ipiv,
	ssize_t __ipivLength,
	void * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1_LUSolve(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1 __instance,
	char * T,
	int columnsOfB,
	void * a,
	ssize_t __aLength,
	int order,
	void * b,
	ssize_t __bLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1_LUSolveFactored(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1 __instance,
	char * T,
	int columnsOfB,
	void * a,
	ssize_t __aLength,
	int order,
	int * ipiv,
	ssize_t __ipivLength,
	void * b,
	ssize_t __bLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1_CholeskyFactor(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1 __instance,
	char * T,
	void * a,
	ssize_t __aLength,
	int order,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1_CholeskySolve(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1 __instance,
	char * T,
	void * a,
	ssize_t __aLength,
	int orderA,
	void * b,
	ssize_t __bLength,
	int columnsB,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1_CholeskySolveFactored(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1 __instance,
	char * T,
	void * a,
	ssize_t __aLength,
	int orderA,
	void * b,
	ssize_t __bLength,
	int columnsB,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1_QRFactor(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1 __instance,
	char * T,
	void * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	void * q,
	ssize_t __qLength,
	void * tau,
	ssize_t __tauLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1_QRFactor_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1 __instance,
	char * T,
	void * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	void * q,
	ssize_t __qLength,
	void * tau,
	ssize_t __tauLength,
	void * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1_ThinQRFactor(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1 __instance,
	char * T,
	void * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	void * r,
	ssize_t __rLength,
	void * tau,
	ssize_t __tauLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1_ThinQRFactor_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1 __instance,
	char * T,
	void * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	void * r,
	ssize_t __rLength,
	void * tau,
	ssize_t __tauLength,
	void * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1_QRSolve(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1 __instance,
	char * T,
	void * a,
	ssize_t __aLength,
	int rows,
	int columns,
	void * b,
	ssize_t __bLength,
	int columnsB,
	void * x,
	ssize_t __xLength,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1_QRSolve_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1 __instance,
	char * T,
	void * a,
	ssize_t __aLength,
	int rows,
	int columns,
	void * b,
	ssize_t __bLength,
	int columnsB,
	void * x,
	ssize_t __xLength,
	void * work,
	ssize_t __workLength,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1_QRSolveFactored(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1 __instance,
	char * T,
	void * q,
	ssize_t __qLength,
	void * r,
	ssize_t __rLength,
	int rowsA,
	int columnsA,
	void * tau,
	ssize_t __tauLength,
	void * b,
	ssize_t __bLength,
	int columnsB,
	void * x,
	ssize_t __xLength,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1_QRSolveFactored_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1 __instance,
	char * T,
	void * q,
	ssize_t __qLength,
	void * r,
	ssize_t __rLength,
	int rowsA,
	int columnsA,
	void * tau,
	ssize_t __tauLength,
	void * b,
	ssize_t __bLength,
	int columnsB,
	void * x,
	ssize_t __xLength,
	void * work,
	ssize_t __workLength,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1_SingularValueDecomposition(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1 __instance,
	char * T,
	int computeVectors,
	void * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	void * s,
	ssize_t __sLength,
	void * u,
	ssize_t __uLength,
	void * vt,
	ssize_t __vtLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1_SingularValueDecomposition_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1 __instance,
	char * T,
	int computeVectors,
	void * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	void * s,
	ssize_t __sLength,
	void * u,
	ssize_t __uLength,
	void * vt,
	ssize_t __vtLength,
	void * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1_SvdSolve(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1 __instance,
	char * T,
	void * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	void * b,
	ssize_t __bLength,
	int columnsB,
	void * x,
	ssize_t __xLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1_SvdSolveFactored(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_T1 __instance,
	char * T,
	int rowsA,
	int columnsA,
	void * s,
	ssize_t __sLength,
	void * u,
	ssize_t __uLength,
	void * vt,
	ssize_t __vtLength,
	void * b,
	ssize_t __bLength,
	int columnsB,
	void * x,
	ssize_t __xLength,
	CDotNetHandle * __exception);

int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_MatrixNorm(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	MathNet_Numerics_Algorithms_LinearAlgebra_Norm norm,
	int rows,
	int columns,
	float * matrix,
	ssize_t __matrixLength,
	float * work,
	ssize_t __workLength,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_MatrixNorm_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	MathNet_Numerics_Algorithms_LinearAlgebra_Norm norm,
	int rows,
	int columns,
	double * matrix,
	ssize_t __matrixLength,
	double * work,
	ssize_t __workLength,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_MatrixNorm_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	MathNet_Numerics_Algorithms_LinearAlgebra_Norm norm,
	int rows,
	int columns,
	MathNet_Numerics_Complex32 * matrix,
	ssize_t __matrixLength,
	float * work,
	ssize_t __workLength,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_MatrixNorm_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	MathNet_Numerics_Algorithms_LinearAlgebra_Norm norm,
	int rows,
	int columns,
	System_Numerics_Complex * matrix,
	ssize_t __matrixLength,
	double * work,
	ssize_t __workLength,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_AddVectorToScaledVector(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	double * y,
	ssize_t __yLength,
	double alpha,
	double * x,
	ssize_t __xLength,
	double * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_ScaleArray(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	double alpha,
	double * x,
	ssize_t __xLength,
	double * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_DotProduct(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	double * x,
	ssize_t __xLength,
	double * y,
	ssize_t __yLength,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_AddArrays(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	double * x,
	ssize_t __xLength,
	double * y,
	ssize_t __yLength,
	double * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_SubtractArrays(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	double * x,
	ssize_t __xLength,
	double * y,
	ssize_t __yLength,
	double * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_PointWiseMultiplyArrays(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	double * x,
	ssize_t __xLength,
	double * y,
	ssize_t __yLength,
	double * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_PointWiseDivideArrays(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	double * x,
	ssize_t __xLength,
	double * y,
	ssize_t __yLength,
	double * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_MatrixNorm_4(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	MathNet_Numerics_Algorithms_LinearAlgebra_Norm norm,
	int rows,
	int columns,
	double * matrix,
	ssize_t __matrixLength,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_MatrixMultiply(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	double * x,
	ssize_t __xLength,
	int rowsX,
	int columnsX,
	double * y,
	ssize_t __yLength,
	int rowsY,
	int columnsY,
	double * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_MatrixMultiplyWithUpdate(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	MathNet_Numerics_Algorithms_LinearAlgebra_Transpose transposeA,
	MathNet_Numerics_Algorithms_LinearAlgebra_Transpose transposeB,
	double alpha,
	double * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	double * b,
	ssize_t __bLength,
	int rowsB,
	int columnsB,
	double beta,
	double * c,
	ssize_t __cLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_LUFactor(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	double * data,
	ssize_t __dataLength,
	int order,
	int * ipiv,
	ssize_t __ipivLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_LUInverse(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	double * a,
	ssize_t __aLength,
	int order,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_LUInverseFactored(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	double * a,
	ssize_t __aLength,
	int order,
	int * ipiv,
	ssize_t __ipivLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_LUInverse_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	double * a,
	ssize_t __aLength,
	int order,
	double * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_LUInverseFactored_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	double * a,
	ssize_t __aLength,
	int order,
	int * ipiv,
	ssize_t __ipivLength,
	double * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_LUSolve(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	int columnsOfB,
	double * a,
	ssize_t __aLength,
	int order,
	double * b,
	ssize_t __bLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_LUSolveFactored(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	int columnsOfB,
	double * a,
	ssize_t __aLength,
	int order,
	int * ipiv,
	ssize_t __ipivLength,
	double * b,
	ssize_t __bLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_CholeskyFactor(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	double * a,
	ssize_t __aLength,
	int order,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_CholeskySolve(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	double * a,
	ssize_t __aLength,
	int orderA,
	double * b,
	ssize_t __bLength,
	int columnsB,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_CholeskySolveFactored(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	double * a,
	ssize_t __aLength,
	int orderA,
	double * b,
	ssize_t __bLength,
	int columnsB,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_QRFactor(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	double * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	double * q,
	ssize_t __qLength,
	double * tau,
	ssize_t __tauLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_QRFactor_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	double * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	double * q,
	ssize_t __qLength,
	double * tau,
	ssize_t __tauLength,
	double * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_ThinQRFactor(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	double * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	double * r,
	ssize_t __rLength,
	double * tau,
	ssize_t __tauLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_ThinQRFactor_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	double * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	double * r,
	ssize_t __rLength,
	double * tau,
	ssize_t __tauLength,
	double * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_QRSolve(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	double * a,
	ssize_t __aLength,
	int rows,
	int columns,
	double * b,
	ssize_t __bLength,
	int columnsB,
	double * x,
	ssize_t __xLength,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_QRSolve_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	double * a,
	ssize_t __aLength,
	int rows,
	int columns,
	double * b,
	ssize_t __bLength,
	int columnsB,
	double * x,
	ssize_t __xLength,
	double * work,
	ssize_t __workLength,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_QRSolveFactored(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	double * q,
	ssize_t __qLength,
	double * r,
	ssize_t __rLength,
	int rowsA,
	int columnsA,
	double * tau,
	ssize_t __tauLength,
	double * b,
	ssize_t __bLength,
	int columnsB,
	double * x,
	ssize_t __xLength,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_QRSolveFactored_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	double * q,
	ssize_t __qLength,
	double * r,
	ssize_t __rLength,
	int rowsA,
	int columnsA,
	double * tau,
	ssize_t __tauLength,
	double * b,
	ssize_t __bLength,
	int columnsB,
	double * x,
	ssize_t __xLength,
	double * work,
	ssize_t __workLength,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_SingularValueDecomposition(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	int computeVectors,
	double * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	double * s,
	ssize_t __sLength,
	double * u,
	ssize_t __uLength,
	double * vt,
	ssize_t __vtLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_SingularValueDecomposition_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	int computeVectors,
	double * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	double * s,
	ssize_t __sLength,
	double * u,
	ssize_t __uLength,
	double * vt,
	ssize_t __vtLength,
	double * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_SvdSolve(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	double * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	double * b,
	ssize_t __bLength,
	int columnsB,
	double * x,
	ssize_t __xLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_SvdSolveFactored(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	int rowsA,
	int columnsA,
	double * s,
	ssize_t __sLength,
	double * u,
	ssize_t __uLength,
	double * vt,
	ssize_t __vtLength,
	double * b,
	ssize_t __bLength,
	int columnsB,
	double * x,
	ssize_t __xLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_AddVectorToScaledVector_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	float * y,
	ssize_t __yLength,
	float alpha,
	float * x,
	ssize_t __xLength,
	float * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_ScaleArray_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	float alpha,
	float * x,
	ssize_t __xLength,
	float * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_DotProduct_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	float * x,
	ssize_t __xLength,
	float * y,
	ssize_t __yLength,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_AddArrays_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	float * x,
	ssize_t __xLength,
	float * y,
	ssize_t __yLength,
	float * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_SubtractArrays_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	float * x,
	ssize_t __xLength,
	float * y,
	ssize_t __yLength,
	float * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_PointWiseMultiplyArrays_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	float * x,
	ssize_t __xLength,
	float * y,
	ssize_t __yLength,
	float * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_PointWiseDivideArrays_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	float * x,
	ssize_t __xLength,
	float * y,
	ssize_t __yLength,
	float * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_MatrixNorm_5(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	MathNet_Numerics_Algorithms_LinearAlgebra_Norm norm,
	int rows,
	int columns,
	float * matrix,
	ssize_t __matrixLength,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_MatrixMultiply_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	float * x,
	ssize_t __xLength,
	int rowsX,
	int columnsX,
	float * y,
	ssize_t __yLength,
	int rowsY,
	int columnsY,
	float * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_MatrixMultiplyWithUpdate_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	MathNet_Numerics_Algorithms_LinearAlgebra_Transpose transposeA,
	MathNet_Numerics_Algorithms_LinearAlgebra_Transpose transposeB,
	float alpha,
	float * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	float * b,
	ssize_t __bLength,
	int rowsB,
	int columnsB,
	float beta,
	float * c,
	ssize_t __cLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_LUFactor_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	float * data,
	ssize_t __dataLength,
	int order,
	int * ipiv,
	ssize_t __ipivLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_LUInverse_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	float * a,
	ssize_t __aLength,
	int order,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_LUInverseFactored_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	float * a,
	ssize_t __aLength,
	int order,
	int * ipiv,
	ssize_t __ipivLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_LUInverse_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	float * a,
	ssize_t __aLength,
	int order,
	float * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_LUInverseFactored_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	float * a,
	ssize_t __aLength,
	int order,
	int * ipiv,
	ssize_t __ipivLength,
	float * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_LUSolve_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	int columnsOfB,
	float * a,
	ssize_t __aLength,
	int order,
	float * b,
	ssize_t __bLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_LUSolveFactored_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	int columnsOfB,
	float * a,
	ssize_t __aLength,
	int order,
	int * ipiv,
	ssize_t __ipivLength,
	float * b,
	ssize_t __bLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_CholeskyFactor_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	float * a,
	ssize_t __aLength,
	int order,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_CholeskySolve_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	float * a,
	ssize_t __aLength,
	int orderA,
	float * b,
	ssize_t __bLength,
	int columnsB,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_CholeskySolveFactored_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	float * a,
	ssize_t __aLength,
	int orderA,
	float * b,
	ssize_t __bLength,
	int columnsB,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_QRFactor_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	float * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	float * q,
	ssize_t __qLength,
	float * tau,
	ssize_t __tauLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_QRFactor_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	float * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	float * q,
	ssize_t __qLength,
	float * tau,
	ssize_t __tauLength,
	float * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_ThinQRFactor_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	float * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	float * r,
	ssize_t __rLength,
	float * tau,
	ssize_t __tauLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_ThinQRFactor_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	float * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	float * r,
	ssize_t __rLength,
	float * tau,
	ssize_t __tauLength,
	float * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_QRSolve_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	float * a,
	ssize_t __aLength,
	int rows,
	int columns,
	float * b,
	ssize_t __bLength,
	int columnsB,
	float * x,
	ssize_t __xLength,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_QRSolve_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	float * a,
	ssize_t __aLength,
	int rows,
	int columns,
	float * b,
	ssize_t __bLength,
	int columnsB,
	float * x,
	ssize_t __xLength,
	float * work,
	ssize_t __workLength,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_QRSolveFactored_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	float * q,
	ssize_t __qLength,
	float * r,
	ssize_t __rLength,
	int rowsA,
	int columnsA,
	float * tau,
	ssize_t __tauLength,
	float * b,
	ssize_t __bLength,
	int columnsB,
	float * x,
	ssize_t __xLength,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_QRSolveFactored_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	float * q,
	ssize_t __qLength,
	float * r,
	ssize_t __rLength,
	int rowsA,
	int columnsA,
	float * tau,
	ssize_t __tauLength,
	float * b,
	ssize_t __bLength,
	int columnsB,
	float * x,
	ssize_t __xLength,
	float * work,
	ssize_t __workLength,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_SingularValueDecomposition_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	int computeVectors,
	float * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	float * s,
	ssize_t __sLength,
	float * u,
	ssize_t __uLength,
	float * vt,
	ssize_t __vtLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_SingularValueDecomposition_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	int computeVectors,
	float * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	float * s,
	ssize_t __sLength,
	float * u,
	ssize_t __uLength,
	float * vt,
	ssize_t __vtLength,
	float * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_SvdSolve_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	float * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	float * b,
	ssize_t __bLength,
	int columnsB,
	float * x,
	ssize_t __xLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_SvdSolveFactored_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	int rowsA,
	int columnsA,
	float * s,
	ssize_t __sLength,
	float * u,
	ssize_t __uLength,
	float * vt,
	ssize_t __vtLength,
	float * b,
	ssize_t __bLength,
	int columnsB,
	float * x,
	ssize_t __xLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_AddVectorToScaledVector_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	System_Numerics_Complex * y,
	ssize_t __yLength,
	System_Numerics_Complex alpha,
	System_Numerics_Complex * x,
	ssize_t __xLength,
	System_Numerics_Complex * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_ScaleArray_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	System_Numerics_Complex alpha,
	System_Numerics_Complex * x,
	ssize_t __xLength,
	System_Numerics_Complex * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_DotProduct_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	System_Numerics_Complex * x,
	ssize_t __xLength,
	System_Numerics_Complex * y,
	ssize_t __yLength,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_AddArrays_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	System_Numerics_Complex * x,
	ssize_t __xLength,
	System_Numerics_Complex * y,
	ssize_t __yLength,
	System_Numerics_Complex * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_SubtractArrays_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	System_Numerics_Complex * x,
	ssize_t __xLength,
	System_Numerics_Complex * y,
	ssize_t __yLength,
	System_Numerics_Complex * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_PointWiseMultiplyArrays_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	System_Numerics_Complex * x,
	ssize_t __xLength,
	System_Numerics_Complex * y,
	ssize_t __yLength,
	System_Numerics_Complex * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_PointWiseDivideArrays_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	System_Numerics_Complex * x,
	ssize_t __xLength,
	System_Numerics_Complex * y,
	ssize_t __yLength,
	System_Numerics_Complex * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_MatrixNorm_6(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	MathNet_Numerics_Algorithms_LinearAlgebra_Norm norm,
	int rows,
	int columns,
	System_Numerics_Complex * matrix,
	ssize_t __matrixLength,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_MatrixMultiply_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	System_Numerics_Complex * x,
	ssize_t __xLength,
	int rowsX,
	int columnsX,
	System_Numerics_Complex * y,
	ssize_t __yLength,
	int rowsY,
	int columnsY,
	System_Numerics_Complex * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_MatrixMultiplyWithUpdate_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	MathNet_Numerics_Algorithms_LinearAlgebra_Transpose transposeA,
	MathNet_Numerics_Algorithms_LinearAlgebra_Transpose transposeB,
	System_Numerics_Complex alpha,
	System_Numerics_Complex * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	System_Numerics_Complex * b,
	ssize_t __bLength,
	int rowsB,
	int columnsB,
	System_Numerics_Complex beta,
	System_Numerics_Complex * c,
	ssize_t __cLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_LUFactor_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	System_Numerics_Complex * data,
	ssize_t __dataLength,
	int order,
	int * ipiv,
	ssize_t __ipivLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_LUInverse_4(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	System_Numerics_Complex * a,
	ssize_t __aLength,
	int order,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_LUInverseFactored_4(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	System_Numerics_Complex * a,
	ssize_t __aLength,
	int order,
	int * ipiv,
	ssize_t __ipivLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_LUInverse_5(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	System_Numerics_Complex * a,
	ssize_t __aLength,
	int order,
	System_Numerics_Complex * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_LUInverseFactored_5(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	System_Numerics_Complex * a,
	ssize_t __aLength,
	int order,
	int * ipiv,
	ssize_t __ipivLength,
	System_Numerics_Complex * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_LUSolve_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	int columnsOfB,
	System_Numerics_Complex * a,
	ssize_t __aLength,
	int order,
	System_Numerics_Complex * b,
	ssize_t __bLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_LUSolveFactored_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	int columnsOfB,
	System_Numerics_Complex * a,
	ssize_t __aLength,
	int order,
	int * ipiv,
	ssize_t __ipivLength,
	System_Numerics_Complex * b,
	ssize_t __bLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_CholeskyFactor_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	System_Numerics_Complex * a,
	ssize_t __aLength,
	int order,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_CholeskySolve_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	System_Numerics_Complex * a,
	ssize_t __aLength,
	int orderA,
	System_Numerics_Complex * b,
	ssize_t __bLength,
	int columnsB,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_CholeskySolveFactored_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	System_Numerics_Complex * a,
	ssize_t __aLength,
	int orderA,
	System_Numerics_Complex * b,
	ssize_t __bLength,
	int columnsB,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_QRFactor_4(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	System_Numerics_Complex * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	System_Numerics_Complex * q,
	ssize_t __qLength,
	System_Numerics_Complex * tau,
	ssize_t __tauLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_QRFactor_5(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	System_Numerics_Complex * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	System_Numerics_Complex * q,
	ssize_t __qLength,
	System_Numerics_Complex * tau,
	ssize_t __tauLength,
	System_Numerics_Complex * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_ThinQRFactor_4(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	System_Numerics_Complex * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	System_Numerics_Complex * r,
	ssize_t __rLength,
	System_Numerics_Complex * tau,
	ssize_t __tauLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_ThinQRFactor_5(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	System_Numerics_Complex * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	System_Numerics_Complex * r,
	ssize_t __rLength,
	System_Numerics_Complex * tau,
	ssize_t __tauLength,
	System_Numerics_Complex * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_QRSolve_4(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	System_Numerics_Complex * a,
	ssize_t __aLength,
	int rows,
	int columns,
	System_Numerics_Complex * b,
	ssize_t __bLength,
	int columnsB,
	System_Numerics_Complex * x,
	ssize_t __xLength,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_QRSolve_5(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	System_Numerics_Complex * a,
	ssize_t __aLength,
	int rows,
	int columns,
	System_Numerics_Complex * b,
	ssize_t __bLength,
	int columnsB,
	System_Numerics_Complex * x,
	ssize_t __xLength,
	System_Numerics_Complex * work,
	ssize_t __workLength,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_QRSolveFactored_4(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	System_Numerics_Complex * q,
	ssize_t __qLength,
	System_Numerics_Complex * r,
	ssize_t __rLength,
	int rowsA,
	int columnsA,
	System_Numerics_Complex * tau,
	ssize_t __tauLength,
	System_Numerics_Complex * b,
	ssize_t __bLength,
	int columnsB,
	System_Numerics_Complex * x,
	ssize_t __xLength,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_QRSolveFactored_5(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	System_Numerics_Complex * q,
	ssize_t __qLength,
	System_Numerics_Complex * r,
	ssize_t __rLength,
	int rowsA,
	int columnsA,
	System_Numerics_Complex * tau,
	ssize_t __tauLength,
	System_Numerics_Complex * b,
	ssize_t __bLength,
	int columnsB,
	System_Numerics_Complex * x,
	ssize_t __xLength,
	System_Numerics_Complex * work,
	ssize_t __workLength,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_SingularValueDecomposition_4(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	int computeVectors,
	System_Numerics_Complex * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	System_Numerics_Complex * s,
	ssize_t __sLength,
	System_Numerics_Complex * u,
	ssize_t __uLength,
	System_Numerics_Complex * vt,
	ssize_t __vtLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_SingularValueDecomposition_5(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	int computeVectors,
	System_Numerics_Complex * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	System_Numerics_Complex * s,
	ssize_t __sLength,
	System_Numerics_Complex * u,
	ssize_t __uLength,
	System_Numerics_Complex * vt,
	ssize_t __vtLength,
	System_Numerics_Complex * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_SvdSolve_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	System_Numerics_Complex * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	System_Numerics_Complex * b,
	ssize_t __bLength,
	int columnsB,
	System_Numerics_Complex * x,
	ssize_t __xLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_SvdSolveFactored_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	int rowsA,
	int columnsA,
	System_Numerics_Complex * s,
	ssize_t __sLength,
	System_Numerics_Complex * u,
	ssize_t __uLength,
	System_Numerics_Complex * vt,
	ssize_t __vtLength,
	System_Numerics_Complex * b,
	ssize_t __bLength,
	int columnsB,
	System_Numerics_Complex * x,
	ssize_t __xLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_AddVectorToScaledVector_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * y,
	ssize_t __yLength,
	MathNet_Numerics_Complex32 alpha,
	MathNet_Numerics_Complex32 * x,
	ssize_t __xLength,
	MathNet_Numerics_Complex32 * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_ScaleArray_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 alpha,
	MathNet_Numerics_Complex32 * x,
	ssize_t __xLength,
	MathNet_Numerics_Complex32 * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_DotProduct_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * x,
	ssize_t __xLength,
	MathNet_Numerics_Complex32 * y,
	ssize_t __yLength,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_AddArrays_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * x,
	ssize_t __xLength,
	MathNet_Numerics_Complex32 * y,
	ssize_t __yLength,
	MathNet_Numerics_Complex32 * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_SubtractArrays_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * x,
	ssize_t __xLength,
	MathNet_Numerics_Complex32 * y,
	ssize_t __yLength,
	MathNet_Numerics_Complex32 * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_PointWiseMultiplyArrays_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * x,
	ssize_t __xLength,
	MathNet_Numerics_Complex32 * y,
	ssize_t __yLength,
	MathNet_Numerics_Complex32 * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_PointWiseDivideArrays_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * x,
	ssize_t __xLength,
	MathNet_Numerics_Complex32 * y,
	ssize_t __yLength,
	MathNet_Numerics_Complex32 * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_MatrixNorm_7(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	MathNet_Numerics_Algorithms_LinearAlgebra_Norm norm,
	int rows,
	int columns,
	MathNet_Numerics_Complex32 * matrix,
	ssize_t __matrixLength,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_MatrixMultiply_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * x,
	ssize_t __xLength,
	int rowsX,
	int columnsX,
	MathNet_Numerics_Complex32 * y,
	ssize_t __yLength,
	int rowsY,
	int columnsY,
	MathNet_Numerics_Complex32 * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_MatrixMultiplyWithUpdate_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	MathNet_Numerics_Algorithms_LinearAlgebra_Transpose transposeA,
	MathNet_Numerics_Algorithms_LinearAlgebra_Transpose transposeB,
	MathNet_Numerics_Complex32 alpha,
	MathNet_Numerics_Complex32 * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	MathNet_Numerics_Complex32 * b,
	ssize_t __bLength,
	int rowsB,
	int columnsB,
	MathNet_Numerics_Complex32 beta,
	MathNet_Numerics_Complex32 * c,
	ssize_t __cLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_LUFactor_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * data,
	ssize_t __dataLength,
	int order,
	int * ipiv,
	ssize_t __ipivLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_LUInverse_6(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * a,
	ssize_t __aLength,
	int order,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_LUInverseFactored_6(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * a,
	ssize_t __aLength,
	int order,
	int * ipiv,
	ssize_t __ipivLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_LUInverse_7(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * a,
	ssize_t __aLength,
	int order,
	MathNet_Numerics_Complex32 * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_LUInverseFactored_7(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * a,
	ssize_t __aLength,
	int order,
	int * ipiv,
	ssize_t __ipivLength,
	MathNet_Numerics_Complex32 * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_LUSolve_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	int columnsOfB,
	MathNet_Numerics_Complex32 * a,
	ssize_t __aLength,
	int order,
	MathNet_Numerics_Complex32 * b,
	ssize_t __bLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_LUSolveFactored_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	int columnsOfB,
	MathNet_Numerics_Complex32 * a,
	ssize_t __aLength,
	int order,
	int * ipiv,
	ssize_t __ipivLength,
	MathNet_Numerics_Complex32 * b,
	ssize_t __bLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_CholeskyFactor_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * a,
	ssize_t __aLength,
	int order,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_CholeskySolve_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * a,
	ssize_t __aLength,
	int orderA,
	MathNet_Numerics_Complex32 * b,
	ssize_t __bLength,
	int columnsB,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_CholeskySolveFactored_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * a,
	ssize_t __aLength,
	int orderA,
	MathNet_Numerics_Complex32 * b,
	ssize_t __bLength,
	int columnsB,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_QRFactor_6(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	MathNet_Numerics_Complex32 * q,
	ssize_t __qLength,
	MathNet_Numerics_Complex32 * tau,
	ssize_t __tauLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_QRFactor_7(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	MathNet_Numerics_Complex32 * q,
	ssize_t __qLength,
	MathNet_Numerics_Complex32 * tau,
	ssize_t __tauLength,
	MathNet_Numerics_Complex32 * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_ThinQRFactor_6(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	MathNet_Numerics_Complex32 * r,
	ssize_t __rLength,
	MathNet_Numerics_Complex32 * tau,
	ssize_t __tauLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_ThinQRFactor_7(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	MathNet_Numerics_Complex32 * r,
	ssize_t __rLength,
	MathNet_Numerics_Complex32 * tau,
	ssize_t __tauLength,
	MathNet_Numerics_Complex32 * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_QRSolve_6(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * a,
	ssize_t __aLength,
	int rows,
	int columns,
	MathNet_Numerics_Complex32 * b,
	ssize_t __bLength,
	int columnsB,
	MathNet_Numerics_Complex32 * x,
	ssize_t __xLength,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_QRSolve_7(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * a,
	ssize_t __aLength,
	int rows,
	int columns,
	MathNet_Numerics_Complex32 * b,
	ssize_t __bLength,
	int columnsB,
	MathNet_Numerics_Complex32 * x,
	ssize_t __xLength,
	MathNet_Numerics_Complex32 * work,
	ssize_t __workLength,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_QRSolveFactored_6(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * q,
	ssize_t __qLength,
	MathNet_Numerics_Complex32 * r,
	ssize_t __rLength,
	int rowsA,
	int columnsA,
	MathNet_Numerics_Complex32 * tau,
	ssize_t __tauLength,
	MathNet_Numerics_Complex32 * b,
	ssize_t __bLength,
	int columnsB,
	MathNet_Numerics_Complex32 * x,
	ssize_t __xLength,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_QRSolveFactored_7(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * q,
	ssize_t __qLength,
	MathNet_Numerics_Complex32 * r,
	ssize_t __rLength,
	int rowsA,
	int columnsA,
	MathNet_Numerics_Complex32 * tau,
	ssize_t __tauLength,
	MathNet_Numerics_Complex32 * b,
	ssize_t __bLength,
	int columnsB,
	MathNet_Numerics_Complex32 * x,
	ssize_t __xLength,
	MathNet_Numerics_Complex32 * work,
	ssize_t __workLength,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_SingularValueDecomposition_6(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	int computeVectors,
	MathNet_Numerics_Complex32 * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	MathNet_Numerics_Complex32 * s,
	ssize_t __sLength,
	MathNet_Numerics_Complex32 * u,
	ssize_t __uLength,
	MathNet_Numerics_Complex32 * vt,
	ssize_t __vtLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_SingularValueDecomposition_7(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	int computeVectors,
	MathNet_Numerics_Complex32 * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	MathNet_Numerics_Complex32 * s,
	ssize_t __sLength,
	MathNet_Numerics_Complex32 * u,
	ssize_t __uLength,
	MathNet_Numerics_Complex32 * vt,
	ssize_t __vtLength,
	MathNet_Numerics_Complex32 * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_SvdSolve_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	MathNet_Numerics_Complex32 * b,
	ssize_t __bLength,
	int columnsB,
	MathNet_Numerics_Complex32 * x,
	ssize_t __xLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider_SvdSolveFactored_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider __instance,
	int rowsA,
	int columnsA,
	MathNet_Numerics_Complex32 * s,
	ssize_t __sLength,
	MathNet_Numerics_Complex32 * u,
	ssize_t __uLength,
	MathNet_Numerics_Complex32 * vt,
	ssize_t __vtLength,
	MathNet_Numerics_Complex32 * b,
	ssize_t __bLength,
	int columnsB,
	MathNet_Numerics_Complex32 * x,
	ssize_t __xLength,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider__Create(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_PointWiseMultiplyArrays(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	float * x,
	ssize_t __xLength,
	float * y,
	ssize_t __yLength,
	float * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_PointWiseDivideArrays(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	float * x,
	ssize_t __xLength,
	float * y,
	ssize_t __yLength,
	float * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_MatrixNorm(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	MathNet_Numerics_Algorithms_LinearAlgebra_Norm norm,
	int rows,
	int columns,
	float * matrix,
	ssize_t __matrixLength,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_MatrixNorm_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	MathNet_Numerics_Algorithms_LinearAlgebra_Norm norm,
	int rows,
	int columns,
	float * matrix,
	ssize_t __matrixLength,
	float * work,
	ssize_t __workLength,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_MatrixMultiply(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	float * x,
	ssize_t __xLength,
	int rowsX,
	int columnsX,
	float * y,
	ssize_t __yLength,
	int rowsY,
	int columnsY,
	float * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_MatrixMultiplyWithUpdate(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	MathNet_Numerics_Algorithms_LinearAlgebra_Transpose transposeA,
	MathNet_Numerics_Algorithms_LinearAlgebra_Transpose transposeB,
	float alpha,
	float * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	float * b,
	ssize_t __bLength,
	int rowsB,
	int columnsB,
	float beta,
	float * c,
	ssize_t __cLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_LUFactor(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	float * data,
	ssize_t __dataLength,
	int order,
	int * ipiv,
	ssize_t __ipivLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_LUInverse(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	float * a,
	ssize_t __aLength,
	int order,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_LUInverseFactored(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	float * a,
	ssize_t __aLength,
	int order,
	int * ipiv,
	ssize_t __ipivLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_LUInverse_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	float * a,
	ssize_t __aLength,
	int order,
	float * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_LUInverseFactored_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	float * a,
	ssize_t __aLength,
	int order,
	int * ipiv,
	ssize_t __ipivLength,
	float * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_LUSolve(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	int columnsOfB,
	float * a,
	ssize_t __aLength,
	int order,
	float * b,
	ssize_t __bLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_LUSolveFactored(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	int columnsOfB,
	float * a,
	ssize_t __aLength,
	int order,
	int * ipiv,
	ssize_t __ipivLength,
	float * b,
	ssize_t __bLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_CholeskyFactor(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	float * a,
	ssize_t __aLength,
	int order,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_CholeskySolve(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	float * a,
	ssize_t __aLength,
	int orderA,
	float * b,
	ssize_t __bLength,
	int columnsB,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_CholeskySolveFactored(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	float * a,
	ssize_t __aLength,
	int orderA,
	float * b,
	ssize_t __bLength,
	int columnsB,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_QRFactor(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	float * r,
	ssize_t __rLength,
	int rowsR,
	int columnsR,
	float * q,
	ssize_t __qLength,
	float * tau,
	ssize_t __tauLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_QRFactor_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	float * r,
	ssize_t __rLength,
	int rowsR,
	int columnsR,
	float * q,
	ssize_t __qLength,
	float * tau,
	ssize_t __tauLength,
	float * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_ThinQRFactor(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	float * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	float * r,
	ssize_t __rLength,
	float * tau,
	ssize_t __tauLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_ThinQRFactor_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	float * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	float * r,
	ssize_t __rLength,
	float * tau,
	ssize_t __tauLength,
	float * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_QRSolve(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	float * a,
	ssize_t __aLength,
	int rows,
	int columns,
	float * b,
	ssize_t __bLength,
	int columnsB,
	float * x,
	ssize_t __xLength,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_QRSolve_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	float * a,
	ssize_t __aLength,
	int rows,
	int columns,
	float * b,
	ssize_t __bLength,
	int columnsB,
	float * x,
	ssize_t __xLength,
	float * work,
	ssize_t __workLength,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_QRSolveFactored(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	float * q,
	ssize_t __qLength,
	float * r,
	ssize_t __rLength,
	int rowsA,
	int columnsA,
	float * tau,
	ssize_t __tauLength,
	float * b,
	ssize_t __bLength,
	int columnsB,
	float * x,
	ssize_t __xLength,
	float * work,
	ssize_t __workLength,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_QRSolveFactored_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	float * q,
	ssize_t __qLength,
	float * r,
	ssize_t __rLength,
	int rowsA,
	int columnsA,
	float * tau,
	ssize_t __tauLength,
	float * b,
	ssize_t __bLength,
	int columnsB,
	float * x,
	ssize_t __xLength,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_SingularValueDecomposition(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	int computeVectors,
	float * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	float * s,
	ssize_t __sLength,
	float * u,
	ssize_t __uLength,
	float * vt,
	ssize_t __vtLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_SingularValueDecomposition_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	int computeVectors,
	float * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	float * s,
	ssize_t __sLength,
	float * u,
	ssize_t __uLength,
	float * vt,
	ssize_t __vtLength,
	float * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_SvdSolve(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	float * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	float * b,
	ssize_t __bLength,
	int columnsB,
	float * x,
	ssize_t __xLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_SvdSolveFactored(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	int rowsA,
	int columnsA,
	float * s,
	ssize_t __sLength,
	float * u,
	ssize_t __uLength,
	float * vt,
	ssize_t __vtLength,
	float * b,
	ssize_t __bLength,
	int columnsB,
	float * x,
	ssize_t __xLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_AddVectorToScaledVector(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	System_Numerics_Complex * y,
	ssize_t __yLength,
	System_Numerics_Complex alpha,
	System_Numerics_Complex * x,
	ssize_t __xLength,
	System_Numerics_Complex * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_ScaleArray(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	System_Numerics_Complex alpha,
	System_Numerics_Complex * x,
	ssize_t __xLength,
	System_Numerics_Complex * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_DotProduct(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	System_Numerics_Complex * x,
	ssize_t __xLength,
	System_Numerics_Complex * y,
	ssize_t __yLength,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_AddArrays(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	System_Numerics_Complex * x,
	ssize_t __xLength,
	System_Numerics_Complex * y,
	ssize_t __yLength,
	System_Numerics_Complex * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_SubtractArrays(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	System_Numerics_Complex * x,
	ssize_t __xLength,
	System_Numerics_Complex * y,
	ssize_t __yLength,
	System_Numerics_Complex * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_PointWiseMultiplyArrays_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	System_Numerics_Complex * x,
	ssize_t __xLength,
	System_Numerics_Complex * y,
	ssize_t __yLength,
	System_Numerics_Complex * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_PointWiseDivideArrays_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	System_Numerics_Complex * x,
	ssize_t __xLength,
	System_Numerics_Complex * y,
	ssize_t __yLength,
	System_Numerics_Complex * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_MatrixNorm_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	MathNet_Numerics_Algorithms_LinearAlgebra_Norm norm,
	int rows,
	int columns,
	System_Numerics_Complex * matrix,
	ssize_t __matrixLength,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_MatrixNorm_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	MathNet_Numerics_Algorithms_LinearAlgebra_Norm norm,
	int rows,
	int columns,
	System_Numerics_Complex * matrix,
	ssize_t __matrixLength,
	double * work,
	ssize_t __workLength,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_MatrixMultiply_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	System_Numerics_Complex * x,
	ssize_t __xLength,
	int rowsX,
	int columnsX,
	System_Numerics_Complex * y,
	ssize_t __yLength,
	int rowsY,
	int columnsY,
	System_Numerics_Complex * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_MatrixMultiplyWithUpdate_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	MathNet_Numerics_Algorithms_LinearAlgebra_Transpose transposeA,
	MathNet_Numerics_Algorithms_LinearAlgebra_Transpose transposeB,
	System_Numerics_Complex alpha,
	System_Numerics_Complex * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	System_Numerics_Complex * b,
	ssize_t __bLength,
	int rowsB,
	int columnsB,
	System_Numerics_Complex beta,
	System_Numerics_Complex * c,
	ssize_t __cLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_LUFactor_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	System_Numerics_Complex * data,
	ssize_t __dataLength,
	int order,
	int * ipiv,
	ssize_t __ipivLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_LUInverse_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	System_Numerics_Complex * a,
	ssize_t __aLength,
	int order,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_LUInverseFactored_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	System_Numerics_Complex * a,
	ssize_t __aLength,
	int order,
	int * ipiv,
	ssize_t __ipivLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_LUInverse_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	System_Numerics_Complex * a,
	ssize_t __aLength,
	int order,
	System_Numerics_Complex * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_LUInverseFactored_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	System_Numerics_Complex * a,
	ssize_t __aLength,
	int order,
	int * ipiv,
	ssize_t __ipivLength,
	System_Numerics_Complex * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_LUSolve_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	int columnsOfB,
	System_Numerics_Complex * a,
	ssize_t __aLength,
	int order,
	System_Numerics_Complex * b,
	ssize_t __bLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_LUSolveFactored_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	int columnsOfB,
	System_Numerics_Complex * a,
	ssize_t __aLength,
	int order,
	int * ipiv,
	ssize_t __ipivLength,
	System_Numerics_Complex * b,
	ssize_t __bLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_CholeskyFactor_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	System_Numerics_Complex * a,
	ssize_t __aLength,
	int order,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_CholeskySolve_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	System_Numerics_Complex * a,
	ssize_t __aLength,
	int orderA,
	System_Numerics_Complex * b,
	ssize_t __bLength,
	int columnsB,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_CholeskySolveFactored_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	System_Numerics_Complex * a,
	ssize_t __aLength,
	int orderA,
	System_Numerics_Complex * b,
	ssize_t __bLength,
	int columnsB,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_QRFactor_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	System_Numerics_Complex * r,
	ssize_t __rLength,
	int rowsR,
	int columnsR,
	System_Numerics_Complex * q,
	ssize_t __qLength,
	System_Numerics_Complex * tau,
	ssize_t __tauLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_QRFactor_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	System_Numerics_Complex * r,
	ssize_t __rLength,
	int rowsR,
	int columnsR,
	System_Numerics_Complex * q,
	ssize_t __qLength,
	System_Numerics_Complex * tau,
	ssize_t __tauLength,
	System_Numerics_Complex * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_ThinQRFactor_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	System_Numerics_Complex * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	System_Numerics_Complex * r,
	ssize_t __rLength,
	System_Numerics_Complex * tau,
	ssize_t __tauLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_ThinQRFactor_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	System_Numerics_Complex * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	System_Numerics_Complex * r,
	ssize_t __rLength,
	System_Numerics_Complex * tau,
	ssize_t __tauLength,
	System_Numerics_Complex * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_QRSolve_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	System_Numerics_Complex * a,
	ssize_t __aLength,
	int rows,
	int columns,
	System_Numerics_Complex * b,
	ssize_t __bLength,
	int columnsB,
	System_Numerics_Complex * x,
	ssize_t __xLength,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_QRSolve_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	System_Numerics_Complex * a,
	ssize_t __aLength,
	int rows,
	int columns,
	System_Numerics_Complex * b,
	ssize_t __bLength,
	int columnsB,
	System_Numerics_Complex * x,
	ssize_t __xLength,
	System_Numerics_Complex * work,
	ssize_t __workLength,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_QRSolveFactored_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	System_Numerics_Complex * q,
	ssize_t __qLength,
	System_Numerics_Complex * r,
	ssize_t __rLength,
	int rowsR,
	int columnsR,
	System_Numerics_Complex * tau,
	ssize_t __tauLength,
	System_Numerics_Complex * b,
	ssize_t __bLength,
	int columnsB,
	System_Numerics_Complex * x,
	ssize_t __xLength,
	System_Numerics_Complex * work,
	ssize_t __workLength,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_QRSolveFactored_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	System_Numerics_Complex * q,
	ssize_t __qLength,
	System_Numerics_Complex * r,
	ssize_t __rLength,
	int rowsA,
	int columnsA,
	System_Numerics_Complex * tau,
	ssize_t __tauLength,
	System_Numerics_Complex * b,
	ssize_t __bLength,
	int columnsB,
	System_Numerics_Complex * x,
	ssize_t __xLength,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_SingularValueDecomposition_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	int computeVectors,
	System_Numerics_Complex * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	System_Numerics_Complex * s,
	ssize_t __sLength,
	System_Numerics_Complex * u,
	ssize_t __uLength,
	System_Numerics_Complex * vt,
	ssize_t __vtLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_SingularValueDecomposition_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	int computeVectors,
	System_Numerics_Complex * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	System_Numerics_Complex * s,
	ssize_t __sLength,
	System_Numerics_Complex * u,
	ssize_t __uLength,
	System_Numerics_Complex * vt,
	ssize_t __vtLength,
	System_Numerics_Complex * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_SvdSolve_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	System_Numerics_Complex * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	System_Numerics_Complex * b,
	ssize_t __bLength,
	int columnsB,
	System_Numerics_Complex * x,
	ssize_t __xLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_SvdSolveFactored_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	int rowsA,
	int columnsA,
	System_Numerics_Complex * s,
	ssize_t __sLength,
	System_Numerics_Complex * u,
	ssize_t __uLength,
	System_Numerics_Complex * vt,
	ssize_t __vtLength,
	System_Numerics_Complex * b,
	ssize_t __bLength,
	int columnsB,
	System_Numerics_Complex * x,
	ssize_t __xLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_AddVectorToScaledVector_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * y,
	ssize_t __yLength,
	MathNet_Numerics_Complex32 alpha,
	MathNet_Numerics_Complex32 * x,
	ssize_t __xLength,
	MathNet_Numerics_Complex32 * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_ScaleArray_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 alpha,
	MathNet_Numerics_Complex32 * x,
	ssize_t __xLength,
	MathNet_Numerics_Complex32 * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_DotProduct_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * x,
	ssize_t __xLength,
	MathNet_Numerics_Complex32 * y,
	ssize_t __yLength,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_AddArrays_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * x,
	ssize_t __xLength,
	MathNet_Numerics_Complex32 * y,
	ssize_t __yLength,
	MathNet_Numerics_Complex32 * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_SubtractArrays_1(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * x,
	ssize_t __xLength,
	MathNet_Numerics_Complex32 * y,
	ssize_t __yLength,
	MathNet_Numerics_Complex32 * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_PointWiseMultiplyArrays_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * x,
	ssize_t __xLength,
	MathNet_Numerics_Complex32 * y,
	ssize_t __yLength,
	MathNet_Numerics_Complex32 * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_PointWiseDivideArrays_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * x,
	ssize_t __xLength,
	MathNet_Numerics_Complex32 * y,
	ssize_t __yLength,
	MathNet_Numerics_Complex32 * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_MatrixNorm_4(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	MathNet_Numerics_Algorithms_LinearAlgebra_Norm norm,
	int rows,
	int columns,
	MathNet_Numerics_Complex32 * matrix,
	ssize_t __matrixLength,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_MatrixNorm_5(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	MathNet_Numerics_Algorithms_LinearAlgebra_Norm norm,
	int rows,
	int columns,
	MathNet_Numerics_Complex32 * matrix,
	ssize_t __matrixLength,
	float * work,
	ssize_t __workLength,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_MatrixMultiply_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * x,
	ssize_t __xLength,
	int rowsX,
	int columnsX,
	MathNet_Numerics_Complex32 * y,
	ssize_t __yLength,
	int rowsY,
	int columnsY,
	MathNet_Numerics_Complex32 * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_MatrixMultiplyWithUpdate_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	MathNet_Numerics_Algorithms_LinearAlgebra_Transpose transposeA,
	MathNet_Numerics_Algorithms_LinearAlgebra_Transpose transposeB,
	MathNet_Numerics_Complex32 alpha,
	MathNet_Numerics_Complex32 * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	MathNet_Numerics_Complex32 * b,
	ssize_t __bLength,
	int rowsB,
	int columnsB,
	MathNet_Numerics_Complex32 beta,
	MathNet_Numerics_Complex32 * c,
	ssize_t __cLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_LUFactor_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * data,
	ssize_t __dataLength,
	int order,
	int * ipiv,
	ssize_t __ipivLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_LUInverse_4(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * a,
	ssize_t __aLength,
	int order,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_LUInverseFactored_4(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * a,
	ssize_t __aLength,
	int order,
	int * ipiv,
	ssize_t __ipivLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_LUInverse_5(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * a,
	ssize_t __aLength,
	int order,
	MathNet_Numerics_Complex32 * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_LUInverseFactored_5(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * a,
	ssize_t __aLength,
	int order,
	int * ipiv,
	ssize_t __ipivLength,
	MathNet_Numerics_Complex32 * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_LUSolve_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	int columnsOfB,
	MathNet_Numerics_Complex32 * a,
	ssize_t __aLength,
	int order,
	MathNet_Numerics_Complex32 * b,
	ssize_t __bLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_LUSolveFactored_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	int columnsOfB,
	MathNet_Numerics_Complex32 * a,
	ssize_t __aLength,
	int order,
	int * ipiv,
	ssize_t __ipivLength,
	MathNet_Numerics_Complex32 * b,
	ssize_t __bLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_CholeskyFactor_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * a,
	ssize_t __aLength,
	int order,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_CholeskySolve_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * a,
	ssize_t __aLength,
	int orderA,
	MathNet_Numerics_Complex32 * b,
	ssize_t __bLength,
	int columnsB,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_CholeskySolveFactored_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * a,
	ssize_t __aLength,
	int orderA,
	MathNet_Numerics_Complex32 * b,
	ssize_t __bLength,
	int columnsB,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_QRFactor_4(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * r,
	ssize_t __rLength,
	int rowsR,
	int columnsR,
	MathNet_Numerics_Complex32 * q,
	ssize_t __qLength,
	MathNet_Numerics_Complex32 * tau,
	ssize_t __tauLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_QRFactor_5(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * r,
	ssize_t __rLength,
	int rowsR,
	int columnsR,
	MathNet_Numerics_Complex32 * q,
	ssize_t __qLength,
	MathNet_Numerics_Complex32 * tau,
	ssize_t __tauLength,
	MathNet_Numerics_Complex32 * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_ThinQRFactor_4(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	MathNet_Numerics_Complex32 * r,
	ssize_t __rLength,
	MathNet_Numerics_Complex32 * tau,
	ssize_t __tauLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_ThinQRFactor_5(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	MathNet_Numerics_Complex32 * r,
	ssize_t __rLength,
	MathNet_Numerics_Complex32 * tau,
	ssize_t __tauLength,
	MathNet_Numerics_Complex32 * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_QRSolve_4(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * a,
	ssize_t __aLength,
	int rows,
	int columns,
	MathNet_Numerics_Complex32 * b,
	ssize_t __bLength,
	int columnsB,
	MathNet_Numerics_Complex32 * x,
	ssize_t __xLength,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_QRSolve_5(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * a,
	ssize_t __aLength,
	int rows,
	int columns,
	MathNet_Numerics_Complex32 * b,
	ssize_t __bLength,
	int columnsB,
	MathNet_Numerics_Complex32 * x,
	ssize_t __xLength,
	MathNet_Numerics_Complex32 * work,
	ssize_t __workLength,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_QRSolveFactored_4(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * q,
	ssize_t __qLength,
	MathNet_Numerics_Complex32 * r,
	ssize_t __rLength,
	int rowsR,
	int columnsR,
	MathNet_Numerics_Complex32 * tau,
	ssize_t __tauLength,
	MathNet_Numerics_Complex32 * b,
	ssize_t __bLength,
	int columnsB,
	MathNet_Numerics_Complex32 * x,
	ssize_t __xLength,
	MathNet_Numerics_Complex32 * work,
	ssize_t __workLength,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_QRSolveFactored_5(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * q,
	ssize_t __qLength,
	MathNet_Numerics_Complex32 * r,
	ssize_t __rLength,
	int rowsA,
	int columnsA,
	MathNet_Numerics_Complex32 * tau,
	ssize_t __tauLength,
	MathNet_Numerics_Complex32 * b,
	ssize_t __bLength,
	int columnsB,
	MathNet_Numerics_Complex32 * x,
	ssize_t __xLength,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_SingularValueDecomposition_4(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	int computeVectors,
	MathNet_Numerics_Complex32 * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	MathNet_Numerics_Complex32 * s,
	ssize_t __sLength,
	MathNet_Numerics_Complex32 * u,
	ssize_t __uLength,
	MathNet_Numerics_Complex32 * vt,
	ssize_t __vtLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_SingularValueDecomposition_5(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	int computeVectors,
	MathNet_Numerics_Complex32 * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	MathNet_Numerics_Complex32 * s,
	ssize_t __sLength,
	MathNet_Numerics_Complex32 * u,
	ssize_t __uLength,
	MathNet_Numerics_Complex32 * vt,
	ssize_t __vtLength,
	MathNet_Numerics_Complex32 * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_SvdSolve_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	MathNet_Numerics_Complex32 * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	MathNet_Numerics_Complex32 * b,
	ssize_t __bLength,
	int columnsB,
	MathNet_Numerics_Complex32 * x,
	ssize_t __xLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_SvdSolveFactored_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	int rowsA,
	int columnsA,
	MathNet_Numerics_Complex32 * s,
	ssize_t __sLength,
	MathNet_Numerics_Complex32 * u,
	ssize_t __uLength,
	MathNet_Numerics_Complex32 * vt,
	ssize_t __vtLength,
	MathNet_Numerics_Complex32 * b,
	ssize_t __bLength,
	int columnsB,
	MathNet_Numerics_Complex32 * x,
	ssize_t __xLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_AddVectorToScaledVector_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	double * y,
	ssize_t __yLength,
	double alpha,
	double * x,
	ssize_t __xLength,
	double * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_ScaleArray_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	double alpha,
	double * x,
	ssize_t __xLength,
	double * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_DotProduct_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	double * x,
	ssize_t __xLength,
	double * y,
	ssize_t __yLength,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_AddArrays_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	double * x,
	ssize_t __xLength,
	double * y,
	ssize_t __yLength,
	double * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_SubtractArrays_2(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	double * x,
	ssize_t __xLength,
	double * y,
	ssize_t __yLength,
	double * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_PointWiseMultiplyArrays_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	double * x,
	ssize_t __xLength,
	double * y,
	ssize_t __yLength,
	double * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_PointWiseDivideArrays_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	double * x,
	ssize_t __xLength,
	double * y,
	ssize_t __yLength,
	double * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_MatrixNorm_6(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	MathNet_Numerics_Algorithms_LinearAlgebra_Norm norm,
	int rows,
	int columns,
	double * matrix,
	ssize_t __matrixLength,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_MatrixNorm_7(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	MathNet_Numerics_Algorithms_LinearAlgebra_Norm norm,
	int rows,
	int columns,
	double * matrix,
	ssize_t __matrixLength,
	double * work,
	ssize_t __workLength,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_MatrixMultiply_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	double * x,
	ssize_t __xLength,
	int rowsX,
	int columnsX,
	double * y,
	ssize_t __yLength,
	int rowsY,
	int columnsY,
	double * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_MatrixMultiplyWithUpdate_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	MathNet_Numerics_Algorithms_LinearAlgebra_Transpose transposeA,
	MathNet_Numerics_Algorithms_LinearAlgebra_Transpose transposeB,
	double alpha,
	double * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	double * b,
	ssize_t __bLength,
	int rowsB,
	int columnsB,
	double beta,
	double * c,
	ssize_t __cLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_LUFactor_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	double * data,
	ssize_t __dataLength,
	int order,
	int * ipiv,
	ssize_t __ipivLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_LUInverse_6(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	double * a,
	ssize_t __aLength,
	int order,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_LUInverseFactored_6(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	double * a,
	ssize_t __aLength,
	int order,
	int * ipiv,
	ssize_t __ipivLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_LUInverse_7(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	double * a,
	ssize_t __aLength,
	int order,
	double * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_LUInverseFactored_7(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	double * a,
	ssize_t __aLength,
	int order,
	int * ipiv,
	ssize_t __ipivLength,
	double * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_LUSolve_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	int columnsOfB,
	double * a,
	ssize_t __aLength,
	int order,
	double * b,
	ssize_t __bLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_LUSolveFactored_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	int columnsOfB,
	double * a,
	ssize_t __aLength,
	int order,
	int * ipiv,
	ssize_t __ipivLength,
	double * b,
	ssize_t __bLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_CholeskyFactor_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	double * a,
	ssize_t __aLength,
	int order,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_CholeskySolve_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	double * a,
	ssize_t __aLength,
	int orderA,
	double * b,
	ssize_t __bLength,
	int columnsB,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_CholeskySolveFactored_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	double * a,
	ssize_t __aLength,
	int orderA,
	double * b,
	ssize_t __bLength,
	int columnsB,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_QRFactor_6(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	double * r,
	ssize_t __rLength,
	int rowsR,
	int columnsR,
	double * q,
	ssize_t __qLength,
	double * tau,
	ssize_t __tauLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_QRFactor_7(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	double * r,
	ssize_t __rLength,
	int rowsR,
	int columnsR,
	double * q,
	ssize_t __qLength,
	double * tau,
	ssize_t __tauLength,
	double * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_ThinQRFactor_6(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	double * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	double * r,
	ssize_t __rLength,
	double * tau,
	ssize_t __tauLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_ThinQRFactor_7(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	double * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	double * r,
	ssize_t __rLength,
	double * tau,
	ssize_t __tauLength,
	double * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_QRSolve_6(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	double * a,
	ssize_t __aLength,
	int rows,
	int columns,
	double * b,
	ssize_t __bLength,
	int columnsB,
	double * x,
	ssize_t __xLength,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_QRSolve_7(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	double * a,
	ssize_t __aLength,
	int rows,
	int columns,
	double * b,
	ssize_t __bLength,
	int columnsB,
	double * x,
	ssize_t __xLength,
	double * work,
	ssize_t __workLength,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_QRSolveFactored_6(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	double * q,
	ssize_t __qLength,
	double * r,
	ssize_t __rLength,
	int rowsA,
	int columnsA,
	double * tau,
	ssize_t __tauLength,
	double * b,
	ssize_t __bLength,
	int columnsB,
	double * x,
	ssize_t __xLength,
	double * work,
	ssize_t __workLength,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_QRSolveFactored_7(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	double * q,
	ssize_t __qLength,
	double * r,
	ssize_t __rLength,
	int rowsA,
	int columnsA,
	double * tau,
	ssize_t __tauLength,
	double * b,
	ssize_t __bLength,
	int columnsB,
	double * x,
	ssize_t __xLength,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_SingularValueDecomposition_6(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	int computeVectors,
	double * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	double * s,
	ssize_t __sLength,
	double * u,
	ssize_t __uLength,
	double * vt,
	ssize_t __vtLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_SingularValueDecomposition_7(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	int computeVectors,
	double * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	double * s,
	ssize_t __sLength,
	double * u,
	ssize_t __uLength,
	double * vt,
	ssize_t __vtLength,
	double * work,
	ssize_t __workLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_SvdSolve_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	double * a,
	ssize_t __aLength,
	int rowsA,
	int columnsA,
	double * b,
	ssize_t __bLength,
	int columnsB,
	double * x,
	ssize_t __xLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_SvdSolveFactored_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	int rowsA,
	int columnsA,
	double * s,
	ssize_t __sLength,
	double * u,
	ssize_t __uLength,
	double * vt,
	ssize_t __vtLength,
	double * b,
	ssize_t __bLength,
	int columnsB,
	double * x,
	ssize_t __xLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_AddVectorToScaledVector_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	float * y,
	ssize_t __yLength,
	float alpha,
	float * x,
	ssize_t __xLength,
	float * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_ScaleArray_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	float alpha,
	float * x,
	ssize_t __xLength,
	float * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_DotProduct_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	float * x,
	ssize_t __xLength,
	float * y,
	ssize_t __yLength,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_AddArrays_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	float * x,
	ssize_t __xLength,
	float * y,
	ssize_t __yLength,
	float * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider_SubtractArrays_3(
	MathNet_Numerics_Algorithms_LinearAlgebra_ManagedLinearAlgebraProvider __instance,
	float * x,
	ssize_t __xLength,
	float * y,
	ssize_t __yLength,
	float * result,
	ssize_t __resultLength,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Combinatorics
int CVIFUNC MathNet_Numerics_Combinatorics_Variations(
	int n,
	int k,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Combinatorics_VariationsWithRepetition(
	int n,
	int k,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Combinatorics_Combinations(
	int n,
	int k,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Combinatorics_CombinationsWithRepetition(
	int n,
	int k,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Combinatorics_Permutations(
	int n,
	double * __returnValue,
	CDotNetHandle * __exception);

int CVIFUNC MathNet_Numerics_IPrecisionSupport_T1_Norm(
	MathNet_Numerics_IPrecisionSupport_T1 __instance,
	char * T,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_IPrecisionSupport_T1_NormOfDifference(
	MathNet_Numerics_IPrecisionSupport_T1 __instance,
	char * T,
	void * otherValue,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Complex32
int CVIFUNC MathNet_Numerics_Complex32__Create(
	MathNet_Numerics_Complex32 * __instance,
	float real,
	float imaginary,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Get_Real(
	MathNet_Numerics_Complex32 __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Get_Imaginary(
	MathNet_Numerics_Complex32 __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Get_Phase(
	MathNet_Numerics_Complex32 __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Get_Magnitude(
	MathNet_Numerics_Complex32 __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Get_MagnitudeSquared(
	MathNet_Numerics_Complex32 __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Get_Sign(
	MathNet_Numerics_Complex32 __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Add(
	MathNet_Numerics_Complex32 left,
	MathNet_Numerics_Complex32 right,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Subtract(
	MathNet_Numerics_Complex32 left,
	MathNet_Numerics_Complex32 right,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Multiply(
	MathNet_Numerics_Complex32 left,
	MathNet_Numerics_Complex32 right,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Divide(
	MathNet_Numerics_Complex32 dividend,
	MathNet_Numerics_Complex32 divisor,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Reciprocal(
	MathNet_Numerics_Complex32 value,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Sqrt(
	MathNet_Numerics_Complex32 value,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Abs(
	MathNet_Numerics_Complex32 value,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Exp(
	MathNet_Numerics_Complex32 value,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Pow(
	MathNet_Numerics_Complex32 value,
	MathNet_Numerics_Complex32 power,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Pow_1(
	MathNet_Numerics_Complex32 value,
	float power,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Log(
	MathNet_Numerics_Complex32 value,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Log_1(
	MathNet_Numerics_Complex32 value,
	float baseValue,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Log10(
	MathNet_Numerics_Complex32 value,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Sin(
	MathNet_Numerics_Complex32 value,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Cos(
	MathNet_Numerics_Complex32 value,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Tan(
	MathNet_Numerics_Complex32 value,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Asin(
	MathNet_Numerics_Complex32 value,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Acos(
	MathNet_Numerics_Complex32 value,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Atan(
	MathNet_Numerics_Complex32 value,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Sinh(
	MathNet_Numerics_Complex32 value,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Cosh(
	MathNet_Numerics_Complex32 value,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Tanh(
	MathNet_Numerics_Complex32 value,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_FromPolarCoordinates(
	float magnitude,
	float phase,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_WithRealImaginary(
	float real,
	float imaginary,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_WithModulusArgument(
	float modulus,
	float argument,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_IsZero(
	MathNet_Numerics_Complex32 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_IsOne(
	MathNet_Numerics_Complex32 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_IsImaginaryOne(
	MathNet_Numerics_Complex32 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_IsNaN(
	MathNet_Numerics_Complex32 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_IsInfinity(
	MathNet_Numerics_Complex32 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_IsReal(
	MathNet_Numerics_Complex32 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_IsRealNonNegative(
	MathNet_Numerics_Complex32 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Exponential(
	MathNet_Numerics_Complex32 __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_NaturalLogarithm(
	MathNet_Numerics_Complex32 __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_CommonLogarithm(
	MathNet_Numerics_Complex32 __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Logarithm(
	MathNet_Numerics_Complex32 __instance,
	float baseValue,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Power(
	MathNet_Numerics_Complex32 __instance,
	MathNet_Numerics_Complex32 exponent,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Root(
	MathNet_Numerics_Complex32 __instance,
	MathNet_Numerics_Complex32 rootExponent,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Square(
	MathNet_Numerics_Complex32 __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_SquareRoot(
	MathNet_Numerics_Complex32 __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_op_Equality(
	MathNet_Numerics_Complex32 complex1,
	MathNet_Numerics_Complex32 complex2,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_op_Inequality(
	MathNet_Numerics_Complex32 complex1,
	MathNet_Numerics_Complex32 complex2,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_op_UnaryPlus(
	MathNet_Numerics_Complex32 summand,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_op_UnaryNegation(
	MathNet_Numerics_Complex32 subtrahend,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_op_Addition(
	MathNet_Numerics_Complex32 summand1,
	MathNet_Numerics_Complex32 summand2,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_op_Subtraction(
	MathNet_Numerics_Complex32 minuend,
	MathNet_Numerics_Complex32 subtrahend,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_op_Addition_1(
	MathNet_Numerics_Complex32 summand1,
	float summand2,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_op_Subtraction_1(
	MathNet_Numerics_Complex32 minuend,
	float subtrahend,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_op_Addition_2(
	float summand1,
	MathNet_Numerics_Complex32 summand2,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_op_Subtraction_2(
	float minuend,
	MathNet_Numerics_Complex32 subtrahend,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_op_Multiply(
	MathNet_Numerics_Complex32 multiplicand,
	MathNet_Numerics_Complex32 multiplier,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_op_Multiply_1(
	float multiplicand,
	MathNet_Numerics_Complex32 multiplier,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_op_Multiply_2(
	MathNet_Numerics_Complex32 multiplicand,
	float multiplier,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_op_Division(
	MathNet_Numerics_Complex32 dividend,
	MathNet_Numerics_Complex32 divisor,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_op_Division_1(
	float dividend,
	MathNet_Numerics_Complex32 divisor,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_op_Division_2(
	MathNet_Numerics_Complex32 dividend,
	float divisor,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Plus(
	MathNet_Numerics_Complex32 __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Negate(
	MathNet_Numerics_Complex32 __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Conjugate(
	MathNet_Numerics_Complex32 __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Reciprocal_1(
	MathNet_Numerics_Complex32 __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Add_1(
	MathNet_Numerics_Complex32 __instance,
	MathNet_Numerics_Complex32 other,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Subtract_1(
	MathNet_Numerics_Complex32 __instance,
	MathNet_Numerics_Complex32 other,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Multiply_1(
	MathNet_Numerics_Complex32 __instance,
	MathNet_Numerics_Complex32 multiplier,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Divide_1(
	MathNet_Numerics_Complex32 __instance,
	MathNet_Numerics_Complex32 divisor,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_ToString(
	MathNet_Numerics_Complex32 __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_ToString_1(
	MathNet_Numerics_Complex32 __instance,
	char * format,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_ToString_2(
	MathNet_Numerics_Complex32 __instance,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_ToString_3(
	MathNet_Numerics_Complex32 __instance,
	char * format,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Equals(
	MathNet_Numerics_Complex32 __instance,
	MathNet_Numerics_Complex32 other,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_GetHashCode(
	MathNet_Numerics_Complex32 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Equals_1(
	MathNet_Numerics_Complex32 __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Parse(
	char * value,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Parse_1(
	char * value,
	System_IFormatProvider formatProvider,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_TryParse(
	char * value,
	MathNet_Numerics_Complex32 * result,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_TryParse_1(
	char * value,
	System_IFormatProvider formatProvider,
	MathNet_Numerics_Complex32 * result,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_op_Explicit(
	double value,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_op_Explicit_1(
	System_Numerics_Complex value,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_op_Implicit(
	unsigned char value,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_op_Implicit_1(
	short value,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_op_Implicit_2(
	char value,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_op_Implicit_3(
	unsigned short value,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_op_Implicit_4(
	int value,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_op_Implicit_5(
	__int64 value,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_op_Implicit_6(
	unsigned int value,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_op_Implicit_7(
	unsigned __int64 value,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_op_Implicit_8(
	float value,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_op_Explicit_2(
	double value,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_ToComplex(
	MathNet_Numerics_Complex32 __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Negate_1(
	MathNet_Numerics_Complex32 value,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32_Conjugate_1(
	MathNet_Numerics_Complex32 value,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32__Get__Zero(
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32__Get__One(
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32__Get__ImaginaryOne(
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32__Get__PositiveInfinity(
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32__Get__Infinity(
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Complex32__Get__NaN(
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);

// Type: System.Numerics.Complex
int CVIFUNC System_Numerics_Complex__Create(
	System_Numerics_Complex * __instance,
	double real,
	double imaginary,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_Get_Real(
	System_Numerics_Complex __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_Get_Imaginary(
	System_Numerics_Complex __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_Get_Phase(
	System_Numerics_Complex __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_Get_Magnitude(
	System_Numerics_Complex __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_FromPolarCoordinates(
	double magnitude,
	double phase,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_WithRealImaginary(
	double real,
	double imaginary,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_WithModulusArgument(
	double modulus,
	double argument,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_op_Equality(
	System_Numerics_Complex complex1,
	System_Numerics_Complex complex2,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_op_Inequality(
	System_Numerics_Complex complex1,
	System_Numerics_Complex complex2,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_op_UnaryPlus(
	System_Numerics_Complex summand,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_op_UnaryNegation(
	System_Numerics_Complex subtrahend,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_op_Addition(
	System_Numerics_Complex summand1,
	System_Numerics_Complex summand2,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_op_Subtraction(
	System_Numerics_Complex minuend,
	System_Numerics_Complex subtrahend,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_op_Addition_1(
	System_Numerics_Complex summand1,
	double summand2,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_op_Subtraction_1(
	System_Numerics_Complex minuend,
	double subtrahend,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_op_Addition_2(
	double summand1,
	System_Numerics_Complex summand2,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_op_Subtraction_2(
	double minuend,
	System_Numerics_Complex subtrahend,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_op_Multiply(
	System_Numerics_Complex multiplicand,
	System_Numerics_Complex multiplier,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_op_Multiply_1(
	double multiplicand,
	System_Numerics_Complex multiplier,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_op_Multiply_2(
	System_Numerics_Complex multiplicand,
	double multiplier,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_op_Division(
	System_Numerics_Complex dividend,
	System_Numerics_Complex divisor,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_op_Division_1(
	double dividend,
	System_Numerics_Complex divisor,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_op_Division_2(
	System_Numerics_Complex dividend,
	double divisor,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_ToString(
	System_Numerics_Complex __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_ToString_1(
	System_Numerics_Complex __instance,
	char * format,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_ToString_2(
	System_Numerics_Complex __instance,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_ToString_3(
	System_Numerics_Complex __instance,
	char * format,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_Equals(
	System_Numerics_Complex __instance,
	System_Numerics_Complex other,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_GetHashCode(
	System_Numerics_Complex __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_Equals_1(
	System_Numerics_Complex __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_Parse(
	char * value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_Parse_1(
	char * value,
	System_IFormatProvider formatProvider,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_TryParse(
	char * value,
	System_Numerics_Complex * result,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_TryParse_1(
	char * value,
	System_IFormatProvider formatProvider,
	System_Numerics_Complex * result,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_op_Explicit(
	double value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_op_Explicit_1(
	MathNet_Numerics_Complex32 value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_op_Implicit(
	unsigned char value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_op_Implicit_1(
	short value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_op_Implicit_2(
	char value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_op_Implicit_3(
	unsigned short value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_op_Implicit_4(
	int value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_op_Implicit_5(
	__int64 value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_op_Implicit_6(
	unsigned int value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_op_Implicit_7(
	unsigned __int64 value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_op_Implicit_8(
	double value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_op_Explicit_2(
	float value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_ToComplex(
	System_Numerics_Complex __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_Negate(
	System_Numerics_Complex value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_Conjugate(
	System_Numerics_Complex value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_Add(
	System_Numerics_Complex left,
	System_Numerics_Complex right,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_Subtract(
	System_Numerics_Complex left,
	System_Numerics_Complex right,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_Multiply(
	System_Numerics_Complex left,
	System_Numerics_Complex right,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_Divide(
	System_Numerics_Complex dividend,
	System_Numerics_Complex divisor,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_Reciprocal(
	System_Numerics_Complex value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_Sqrt(
	System_Numerics_Complex value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_Abs(
	System_Numerics_Complex value,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_Exp(
	System_Numerics_Complex value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_Pow(
	System_Numerics_Complex value,
	System_Numerics_Complex power,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_Pow_1(
	System_Numerics_Complex value,
	double power,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_Log(
	System_Numerics_Complex value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_Log_1(
	System_Numerics_Complex value,
	double baseValue,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_Log10(
	System_Numerics_Complex value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_Sin(
	System_Numerics_Complex value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_Cos(
	System_Numerics_Complex value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_Tan(
	System_Numerics_Complex value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_Asin(
	System_Numerics_Complex value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_Acos(
	System_Numerics_Complex value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_Atan(
	System_Numerics_Complex value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_Sinh(
	System_Numerics_Complex value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_Cosh(
	System_Numerics_Complex value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex_Tanh(
	System_Numerics_Complex value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex__Get__Zero(
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex__Get__One(
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex__Get__ImaginaryOne(
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex__Get__PositiveInfinity(
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex__Get__Infinity(
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC System_Numerics_Complex__Get__NaN(
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.ComplexExtensions
int CVIFUNC MathNet_Numerics_ComplexExtensions_MagnitudeSquared(
	System_Numerics_Complex complex,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_ComplexExtensions_Sign(
	System_Numerics_Complex complex,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_ComplexExtensions_Conjugate(
	System_Numerics_Complex complex,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_ComplexExtensions_Reciprocal(
	System_Numerics_Complex complex,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_ComplexExtensions_Exponential(
	System_Numerics_Complex complex,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_ComplexExtensions_NaturalLogarithm(
	System_Numerics_Complex complex,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_ComplexExtensions_CommonLogarithm(
	System_Numerics_Complex complex,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_ComplexExtensions_Logarithm(
	System_Numerics_Complex complex,
	double baseValue,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_ComplexExtensions_Power(
	System_Numerics_Complex complex,
	System_Numerics_Complex exponent,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_ComplexExtensions_Root(
	System_Numerics_Complex complex,
	System_Numerics_Complex rootExponent,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_ComplexExtensions_Square(
	System_Numerics_Complex complex,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_ComplexExtensions_SquareRoot(
	System_Numerics_Complex complex,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_ComplexExtensions_IsZero(
	System_Numerics_Complex complex,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_ComplexExtensions_IsOne(
	System_Numerics_Complex complex,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_ComplexExtensions_IsImaginaryOne(
	System_Numerics_Complex complex,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_ComplexExtensions_IsNaN(
	System_Numerics_Complex complex,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_ComplexExtensions_IsInfinity(
	System_Numerics_Complex complex,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_ComplexExtensions_IsReal(
	System_Numerics_Complex complex,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_ComplexExtensions_IsRealNonNegative(
	System_Numerics_Complex complex,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_ComplexExtensions_Norm(
	System_Numerics_Complex complex,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_ComplexExtensions_NormOfDifference(
	System_Numerics_Complex complex,
	System_Numerics_Complex otherValue,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_ComplexExtensions_ToComplex(
	char * value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_ComplexExtensions_ToComplex_1(
	char * value,
	System_IFormatProvider formatProvider,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_ComplexExtensions_TryToComplex(
	char * value,
	System_Numerics_Complex * result,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_ComplexExtensions_TryToComplex_1(
	char * value,
	System_IFormatProvider formatProvider,
	System_Numerics_Complex * result,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_ComplexExtensions_ToComplex32(
	char * value,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_ComplexExtensions_ToComplex32_1(
	char * value,
	System_IFormatProvider formatProvider,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_ComplexExtensions_TryToComplex32(
	char * value,
	MathNet_Numerics_Complex32 * result,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_ComplexExtensions_TryToComplex32_1(
	char * value,
	System_IFormatProvider formatProvider,
	MathNet_Numerics_Complex32 * result,
	int * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Constants
int CVIFUNC MathNet_Numerics_Constants__Get__E(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__Log2E(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__Log10E(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__Ln2(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__Ln10(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__LnPi(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__Ln2PiOver2(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__InvE(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__SqrtE(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__Sqrt2(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__Sqrt1Over2(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__HalfSqrt3(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__Pi(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__Pi2(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__OneOverPi(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__PiOver2(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__PiOver4(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__SqrtPi(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__Sqrt2Pi(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__Sqrt2PiE(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__LogSqrt2Pi(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__LogSqrt2PiE(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__LogTwoSqrtEOverPi(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__InvPi(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__TwoInvPi(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__InvSqrtPi(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__InvSqrt2Pi(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__TwoInvSqrtPi(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__TwoSqrtEOverPi(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__Degree(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__Grad(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__PowerDecibel(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__NeutralDecibel(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__Catalan(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__EulerMascheroni(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__GoldenRatio(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__Glaisher(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__Khinchin(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__SizeOfDouble(
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__SizeOfInt(
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__SizeOfFloat(
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__SizeOfComplex(
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__SizeOfComplex32(
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__SpeedOfLight(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__MagneticPermeability(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__ElectricPermittivity(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__CharacteristicImpedanceVacuum(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__GravitationalConstant(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__PlancksConstant(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__DiracsConstant(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__PlancksMass(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__PlancksTemperature(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__PlancksLength(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__PlancksTime(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__ElementaryCharge(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__MagneticFluxQuantum(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__ConductanceQuantum(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__JosephsonConstant(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__VonKlitzingConstant(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__BohrMagneton(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__NuclearMagneton(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__FineStructureConstant(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__RydbergConstant(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__BohrRadius(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__HartreeEnergy(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__QuantumOfCirculation(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__FermiCouplingConstant(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__WeakMixingAngle(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__ElectronMass(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__ElectronMassEnergyEquivalent(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__ElectronMolarMass(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__ComptonWavelength(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__ClassicalElectronRadius(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__ThomsonCrossSection(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__ElectronMagneticMoment(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__ElectronGFactor(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__MuonMass(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__MuonMassEnegryEquivalent(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__MuonMolarMass(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__MuonComptonWavelength(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__MuonMagneticMoment(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__MuonGFactor(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__TauMass(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__TauMassEnergyEquivalent(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__TauMolarMass(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__TauComptonWavelength(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__ProtonMass(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__ProtonMassEnergyEquivalent(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__ProtonMolarMass(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__ProtonComptonWavelength(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__ProtonMagneticMoment(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__ProtonGFactor(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__ShieldedProtonMagneticMoment(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__ProtonGyromagneticRatio(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__ShieldedProtonGyromagneticRatio(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__NeutronMass(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__NeutronMassEnegryEquivalent(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__NeutronMolarMass(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__NeutronComptonWavelength(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__NeutronMagneticMoment(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__NeutronGFactor(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__NeutronGyromagneticRatio(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__DeuteronMass(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__DeuteronMassEnegryEquivalent(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__DeuteronMolarMass(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__DeuteronMagneticMoment(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__HelionMass(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__HelionMassEnegryEquivalent(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__HelionMolarMass(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__Avogadro(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__Yotta(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__Zetta(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__Exa(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__Peta(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__Tera(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__Giga(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__Mega(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__Kilo(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__Hecto(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__Deca(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__Deci(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__Centi(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__Milli(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__Micro(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__Nano(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__Pico(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__Femto(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__Atto(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__Zepto(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Constants__Get__Yocto(
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Control
int CVIFUNC MathNet_Numerics_Control_Get_CheckDistributionParameters(
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Control_Set_CheckDistributionParameters(
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Control_Get_ThreadSafeRandomNumberGenerators(
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Control_Set_ThreadSafeRandomNumberGenerators(
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Control_Get_DisableParallelization(
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Control_Set_DisableParallelization(
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Control_Get_LinearAlgebraProvider(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Control_Set_LinearAlgebraProvider(
	MathNet_Numerics_Algorithms_LinearAlgebra_ILinearAlgebraProvider value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Control_Get_NumberOfParallelWorkerThreads(
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Control_Set_NumberOfParallelWorkerThreads(
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Control_Get_BlockSize(
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Control_Set_BlockSize(
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Control_Get_ParallelizeOrder(
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Control_Set_ParallelizeOrder(
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Control_Get_ParallelizeElements(
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Control_Set_ParallelizeElements(
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Control_Get_MaxToStringColumns(
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Control_Set_MaxToStringColumns(
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Control_Get_MaxToStringRows(
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Control_Set_MaxToStringRows(
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Control_ConfigureAuto(
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Control_ConfigureSingleThread(
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Control_ParallelizeOperation(
	int elements,
	int * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Distributions.IDistribution
int CVIFUNC MathNet_Numerics_Distributions_IDistribution_Get_RandomSource(
	MathNet_Numerics_Distributions_IDistribution __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_IDistribution_Set_RandomSource(
	MathNet_Numerics_Distributions_IDistribution __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_IDistribution_Get_Mean(
	MathNet_Numerics_Distributions_IDistribution __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_IDistribution_Get_Variance(
	MathNet_Numerics_Distributions_IDistribution __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_IDistribution_Get_StdDev(
	MathNet_Numerics_Distributions_IDistribution __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_IDistribution_Get_Entropy(
	MathNet_Numerics_Distributions_IDistribution __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_IDistribution_Get_Skewness(
	MathNet_Numerics_Distributions_IDistribution __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_IDistribution_CumulativeDistribution(
	MathNet_Numerics_Distributions_IDistribution __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Distributions.IContinuousDistribution
int CVIFUNC MathNet_Numerics_Distributions_IContinuousDistribution_Get_Mode(
	MathNet_Numerics_Distributions_IContinuousDistribution __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_IContinuousDistribution_Get_Median(
	MathNet_Numerics_Distributions_IContinuousDistribution __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_IContinuousDistribution_Get_Minimum(
	MathNet_Numerics_Distributions_IContinuousDistribution __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_IContinuousDistribution_Get_Maximum(
	MathNet_Numerics_Distributions_IContinuousDistribution __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_IContinuousDistribution_Density(
	MathNet_Numerics_Distributions_IContinuousDistribution __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_IContinuousDistribution_DensityLn(
	MathNet_Numerics_Distributions_IContinuousDistribution __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_IContinuousDistribution_Sample(
	MathNet_Numerics_Distributions_IContinuousDistribution __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_IContinuousDistribution_Samples(
	MathNet_Numerics_Distributions_IContinuousDistribution __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_IContinuousDistribution_get_RandomSource(
	MathNet_Numerics_Distributions_IContinuousDistribution __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_IContinuousDistribution_set_RandomSource(
	MathNet_Numerics_Distributions_IContinuousDistribution __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_IContinuousDistribution_get_Mean(
	MathNet_Numerics_Distributions_IContinuousDistribution __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_IContinuousDistribution_get_Variance(
	MathNet_Numerics_Distributions_IContinuousDistribution __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_IContinuousDistribution_get_StdDev(
	MathNet_Numerics_Distributions_IContinuousDistribution __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_IContinuousDistribution_get_Entropy(
	MathNet_Numerics_Distributions_IContinuousDistribution __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_IContinuousDistribution_get_Skewness(
	MathNet_Numerics_Distributions_IContinuousDistribution __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_IContinuousDistribution_CumulativeDistribution(
	MathNet_Numerics_Distributions_IContinuousDistribution __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Distributions.Beta
int CVIFUNC MathNet_Numerics_Distributions_Beta__Create(
	MathNet_Numerics_Distributions_Beta * __instance,
	double a,
	double b,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Beta_Get_A(
	MathNet_Numerics_Distributions_Beta __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Beta_Set_A(
	MathNet_Numerics_Distributions_Beta __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Beta_Get_B(
	MathNet_Numerics_Distributions_Beta __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Beta_Set_B(
	MathNet_Numerics_Distributions_Beta __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Beta_Get_RandomSource(
	MathNet_Numerics_Distributions_Beta __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Beta_Set_RandomSource(
	MathNet_Numerics_Distributions_Beta __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Beta_Get_Mean(
	MathNet_Numerics_Distributions_Beta __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Beta_Get_Variance(
	MathNet_Numerics_Distributions_Beta __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Beta_Get_StdDev(
	MathNet_Numerics_Distributions_Beta __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Beta_Get_Entropy(
	MathNet_Numerics_Distributions_Beta __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Beta_Get_Skewness(
	MathNet_Numerics_Distributions_Beta __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Beta_Get_Mode(
	MathNet_Numerics_Distributions_Beta __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Beta_Get_Median(
	MathNet_Numerics_Distributions_Beta __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Beta_Get_Minimum(
	MathNet_Numerics_Distributions_Beta __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Beta_Get_Maximum(
	MathNet_Numerics_Distributions_Beta __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Beta_ToString(
	MathNet_Numerics_Distributions_Beta __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Beta_Density(
	MathNet_Numerics_Distributions_Beta __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Beta_DensityLn(
	MathNet_Numerics_Distributions_Beta __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Beta_CumulativeDistribution(
	MathNet_Numerics_Distributions_Beta __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Beta_Sample(
	MathNet_Numerics_Distributions_Beta __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Beta_Samples(
	MathNet_Numerics_Distributions_Beta __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Beta_Sample_1(
	System_Random rnd,
	double a,
	double b,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Beta_Samples_1(
	System_Random rnd,
	double a,
	double b,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Distributions.Cauchy
int CVIFUNC MathNet_Numerics_Distributions_Cauchy__Create(
	MathNet_Numerics_Distributions_Cauchy * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Cauchy__Create_1(
	MathNet_Numerics_Distributions_Cauchy * __instance,
	double location,
	double scale,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Cauchy_Get_Location(
	MathNet_Numerics_Distributions_Cauchy __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Cauchy_Set_Location(
	MathNet_Numerics_Distributions_Cauchy __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Cauchy_Get_Scale(
	MathNet_Numerics_Distributions_Cauchy __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Cauchy_Set_Scale(
	MathNet_Numerics_Distributions_Cauchy __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Cauchy_Get_RandomSource(
	MathNet_Numerics_Distributions_Cauchy __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Cauchy_Set_RandomSource(
	MathNet_Numerics_Distributions_Cauchy __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Cauchy_Get_Mean(
	MathNet_Numerics_Distributions_Cauchy __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Cauchy_Get_Variance(
	MathNet_Numerics_Distributions_Cauchy __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Cauchy_Get_StdDev(
	MathNet_Numerics_Distributions_Cauchy __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Cauchy_Get_Entropy(
	MathNet_Numerics_Distributions_Cauchy __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Cauchy_Get_Skewness(
	MathNet_Numerics_Distributions_Cauchy __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Cauchy_Get_Mode(
	MathNet_Numerics_Distributions_Cauchy __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Cauchy_Get_Median(
	MathNet_Numerics_Distributions_Cauchy __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Cauchy_Get_Minimum(
	MathNet_Numerics_Distributions_Cauchy __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Cauchy_Get_Maximum(
	MathNet_Numerics_Distributions_Cauchy __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Cauchy_ToString(
	MathNet_Numerics_Distributions_Cauchy __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Cauchy_CumulativeDistribution(
	MathNet_Numerics_Distributions_Cauchy __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Cauchy_Density(
	MathNet_Numerics_Distributions_Cauchy __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Cauchy_DensityLn(
	MathNet_Numerics_Distributions_Cauchy __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Cauchy_Sample(
	MathNet_Numerics_Distributions_Cauchy __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Cauchy_Samples(
	MathNet_Numerics_Distributions_Cauchy __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Cauchy_Sample_1(
	System_Random rnd,
	double location,
	double scale,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Cauchy_Samples_1(
	System_Random rnd,
	double location,
	double scale,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Distributions.Chi
int CVIFUNC MathNet_Numerics_Distributions_Chi__Create(
	MathNet_Numerics_Distributions_Chi * __instance,
	double dof,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Chi_Get_DegreesOfFreedom(
	MathNet_Numerics_Distributions_Chi __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Chi_Set_DegreesOfFreedom(
	MathNet_Numerics_Distributions_Chi __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Chi_Get_RandomSource(
	MathNet_Numerics_Distributions_Chi __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Chi_Set_RandomSource(
	MathNet_Numerics_Distributions_Chi __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Chi_Get_Mean(
	MathNet_Numerics_Distributions_Chi __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Chi_Get_Variance(
	MathNet_Numerics_Distributions_Chi __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Chi_Get_StdDev(
	MathNet_Numerics_Distributions_Chi __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Chi_Get_Entropy(
	MathNet_Numerics_Distributions_Chi __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Chi_Get_Skewness(
	MathNet_Numerics_Distributions_Chi __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Chi_Get_Mode(
	MathNet_Numerics_Distributions_Chi __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Chi_Get_Median(
	MathNet_Numerics_Distributions_Chi __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Chi_Get_Minimum(
	MathNet_Numerics_Distributions_Chi __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Chi_Get_Maximum(
	MathNet_Numerics_Distributions_Chi __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Chi_ToString(
	MathNet_Numerics_Distributions_Chi __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Chi_CumulativeDistribution(
	MathNet_Numerics_Distributions_Chi __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Chi_Density(
	MathNet_Numerics_Distributions_Chi __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Chi_DensityLn(
	MathNet_Numerics_Distributions_Chi __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Chi_Sample(
	MathNet_Numerics_Distributions_Chi __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Chi_Samples(
	MathNet_Numerics_Distributions_Chi __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Chi_Sample_1(
	System_Random rnd,
	int dof,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Chi_Samples_1(
	System_Random rnd,
	int dof,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Distributions.ChiSquare
int CVIFUNC MathNet_Numerics_Distributions_ChiSquare__Create(
	MathNet_Numerics_Distributions_ChiSquare * __instance,
	double dof,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ChiSquare_Get_DegreesOfFreedom(
	MathNet_Numerics_Distributions_ChiSquare __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ChiSquare_Set_DegreesOfFreedom(
	MathNet_Numerics_Distributions_ChiSquare __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ChiSquare_Get_RandomSource(
	MathNet_Numerics_Distributions_ChiSquare __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ChiSquare_Set_RandomSource(
	MathNet_Numerics_Distributions_ChiSquare __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ChiSquare_Get_Mean(
	MathNet_Numerics_Distributions_ChiSquare __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ChiSquare_Get_Variance(
	MathNet_Numerics_Distributions_ChiSquare __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ChiSquare_Get_StdDev(
	MathNet_Numerics_Distributions_ChiSquare __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ChiSquare_Get_Entropy(
	MathNet_Numerics_Distributions_ChiSquare __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ChiSquare_Get_Skewness(
	MathNet_Numerics_Distributions_ChiSquare __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ChiSquare_Get_Mode(
	MathNet_Numerics_Distributions_ChiSquare __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ChiSquare_Get_Median(
	MathNet_Numerics_Distributions_ChiSquare __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ChiSquare_Get_Minimum(
	MathNet_Numerics_Distributions_ChiSquare __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ChiSquare_Get_Maximum(
	MathNet_Numerics_Distributions_ChiSquare __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ChiSquare_ToString(
	MathNet_Numerics_Distributions_ChiSquare __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ChiSquare_CumulativeDistribution(
	MathNet_Numerics_Distributions_ChiSquare __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ChiSquare_Density(
	MathNet_Numerics_Distributions_ChiSquare __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ChiSquare_DensityLn(
	MathNet_Numerics_Distributions_ChiSquare __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ChiSquare_Sample(
	MathNet_Numerics_Distributions_ChiSquare __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ChiSquare_Samples(
	MathNet_Numerics_Distributions_ChiSquare __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ChiSquare_Sample_1(
	System_Random rnd,
	double dof,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ChiSquare_Samples_1(
	System_Random rnd,
	double dof,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Distributions.ContinuousUniform
int CVIFUNC MathNet_Numerics_Distributions_ContinuousUniform__Create(
	MathNet_Numerics_Distributions_ContinuousUniform * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ContinuousUniform__Create_1(
	MathNet_Numerics_Distributions_ContinuousUniform * __instance,
	double lower,
	double upper,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ContinuousUniform_Get_Lower(
	MathNet_Numerics_Distributions_ContinuousUniform __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ContinuousUniform_Set_Lower(
	MathNet_Numerics_Distributions_ContinuousUniform __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ContinuousUniform_Get_Upper(
	MathNet_Numerics_Distributions_ContinuousUniform __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ContinuousUniform_Set_Upper(
	MathNet_Numerics_Distributions_ContinuousUniform __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ContinuousUniform_Get_RandomSource(
	MathNet_Numerics_Distributions_ContinuousUniform __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ContinuousUniform_Set_RandomSource(
	MathNet_Numerics_Distributions_ContinuousUniform __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ContinuousUniform_Get_Mean(
	MathNet_Numerics_Distributions_ContinuousUniform __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ContinuousUniform_Get_Variance(
	MathNet_Numerics_Distributions_ContinuousUniform __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ContinuousUniform_Get_StdDev(
	MathNet_Numerics_Distributions_ContinuousUniform __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ContinuousUniform_Get_Entropy(
	MathNet_Numerics_Distributions_ContinuousUniform __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ContinuousUniform_Get_Skewness(
	MathNet_Numerics_Distributions_ContinuousUniform __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ContinuousUniform_Get_Mode(
	MathNet_Numerics_Distributions_ContinuousUniform __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ContinuousUniform_Get_Median(
	MathNet_Numerics_Distributions_ContinuousUniform __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ContinuousUniform_Get_Minimum(
	MathNet_Numerics_Distributions_ContinuousUniform __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ContinuousUniform_Get_Maximum(
	MathNet_Numerics_Distributions_ContinuousUniform __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ContinuousUniform_ToString(
	MathNet_Numerics_Distributions_ContinuousUniform __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ContinuousUniform_Density(
	MathNet_Numerics_Distributions_ContinuousUniform __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ContinuousUniform_DensityLn(
	MathNet_Numerics_Distributions_ContinuousUniform __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ContinuousUniform_CumulativeDistribution(
	MathNet_Numerics_Distributions_ContinuousUniform __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ContinuousUniform_Sample(
	MathNet_Numerics_Distributions_ContinuousUniform __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ContinuousUniform_Samples(
	MathNet_Numerics_Distributions_ContinuousUniform __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ContinuousUniform_Sample_1(
	System_Random rnd,
	double lower,
	double upper,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ContinuousUniform_Samples_1(
	System_Random rnd,
	double lower,
	double upper,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Distributions.Erlang
int CVIFUNC MathNet_Numerics_Distributions_Erlang__Create(
	MathNet_Numerics_Distributions_Erlang * __instance,
	int shape,
	double invScale,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Erlang_Get_Shape(
	MathNet_Numerics_Distributions_Erlang __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Erlang_Set_Shape(
	MathNet_Numerics_Distributions_Erlang __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Erlang_Get_Scale(
	MathNet_Numerics_Distributions_Erlang __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Erlang_Set_Scale(
	MathNet_Numerics_Distributions_Erlang __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Erlang_Get_InvScale(
	MathNet_Numerics_Distributions_Erlang __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Erlang_Set_InvScale(
	MathNet_Numerics_Distributions_Erlang __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Erlang_Get_RandomSource(
	MathNet_Numerics_Distributions_Erlang __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Erlang_Set_RandomSource(
	MathNet_Numerics_Distributions_Erlang __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Erlang_Get_Mean(
	MathNet_Numerics_Distributions_Erlang __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Erlang_Get_Variance(
	MathNet_Numerics_Distributions_Erlang __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Erlang_Get_StdDev(
	MathNet_Numerics_Distributions_Erlang __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Erlang_Get_Entropy(
	MathNet_Numerics_Distributions_Erlang __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Erlang_Get_Skewness(
	MathNet_Numerics_Distributions_Erlang __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Erlang_Get_Mode(
	MathNet_Numerics_Distributions_Erlang __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Erlang_Get_Median(
	MathNet_Numerics_Distributions_Erlang __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Erlang_Get_Minimum(
	MathNet_Numerics_Distributions_Erlang __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Erlang_Get_Maximum(
	MathNet_Numerics_Distributions_Erlang __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Erlang_WithShapeScale(
	int shape,
	double scale,
	MathNet_Numerics_Distributions_Erlang * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Erlang_WithShapeInvScale(
	int shape,
	double invScale,
	MathNet_Numerics_Distributions_Erlang * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Erlang_ToString(
	MathNet_Numerics_Distributions_Erlang __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Erlang_CumulativeDistribution(
	MathNet_Numerics_Distributions_Erlang __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Erlang_Density(
	MathNet_Numerics_Distributions_Erlang __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Erlang_DensityLn(
	MathNet_Numerics_Distributions_Erlang __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Erlang_Sample(
	MathNet_Numerics_Distributions_Erlang __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Erlang_Samples(
	MathNet_Numerics_Distributions_Erlang __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Erlang_Sample_1(
	System_Random rnd,
	double shape,
	double invScale,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Erlang_Samples_1(
	System_Random rnd,
	double shape,
	double invScale,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Distributions.Exponential
int CVIFUNC MathNet_Numerics_Distributions_Exponential__Create(
	MathNet_Numerics_Distributions_Exponential * __instance,
	double lambda,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Exponential_Get_Lambda(
	MathNet_Numerics_Distributions_Exponential __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Exponential_Set_Lambda(
	MathNet_Numerics_Distributions_Exponential __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Exponential_Get_RandomSource(
	MathNet_Numerics_Distributions_Exponential __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Exponential_Set_RandomSource(
	MathNet_Numerics_Distributions_Exponential __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Exponential_Get_Mean(
	MathNet_Numerics_Distributions_Exponential __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Exponential_Get_Variance(
	MathNet_Numerics_Distributions_Exponential __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Exponential_Get_StdDev(
	MathNet_Numerics_Distributions_Exponential __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Exponential_Get_Entropy(
	MathNet_Numerics_Distributions_Exponential __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Exponential_Get_Skewness(
	MathNet_Numerics_Distributions_Exponential __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Exponential_Get_Mode(
	MathNet_Numerics_Distributions_Exponential __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Exponential_Get_Median(
	MathNet_Numerics_Distributions_Exponential __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Exponential_Get_Minimum(
	MathNet_Numerics_Distributions_Exponential __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Exponential_Get_Maximum(
	MathNet_Numerics_Distributions_Exponential __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Exponential_ToString(
	MathNet_Numerics_Distributions_Exponential __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Exponential_CumulativeDistribution(
	MathNet_Numerics_Distributions_Exponential __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Exponential_Density(
	MathNet_Numerics_Distributions_Exponential __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Exponential_DensityLn(
	MathNet_Numerics_Distributions_Exponential __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Exponential_Sample(
	MathNet_Numerics_Distributions_Exponential __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Exponential_Samples(
	MathNet_Numerics_Distributions_Exponential __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Exponential_Sample_1(
	System_Random rnd,
	double lambda,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Exponential_Samples_1(
	System_Random rnd,
	double lambda,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Distributions.FisherSnedecor
int CVIFUNC MathNet_Numerics_Distributions_FisherSnedecor__Create(
	MathNet_Numerics_Distributions_FisherSnedecor * __instance,
	double d1,
	double d2,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_FisherSnedecor_Get_DegreeOfFreedom1(
	MathNet_Numerics_Distributions_FisherSnedecor __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_FisherSnedecor_Set_DegreeOfFreedom1(
	MathNet_Numerics_Distributions_FisherSnedecor __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_FisherSnedecor_Get_DegreeOfFreedom2(
	MathNet_Numerics_Distributions_FisherSnedecor __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_FisherSnedecor_Set_DegreeOfFreedom2(
	MathNet_Numerics_Distributions_FisherSnedecor __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_FisherSnedecor_Get_RandomSource(
	MathNet_Numerics_Distributions_FisherSnedecor __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_FisherSnedecor_Set_RandomSource(
	MathNet_Numerics_Distributions_FisherSnedecor __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_FisherSnedecor_Get_Mean(
	MathNet_Numerics_Distributions_FisherSnedecor __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_FisherSnedecor_Get_Variance(
	MathNet_Numerics_Distributions_FisherSnedecor __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_FisherSnedecor_Get_StdDev(
	MathNet_Numerics_Distributions_FisherSnedecor __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_FisherSnedecor_Get_Entropy(
	MathNet_Numerics_Distributions_FisherSnedecor __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_FisherSnedecor_Get_Skewness(
	MathNet_Numerics_Distributions_FisherSnedecor __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_FisherSnedecor_Get_Mode(
	MathNet_Numerics_Distributions_FisherSnedecor __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_FisherSnedecor_Get_Median(
	MathNet_Numerics_Distributions_FisherSnedecor __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_FisherSnedecor_Get_Minimum(
	MathNet_Numerics_Distributions_FisherSnedecor __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_FisherSnedecor_Get_Maximum(
	MathNet_Numerics_Distributions_FisherSnedecor __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_FisherSnedecor_ToString(
	MathNet_Numerics_Distributions_FisherSnedecor __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_FisherSnedecor_CumulativeDistribution(
	MathNet_Numerics_Distributions_FisherSnedecor __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_FisherSnedecor_Density(
	MathNet_Numerics_Distributions_FisherSnedecor __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_FisherSnedecor_DensityLn(
	MathNet_Numerics_Distributions_FisherSnedecor __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_FisherSnedecor_Sample(
	MathNet_Numerics_Distributions_FisherSnedecor __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_FisherSnedecor_Samples(
	MathNet_Numerics_Distributions_FisherSnedecor __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_FisherSnedecor_Sample_1(
	System_Random rnd,
	double d1,
	double d2,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_FisherSnedecor_Samples_1(
	System_Random rnd,
	double d1,
	double d2,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Distributions.Gamma
int CVIFUNC MathNet_Numerics_Distributions_Gamma__Create(
	MathNet_Numerics_Distributions_Gamma * __instance,
	double shape,
	double invScale,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Gamma_Get_Shape(
	MathNet_Numerics_Distributions_Gamma __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Gamma_Set_Shape(
	MathNet_Numerics_Distributions_Gamma __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Gamma_Get_Scale(
	MathNet_Numerics_Distributions_Gamma __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Gamma_Set_Scale(
	MathNet_Numerics_Distributions_Gamma __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Gamma_Get_InvScale(
	MathNet_Numerics_Distributions_Gamma __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Gamma_Set_InvScale(
	MathNet_Numerics_Distributions_Gamma __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Gamma_Get_RandomSource(
	MathNet_Numerics_Distributions_Gamma __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Gamma_Set_RandomSource(
	MathNet_Numerics_Distributions_Gamma __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Gamma_Get_Mean(
	MathNet_Numerics_Distributions_Gamma __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Gamma_Get_Variance(
	MathNet_Numerics_Distributions_Gamma __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Gamma_Get_StdDev(
	MathNet_Numerics_Distributions_Gamma __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Gamma_Get_Entropy(
	MathNet_Numerics_Distributions_Gamma __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Gamma_Get_Skewness(
	MathNet_Numerics_Distributions_Gamma __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Gamma_Get_Mode(
	MathNet_Numerics_Distributions_Gamma __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Gamma_Get_Median(
	MathNet_Numerics_Distributions_Gamma __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Gamma_Get_Minimum(
	MathNet_Numerics_Distributions_Gamma __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Gamma_Get_Maximum(
	MathNet_Numerics_Distributions_Gamma __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Gamma_WithShapeScale(
	double shape,
	double scale,
	MathNet_Numerics_Distributions_Gamma * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Gamma_WithShapeInvScale(
	double shape,
	double invScale,
	MathNet_Numerics_Distributions_Gamma * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Gamma_ToString(
	MathNet_Numerics_Distributions_Gamma __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Gamma_Density(
	MathNet_Numerics_Distributions_Gamma __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Gamma_DensityLn(
	MathNet_Numerics_Distributions_Gamma __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Gamma_CumulativeDistribution(
	MathNet_Numerics_Distributions_Gamma __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Gamma_Sample(
	MathNet_Numerics_Distributions_Gamma __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Gamma_Samples(
	MathNet_Numerics_Distributions_Gamma __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Gamma_Sample_1(
	System_Random rng,
	double shape,
	double invScale,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Gamma_Samples_1(
	System_Random rng,
	double shape,
	double invScale,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Distributions.InverseGamma
int CVIFUNC MathNet_Numerics_Distributions_InverseGamma__Create(
	MathNet_Numerics_Distributions_InverseGamma * __instance,
	double shape,
	double scale,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_InverseGamma_Get_Shape(
	MathNet_Numerics_Distributions_InverseGamma __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_InverseGamma_Set_Shape(
	MathNet_Numerics_Distributions_InverseGamma __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_InverseGamma_Get_Scale(
	MathNet_Numerics_Distributions_InverseGamma __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_InverseGamma_Set_Scale(
	MathNet_Numerics_Distributions_InverseGamma __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_InverseGamma_Get_RandomSource(
	MathNet_Numerics_Distributions_InverseGamma __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_InverseGamma_Set_RandomSource(
	MathNet_Numerics_Distributions_InverseGamma __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_InverseGamma_Get_Mean(
	MathNet_Numerics_Distributions_InverseGamma __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_InverseGamma_Get_Variance(
	MathNet_Numerics_Distributions_InverseGamma __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_InverseGamma_Get_StdDev(
	MathNet_Numerics_Distributions_InverseGamma __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_InverseGamma_Get_Entropy(
	MathNet_Numerics_Distributions_InverseGamma __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_InverseGamma_Get_Skewness(
	MathNet_Numerics_Distributions_InverseGamma __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_InverseGamma_Get_Mode(
	MathNet_Numerics_Distributions_InverseGamma __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_InverseGamma_Get_Median(
	MathNet_Numerics_Distributions_InverseGamma __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_InverseGamma_Get_Minimum(
	MathNet_Numerics_Distributions_InverseGamma __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_InverseGamma_Get_Maximum(
	MathNet_Numerics_Distributions_InverseGamma __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_InverseGamma_ToString(
	MathNet_Numerics_Distributions_InverseGamma __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_InverseGamma_CumulativeDistribution(
	MathNet_Numerics_Distributions_InverseGamma __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_InverseGamma_Density(
	MathNet_Numerics_Distributions_InverseGamma __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_InverseGamma_DensityLn(
	MathNet_Numerics_Distributions_InverseGamma __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_InverseGamma_Sample(
	MathNet_Numerics_Distributions_InverseGamma __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_InverseGamma_Samples(
	MathNet_Numerics_Distributions_InverseGamma __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_InverseGamma_Sample_1(
	System_Random rnd,
	double shape,
	double scale,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_InverseGamma_Samples_1(
	System_Random rnd,
	double shape,
	double scale,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Distributions.Laplace
int CVIFUNC MathNet_Numerics_Distributions_Laplace__Create(
	MathNet_Numerics_Distributions_Laplace * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Laplace__Create_1(
	MathNet_Numerics_Distributions_Laplace * __instance,
	double location,
	double scale,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Laplace_Get_Location(
	MathNet_Numerics_Distributions_Laplace __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Laplace_Set_Location(
	MathNet_Numerics_Distributions_Laplace __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Laplace_Get_Scale(
	MathNet_Numerics_Distributions_Laplace __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Laplace_Set_Scale(
	MathNet_Numerics_Distributions_Laplace __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Laplace_Get_RandomSource(
	MathNet_Numerics_Distributions_Laplace __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Laplace_Set_RandomSource(
	MathNet_Numerics_Distributions_Laplace __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Laplace_Get_Mean(
	MathNet_Numerics_Distributions_Laplace __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Laplace_Get_Variance(
	MathNet_Numerics_Distributions_Laplace __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Laplace_Get_StdDev(
	MathNet_Numerics_Distributions_Laplace __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Laplace_Get_Entropy(
	MathNet_Numerics_Distributions_Laplace __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Laplace_Get_Skewness(
	MathNet_Numerics_Distributions_Laplace __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Laplace_Get_Mode(
	MathNet_Numerics_Distributions_Laplace __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Laplace_Get_Median(
	MathNet_Numerics_Distributions_Laplace __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Laplace_Get_Minimum(
	MathNet_Numerics_Distributions_Laplace __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Laplace_Get_Maximum(
	MathNet_Numerics_Distributions_Laplace __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Laplace_ToString(
	MathNet_Numerics_Distributions_Laplace __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Laplace_CumulativeDistribution(
	MathNet_Numerics_Distributions_Laplace __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Laplace_Density(
	MathNet_Numerics_Distributions_Laplace __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Laplace_DensityLn(
	MathNet_Numerics_Distributions_Laplace __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Laplace_Sample(
	MathNet_Numerics_Distributions_Laplace __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Laplace_Samples(
	MathNet_Numerics_Distributions_Laplace __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Laplace_Sample_1(
	System_Random rnd,
	double location,
	double scale,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Laplace_Samples_1(
	System_Random rnd,
	double location,
	double scale,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Distributions.LogNormal
int CVIFUNC MathNet_Numerics_Distributions_LogNormal__Create(
	MathNet_Numerics_Distributions_LogNormal * __instance,
	double mu,
	double sigma,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_LogNormal_Get_Mu(
	MathNet_Numerics_Distributions_LogNormal __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_LogNormal_Set_Mu(
	MathNet_Numerics_Distributions_LogNormal __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_LogNormal_Get_Sigma(
	MathNet_Numerics_Distributions_LogNormal __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_LogNormal_Set_Sigma(
	MathNet_Numerics_Distributions_LogNormal __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_LogNormal_Get_RandomSource(
	MathNet_Numerics_Distributions_LogNormal __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_LogNormal_Set_RandomSource(
	MathNet_Numerics_Distributions_LogNormal __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_LogNormal_Get_Mean(
	MathNet_Numerics_Distributions_LogNormal __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_LogNormal_Get_Variance(
	MathNet_Numerics_Distributions_LogNormal __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_LogNormal_Get_StdDev(
	MathNet_Numerics_Distributions_LogNormal __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_LogNormal_Get_Entropy(
	MathNet_Numerics_Distributions_LogNormal __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_LogNormal_Get_Skewness(
	MathNet_Numerics_Distributions_LogNormal __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_LogNormal_Get_Mode(
	MathNet_Numerics_Distributions_LogNormal __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_LogNormal_Get_Median(
	MathNet_Numerics_Distributions_LogNormal __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_LogNormal_Get_Minimum(
	MathNet_Numerics_Distributions_LogNormal __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_LogNormal_Get_Maximum(
	MathNet_Numerics_Distributions_LogNormal __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_LogNormal_ToString(
	MathNet_Numerics_Distributions_LogNormal __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_LogNormal_Density(
	MathNet_Numerics_Distributions_LogNormal __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_LogNormal_DensityLn(
	MathNet_Numerics_Distributions_LogNormal __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_LogNormal_CumulativeDistribution(
	MathNet_Numerics_Distributions_LogNormal __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_LogNormal_Sample(
	MathNet_Numerics_Distributions_LogNormal __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_LogNormal_Samples(
	MathNet_Numerics_Distributions_LogNormal __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_LogNormal_Sample_1(
	System_Random rng,
	double mu,
	double sigma,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_LogNormal_Samples_1(
	System_Random rng,
	double mu,
	double sigma,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Distributions.Normal
int CVIFUNC MathNet_Numerics_Distributions_Normal__Create(
	MathNet_Numerics_Distributions_Normal * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Normal__Create_1(
	MathNet_Numerics_Distributions_Normal * __instance,
	double mean,
	double stddev,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Normal_Get_Precision(
	MathNet_Numerics_Distributions_Normal __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Normal_Set_Precision(
	MathNet_Numerics_Distributions_Normal __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Normal_Get_RandomSource(
	MathNet_Numerics_Distributions_Normal __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Normal_Set_RandomSource(
	MathNet_Numerics_Distributions_Normal __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Normal_Get_Mean(
	MathNet_Numerics_Distributions_Normal __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Normal_Set_Mean(
	MathNet_Numerics_Distributions_Normal __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Normal_Get_Variance(
	MathNet_Numerics_Distributions_Normal __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Normal_Set_Variance(
	MathNet_Numerics_Distributions_Normal __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Normal_Get_StdDev(
	MathNet_Numerics_Distributions_Normal __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Normal_Set_StdDev(
	MathNet_Numerics_Distributions_Normal __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Normal_Get_Entropy(
	MathNet_Numerics_Distributions_Normal __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Normal_Get_Skewness(
	MathNet_Numerics_Distributions_Normal __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Normal_Get_Mode(
	MathNet_Numerics_Distributions_Normal __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Normal_Get_Median(
	MathNet_Numerics_Distributions_Normal __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Normal_Get_Minimum(
	MathNet_Numerics_Distributions_Normal __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Normal_Get_Maximum(
	MathNet_Numerics_Distributions_Normal __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Normal_WithMeanStdDev(
	double mean,
	double stddev,
	MathNet_Numerics_Distributions_Normal * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Normal_WithMeanVariance(
	double mean,
	double var,
	MathNet_Numerics_Distributions_Normal * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Normal_WithMeanPrecision(
	double mean,
	double precision,
	MathNet_Numerics_Distributions_Normal * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Normal_ToString(
	MathNet_Numerics_Distributions_Normal __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Normal_Density(
	MathNet_Numerics_Distributions_Normal __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Normal_DensityLn(
	MathNet_Numerics_Distributions_Normal __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Normal_CumulativeDistribution(
	MathNet_Numerics_Distributions_Normal __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Normal_InverseCumulativeDistribution(
	MathNet_Numerics_Distributions_Normal __instance,
	double p,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Normal_Sample(
	MathNet_Numerics_Distributions_Normal __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Normal_Samples(
	MathNet_Numerics_Distributions_Normal __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Normal_Sample_1(
	System_Random rnd,
	double mean,
	double stddev,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Normal_Samples_1(
	System_Random rnd,
	double mean,
	double stddev,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Distributions.Pareto
int CVIFUNC MathNet_Numerics_Distributions_Pareto__Create(
	MathNet_Numerics_Distributions_Pareto * __instance,
	double scale,
	double shape,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Pareto_Get_Scale(
	MathNet_Numerics_Distributions_Pareto __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Pareto_Set_Scale(
	MathNet_Numerics_Distributions_Pareto __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Pareto_Get_Shape(
	MathNet_Numerics_Distributions_Pareto __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Pareto_Set_Shape(
	MathNet_Numerics_Distributions_Pareto __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Pareto_Get_RandomSource(
	MathNet_Numerics_Distributions_Pareto __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Pareto_Set_RandomSource(
	MathNet_Numerics_Distributions_Pareto __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Pareto_Get_Mean(
	MathNet_Numerics_Distributions_Pareto __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Pareto_Get_Variance(
	MathNet_Numerics_Distributions_Pareto __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Pareto_Get_StdDev(
	MathNet_Numerics_Distributions_Pareto __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Pareto_Get_Entropy(
	MathNet_Numerics_Distributions_Pareto __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Pareto_Get_Skewness(
	MathNet_Numerics_Distributions_Pareto __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Pareto_Get_Mode(
	MathNet_Numerics_Distributions_Pareto __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Pareto_Get_Median(
	MathNet_Numerics_Distributions_Pareto __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Pareto_Get_Minimum(
	MathNet_Numerics_Distributions_Pareto __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Pareto_Get_Maximum(
	MathNet_Numerics_Distributions_Pareto __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Pareto_ToString(
	MathNet_Numerics_Distributions_Pareto __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Pareto_CumulativeDistribution(
	MathNet_Numerics_Distributions_Pareto __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Pareto_Density(
	MathNet_Numerics_Distributions_Pareto __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Pareto_DensityLn(
	MathNet_Numerics_Distributions_Pareto __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Pareto_Sample(
	MathNet_Numerics_Distributions_Pareto __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Pareto_Samples(
	MathNet_Numerics_Distributions_Pareto __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Pareto_Sample_1(
	System_Random rnd,
	double scale,
	double shape,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Pareto_Samples_1(
	System_Random rnd,
	double scale,
	double shape,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Distributions.Rayleigh
int CVIFUNC MathNet_Numerics_Distributions_Rayleigh__Create(
	MathNet_Numerics_Distributions_Rayleigh * __instance,
	double scale,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Rayleigh_Get_Scale(
	MathNet_Numerics_Distributions_Rayleigh __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Rayleigh_Set_Scale(
	MathNet_Numerics_Distributions_Rayleigh __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Rayleigh_Get_RandomSource(
	MathNet_Numerics_Distributions_Rayleigh __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Rayleigh_Set_RandomSource(
	MathNet_Numerics_Distributions_Rayleigh __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Rayleigh_Get_Mean(
	MathNet_Numerics_Distributions_Rayleigh __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Rayleigh_Get_Variance(
	MathNet_Numerics_Distributions_Rayleigh __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Rayleigh_Get_StdDev(
	MathNet_Numerics_Distributions_Rayleigh __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Rayleigh_Get_Entropy(
	MathNet_Numerics_Distributions_Rayleigh __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Rayleigh_Get_Skewness(
	MathNet_Numerics_Distributions_Rayleigh __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Rayleigh_Get_Mode(
	MathNet_Numerics_Distributions_Rayleigh __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Rayleigh_Get_Median(
	MathNet_Numerics_Distributions_Rayleigh __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Rayleigh_Get_Minimum(
	MathNet_Numerics_Distributions_Rayleigh __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Rayleigh_Get_Maximum(
	MathNet_Numerics_Distributions_Rayleigh __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Rayleigh_ToString(
	MathNet_Numerics_Distributions_Rayleigh __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Rayleigh_CumulativeDistribution(
	MathNet_Numerics_Distributions_Rayleigh __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Rayleigh_Density(
	MathNet_Numerics_Distributions_Rayleigh __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Rayleigh_DensityLn(
	MathNet_Numerics_Distributions_Rayleigh __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Rayleigh_Sample(
	MathNet_Numerics_Distributions_Rayleigh __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Rayleigh_Samples(
	MathNet_Numerics_Distributions_Rayleigh __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Rayleigh_Sample_1(
	System_Random rnd,
	double scale,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Rayleigh_Samples_1(
	System_Random rnd,
	double scale,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Distributions.Stable
int CVIFUNC MathNet_Numerics_Distributions_Stable__Create(
	MathNet_Numerics_Distributions_Stable * __instance,
	double alpha,
	double beta,
	double scale,
	double location,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Stable_Get_Alpha(
	MathNet_Numerics_Distributions_Stable __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Stable_Set_Alpha(
	MathNet_Numerics_Distributions_Stable __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Stable_Get_Beta(
	MathNet_Numerics_Distributions_Stable __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Stable_Set_Beta(
	MathNet_Numerics_Distributions_Stable __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Stable_Get_Scale(
	MathNet_Numerics_Distributions_Stable __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Stable_Set_Scale(
	MathNet_Numerics_Distributions_Stable __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Stable_Get_Location(
	MathNet_Numerics_Distributions_Stable __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Stable_Set_Location(
	MathNet_Numerics_Distributions_Stable __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Stable_Get_RandomSource(
	MathNet_Numerics_Distributions_Stable __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Stable_Set_RandomSource(
	MathNet_Numerics_Distributions_Stable __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Stable_Get_Mean(
	MathNet_Numerics_Distributions_Stable __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Stable_Get_Variance(
	MathNet_Numerics_Distributions_Stable __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Stable_Get_StdDev(
	MathNet_Numerics_Distributions_Stable __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Stable_Get_Entropy(
	MathNet_Numerics_Distributions_Stable __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Stable_Get_Skewness(
	MathNet_Numerics_Distributions_Stable __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Stable_Get_Mode(
	MathNet_Numerics_Distributions_Stable __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Stable_Get_Median(
	MathNet_Numerics_Distributions_Stable __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Stable_Get_Minimum(
	MathNet_Numerics_Distributions_Stable __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Stable_Get_Maximum(
	MathNet_Numerics_Distributions_Stable __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Stable_ToString(
	MathNet_Numerics_Distributions_Stable __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Stable_CumulativeDistribution(
	MathNet_Numerics_Distributions_Stable __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Stable_Density(
	MathNet_Numerics_Distributions_Stable __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Stable_DensityLn(
	MathNet_Numerics_Distributions_Stable __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Stable_Sample(
	MathNet_Numerics_Distributions_Stable __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Stable_Samples(
	MathNet_Numerics_Distributions_Stable __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Stable_Sample_1(
	System_Random rnd,
	double alpha,
	double beta,
	double scale,
	double location,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Stable_Samples_1(
	System_Random rnd,
	double alpha,
	double beta,
	double scale,
	double location,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Distributions.StudentT
int CVIFUNC MathNet_Numerics_Distributions_StudentT__Create(
	MathNet_Numerics_Distributions_StudentT * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_StudentT__Create_1(
	MathNet_Numerics_Distributions_StudentT * __instance,
	double location,
	double scale,
	double dof,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_StudentT_Get_Location(
	MathNet_Numerics_Distributions_StudentT __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_StudentT_Set_Location(
	MathNet_Numerics_Distributions_StudentT __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_StudentT_Get_Scale(
	MathNet_Numerics_Distributions_StudentT __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_StudentT_Set_Scale(
	MathNet_Numerics_Distributions_StudentT __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_StudentT_Get_DegreesOfFreedom(
	MathNet_Numerics_Distributions_StudentT __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_StudentT_Set_DegreesOfFreedom(
	MathNet_Numerics_Distributions_StudentT __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_StudentT_Get_RandomSource(
	MathNet_Numerics_Distributions_StudentT __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_StudentT_Set_RandomSource(
	MathNet_Numerics_Distributions_StudentT __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_StudentT_Get_Mean(
	MathNet_Numerics_Distributions_StudentT __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_StudentT_Get_Variance(
	MathNet_Numerics_Distributions_StudentT __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_StudentT_Get_StdDev(
	MathNet_Numerics_Distributions_StudentT __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_StudentT_Get_Entropy(
	MathNet_Numerics_Distributions_StudentT __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_StudentT_Get_Skewness(
	MathNet_Numerics_Distributions_StudentT __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_StudentT_Get_Mode(
	MathNet_Numerics_Distributions_StudentT __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_StudentT_Get_Median(
	MathNet_Numerics_Distributions_StudentT __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_StudentT_Get_Minimum(
	MathNet_Numerics_Distributions_StudentT __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_StudentT_Get_Maximum(
	MathNet_Numerics_Distributions_StudentT __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_StudentT_ToString(
	MathNet_Numerics_Distributions_StudentT __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_StudentT_Density(
	MathNet_Numerics_Distributions_StudentT __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_StudentT_DensityLn(
	MathNet_Numerics_Distributions_StudentT __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_StudentT_CumulativeDistribution(
	MathNet_Numerics_Distributions_StudentT __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_StudentT_Sample(
	MathNet_Numerics_Distributions_StudentT __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_StudentT_Samples(
	MathNet_Numerics_Distributions_StudentT __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_StudentT_Sample_1(
	System_Random rng,
	double location,
	double scale,
	double dof,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_StudentT_Samples_1(
	System_Random rng,
	double location,
	double scale,
	double dof,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Distributions.Weibull
int CVIFUNC MathNet_Numerics_Distributions_Weibull__Create(
	MathNet_Numerics_Distributions_Weibull * __instance,
	double shape,
	double scale,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Weibull_Get_Shape(
	MathNet_Numerics_Distributions_Weibull __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Weibull_Set_Shape(
	MathNet_Numerics_Distributions_Weibull __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Weibull_Get_Scale(
	MathNet_Numerics_Distributions_Weibull __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Weibull_Set_Scale(
	MathNet_Numerics_Distributions_Weibull __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Weibull_Get_RandomSource(
	MathNet_Numerics_Distributions_Weibull __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Weibull_Set_RandomSource(
	MathNet_Numerics_Distributions_Weibull __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Weibull_Get_Mean(
	MathNet_Numerics_Distributions_Weibull __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Weibull_Get_Variance(
	MathNet_Numerics_Distributions_Weibull __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Weibull_Get_StdDev(
	MathNet_Numerics_Distributions_Weibull __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Weibull_Get_Entropy(
	MathNet_Numerics_Distributions_Weibull __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Weibull_Get_Skewness(
	MathNet_Numerics_Distributions_Weibull __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Weibull_Get_Mode(
	MathNet_Numerics_Distributions_Weibull __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Weibull_Get_Median(
	MathNet_Numerics_Distributions_Weibull __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Weibull_Get_Minimum(
	MathNet_Numerics_Distributions_Weibull __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Weibull_Get_Maximum(
	MathNet_Numerics_Distributions_Weibull __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Weibull_ToString(
	MathNet_Numerics_Distributions_Weibull __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Weibull_Density(
	MathNet_Numerics_Distributions_Weibull __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Weibull_DensityLn(
	MathNet_Numerics_Distributions_Weibull __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Weibull_CumulativeDistribution(
	MathNet_Numerics_Distributions_Weibull __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Weibull_Sample(
	MathNet_Numerics_Distributions_Weibull __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Weibull_Samples(
	MathNet_Numerics_Distributions_Weibull __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Weibull_Sample_1(
	System_Random rng,
	double shape,
	double scale,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Weibull_Samples_1(
	System_Random rng,
	double shape,
	double scale,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Distributions.IDiscreteDistribution
int CVIFUNC MathNet_Numerics_Distributions_IDiscreteDistribution_Get_Mode(
	MathNet_Numerics_Distributions_IDiscreteDistribution __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_IDiscreteDistribution_Get_Median(
	MathNet_Numerics_Distributions_IDiscreteDistribution __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_IDiscreteDistribution_Get_Minimum(
	MathNet_Numerics_Distributions_IDiscreteDistribution __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_IDiscreteDistribution_Get_Maximum(
	MathNet_Numerics_Distributions_IDiscreteDistribution __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_IDiscreteDistribution_Probability(
	MathNet_Numerics_Distributions_IDiscreteDistribution __instance,
	int k,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_IDiscreteDistribution_ProbabilityLn(
	MathNet_Numerics_Distributions_IDiscreteDistribution __instance,
	int k,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_IDiscreteDistribution_Sample(
	MathNet_Numerics_Distributions_IDiscreteDistribution __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_IDiscreteDistribution_Samples(
	MathNet_Numerics_Distributions_IDiscreteDistribution __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_IDiscreteDistribution_get_RandomSource(
	MathNet_Numerics_Distributions_IDiscreteDistribution __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_IDiscreteDistribution_set_RandomSource(
	MathNet_Numerics_Distributions_IDiscreteDistribution __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_IDiscreteDistribution_get_Mean(
	MathNet_Numerics_Distributions_IDiscreteDistribution __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_IDiscreteDistribution_get_Variance(
	MathNet_Numerics_Distributions_IDiscreteDistribution __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_IDiscreteDistribution_get_StdDev(
	MathNet_Numerics_Distributions_IDiscreteDistribution __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_IDiscreteDistribution_get_Entropy(
	MathNet_Numerics_Distributions_IDiscreteDistribution __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_IDiscreteDistribution_get_Skewness(
	MathNet_Numerics_Distributions_IDiscreteDistribution __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_IDiscreteDistribution_CumulativeDistribution(
	MathNet_Numerics_Distributions_IDiscreteDistribution __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Distributions.Bernoulli
int CVIFUNC MathNet_Numerics_Distributions_Bernoulli__Create(
	MathNet_Numerics_Distributions_Bernoulli * __instance,
	double p,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Bernoulli_Get_P(
	MathNet_Numerics_Distributions_Bernoulli __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Bernoulli_Set_P(
	MathNet_Numerics_Distributions_Bernoulli __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Bernoulli_Get_RandomSource(
	MathNet_Numerics_Distributions_Bernoulli __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Bernoulli_Set_RandomSource(
	MathNet_Numerics_Distributions_Bernoulli __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Bernoulli_Get_Mean(
	MathNet_Numerics_Distributions_Bernoulli __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Bernoulli_Get_StdDev(
	MathNet_Numerics_Distributions_Bernoulli __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Bernoulli_Get_Variance(
	MathNet_Numerics_Distributions_Bernoulli __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Bernoulli_Get_Entropy(
	MathNet_Numerics_Distributions_Bernoulli __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Bernoulli_Get_Skewness(
	MathNet_Numerics_Distributions_Bernoulli __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Bernoulli_Get_Minimum(
	MathNet_Numerics_Distributions_Bernoulli __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Bernoulli_Get_Maximum(
	MathNet_Numerics_Distributions_Bernoulli __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Bernoulli_Get_Mode(
	MathNet_Numerics_Distributions_Bernoulli __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Bernoulli_Get_Median(
	MathNet_Numerics_Distributions_Bernoulli __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Bernoulli_ToString(
	MathNet_Numerics_Distributions_Bernoulli __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Bernoulli_CumulativeDistribution(
	MathNet_Numerics_Distributions_Bernoulli __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Bernoulli_Probability(
	MathNet_Numerics_Distributions_Bernoulli __instance,
	int k,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Bernoulli_ProbabilityLn(
	MathNet_Numerics_Distributions_Bernoulli __instance,
	int k,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Bernoulli_Sample(
	MathNet_Numerics_Distributions_Bernoulli __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Bernoulli_Samples(
	MathNet_Numerics_Distributions_Bernoulli __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Bernoulli_Sample_1(
	System_Random rnd,
	double p,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Bernoulli_Samples_1(
	System_Random rnd,
	double p,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Distributions.Binomial
int CVIFUNC MathNet_Numerics_Distributions_Binomial__Create(
	MathNet_Numerics_Distributions_Binomial * __instance,
	double p,
	int n,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Binomial_Get_P(
	MathNet_Numerics_Distributions_Binomial __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Binomial_Set_P(
	MathNet_Numerics_Distributions_Binomial __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Binomial_Get_N(
	MathNet_Numerics_Distributions_Binomial __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Binomial_Set_N(
	MathNet_Numerics_Distributions_Binomial __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Binomial_Get_RandomSource(
	MathNet_Numerics_Distributions_Binomial __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Binomial_Set_RandomSource(
	MathNet_Numerics_Distributions_Binomial __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Binomial_Get_Mean(
	MathNet_Numerics_Distributions_Binomial __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Binomial_Get_StdDev(
	MathNet_Numerics_Distributions_Binomial __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Binomial_Get_Variance(
	MathNet_Numerics_Distributions_Binomial __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Binomial_Get_Entropy(
	MathNet_Numerics_Distributions_Binomial __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Binomial_Get_Skewness(
	MathNet_Numerics_Distributions_Binomial __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Binomial_Get_Minimum(
	MathNet_Numerics_Distributions_Binomial __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Binomial_Get_Maximum(
	MathNet_Numerics_Distributions_Binomial __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Binomial_Get_Mode(
	MathNet_Numerics_Distributions_Binomial __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Binomial_Get_Median(
	MathNet_Numerics_Distributions_Binomial __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Binomial_ToString(
	MathNet_Numerics_Distributions_Binomial __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Binomial_CumulativeDistribution(
	MathNet_Numerics_Distributions_Binomial __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Binomial_Probability(
	MathNet_Numerics_Distributions_Binomial __instance,
	int k,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Binomial_ProbabilityLn(
	MathNet_Numerics_Distributions_Binomial __instance,
	int k,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Binomial_Sample(
	MathNet_Numerics_Distributions_Binomial __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Binomial_Samples(
	MathNet_Numerics_Distributions_Binomial __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Binomial_Sample_1(
	System_Random rnd,
	double p,
	int n,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Binomial_Samples_1(
	System_Random rnd,
	double p,
	int n,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Distributions.Categorical
int CVIFUNC MathNet_Numerics_Distributions_Categorical__Create(
	MathNet_Numerics_Distributions_Categorical * __instance,
	double * p,
	ssize_t __pLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Categorical__Create_1(
	MathNet_Numerics_Distributions_Categorical * __instance,
	MathNet_Numerics_Statistics_Histogram histogram,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Categorical_Get_P(
	MathNet_Numerics_Distributions_Categorical __instance,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Categorical_Set_P(
	MathNet_Numerics_Distributions_Categorical __instance,
	double * value,
	ssize_t __valueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Categorical_Get_RandomSource(
	MathNet_Numerics_Distributions_Categorical __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Categorical_Set_RandomSource(
	MathNet_Numerics_Distributions_Categorical __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Categorical_Get_Mean(
	MathNet_Numerics_Distributions_Categorical __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Categorical_Get_StdDev(
	MathNet_Numerics_Distributions_Categorical __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Categorical_Get_Variance(
	MathNet_Numerics_Distributions_Categorical __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Categorical_Get_Entropy(
	MathNet_Numerics_Distributions_Categorical __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Categorical_Get_Skewness(
	MathNet_Numerics_Distributions_Categorical __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Categorical_Get_Minimum(
	MathNet_Numerics_Distributions_Categorical __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Categorical_Get_Maximum(
	MathNet_Numerics_Distributions_Categorical __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Categorical_Get_Mode(
	MathNet_Numerics_Distributions_Categorical __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Categorical_Get_Median(
	MathNet_Numerics_Distributions_Categorical __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Categorical_ToString(
	MathNet_Numerics_Distributions_Categorical __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Categorical_CumulativeDistribution(
	MathNet_Numerics_Distributions_Categorical __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Categorical_Probability(
	MathNet_Numerics_Distributions_Categorical __instance,
	int k,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Categorical_ProbabilityLn(
	MathNet_Numerics_Distributions_Categorical __instance,
	int k,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Categorical_Sample(
	MathNet_Numerics_Distributions_Categorical __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Categorical_Samples(
	MathNet_Numerics_Distributions_Categorical __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Categorical_Sample_1(
	System_Random rnd,
	double * p,
	ssize_t __pLength,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Categorical_Samples_1(
	System_Random rnd,
	double * p,
	ssize_t __pLength,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Distributions.ConwayMaxwellPoisson
int CVIFUNC MathNet_Numerics_Distributions_ConwayMaxwellPoisson__Create(
	MathNet_Numerics_Distributions_ConwayMaxwellPoisson * __instance,
	double lambda,
	double nu,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ConwayMaxwellPoisson_Get_Lambda(
	MathNet_Numerics_Distributions_ConwayMaxwellPoisson __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ConwayMaxwellPoisson_Set_Lambda(
	MathNet_Numerics_Distributions_ConwayMaxwellPoisson __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ConwayMaxwellPoisson_Get_Nu(
	MathNet_Numerics_Distributions_ConwayMaxwellPoisson __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ConwayMaxwellPoisson_Set_Nu(
	MathNet_Numerics_Distributions_ConwayMaxwellPoisson __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ConwayMaxwellPoisson_Get_RandomSource(
	MathNet_Numerics_Distributions_ConwayMaxwellPoisson __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ConwayMaxwellPoisson_Set_RandomSource(
	MathNet_Numerics_Distributions_ConwayMaxwellPoisson __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ConwayMaxwellPoisson_Get_Mean(
	MathNet_Numerics_Distributions_ConwayMaxwellPoisson __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ConwayMaxwellPoisson_Get_Variance(
	MathNet_Numerics_Distributions_ConwayMaxwellPoisson __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ConwayMaxwellPoisson_Get_StdDev(
	MathNet_Numerics_Distributions_ConwayMaxwellPoisson __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ConwayMaxwellPoisson_Get_Entropy(
	MathNet_Numerics_Distributions_ConwayMaxwellPoisson __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ConwayMaxwellPoisson_Get_Skewness(
	MathNet_Numerics_Distributions_ConwayMaxwellPoisson __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ConwayMaxwellPoisson_Get_Mode(
	MathNet_Numerics_Distributions_ConwayMaxwellPoisson __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ConwayMaxwellPoisson_Get_Median(
	MathNet_Numerics_Distributions_ConwayMaxwellPoisson __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ConwayMaxwellPoisson_Get_Minimum(
	MathNet_Numerics_Distributions_ConwayMaxwellPoisson __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ConwayMaxwellPoisson_Get_Maximum(
	MathNet_Numerics_Distributions_ConwayMaxwellPoisson __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ConwayMaxwellPoisson_ToString(
	MathNet_Numerics_Distributions_ConwayMaxwellPoisson __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ConwayMaxwellPoisson_CumulativeDistribution(
	MathNet_Numerics_Distributions_ConwayMaxwellPoisson __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ConwayMaxwellPoisson_Probability(
	MathNet_Numerics_Distributions_ConwayMaxwellPoisson __instance,
	int k,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ConwayMaxwellPoisson_ProbabilityLn(
	MathNet_Numerics_Distributions_ConwayMaxwellPoisson __instance,
	int k,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ConwayMaxwellPoisson_Sample(
	MathNet_Numerics_Distributions_ConwayMaxwellPoisson __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ConwayMaxwellPoisson_Samples(
	MathNet_Numerics_Distributions_ConwayMaxwellPoisson __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ConwayMaxwellPoisson_Sample_1(
	System_Random rnd,
	double lambda,
	double nu,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_ConwayMaxwellPoisson_Samples_1(
	System_Random rnd,
	double lambda,
	double nu,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Distributions.DiscreteUniform
int CVIFUNC MathNet_Numerics_Distributions_DiscreteUniform__Create(
	MathNet_Numerics_Distributions_DiscreteUniform * __instance,
	int lower,
	int upper,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_DiscreteUniform_Get_LowerBound(
	MathNet_Numerics_Distributions_DiscreteUniform __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_DiscreteUniform_Set_LowerBound(
	MathNet_Numerics_Distributions_DiscreteUniform __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_DiscreteUniform_Get_UpperBound(
	MathNet_Numerics_Distributions_DiscreteUniform __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_DiscreteUniform_Set_UpperBound(
	MathNet_Numerics_Distributions_DiscreteUniform __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_DiscreteUniform_Get_RandomSource(
	MathNet_Numerics_Distributions_DiscreteUniform __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_DiscreteUniform_Set_RandomSource(
	MathNet_Numerics_Distributions_DiscreteUniform __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_DiscreteUniform_Get_Mean(
	MathNet_Numerics_Distributions_DiscreteUniform __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_DiscreteUniform_Get_StdDev(
	MathNet_Numerics_Distributions_DiscreteUniform __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_DiscreteUniform_Get_Variance(
	MathNet_Numerics_Distributions_DiscreteUniform __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_DiscreteUniform_Get_Entropy(
	MathNet_Numerics_Distributions_DiscreteUniform __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_DiscreteUniform_Get_Skewness(
	MathNet_Numerics_Distributions_DiscreteUniform __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_DiscreteUniform_Get_Minimum(
	MathNet_Numerics_Distributions_DiscreteUniform __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_DiscreteUniform_Get_Maximum(
	MathNet_Numerics_Distributions_DiscreteUniform __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_DiscreteUniform_Get_Mode(
	MathNet_Numerics_Distributions_DiscreteUniform __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_DiscreteUniform_Get_Median(
	MathNet_Numerics_Distributions_DiscreteUniform __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_DiscreteUniform_ToString(
	MathNet_Numerics_Distributions_DiscreteUniform __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_DiscreteUniform_CumulativeDistribution(
	MathNet_Numerics_Distributions_DiscreteUniform __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_DiscreteUniform_Probability(
	MathNet_Numerics_Distributions_DiscreteUniform __instance,
	int k,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_DiscreteUniform_ProbabilityLn(
	MathNet_Numerics_Distributions_DiscreteUniform __instance,
	int k,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_DiscreteUniform_Sample(
	MathNet_Numerics_Distributions_DiscreteUniform __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_DiscreteUniform_Samples(
	MathNet_Numerics_Distributions_DiscreteUniform __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_DiscreteUniform_Sample_1(
	System_Random rnd,
	int lower,
	int upper,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_DiscreteUniform_Samples_1(
	System_Random rnd,
	int lower,
	int upper,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Distributions.Geometric
int CVIFUNC MathNet_Numerics_Distributions_Geometric__Create(
	MathNet_Numerics_Distributions_Geometric * __instance,
	double p,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Geometric_Get_P(
	MathNet_Numerics_Distributions_Geometric __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Geometric_Set_P(
	MathNet_Numerics_Distributions_Geometric __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Geometric_Get_RandomSource(
	MathNet_Numerics_Distributions_Geometric __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Geometric_Set_RandomSource(
	MathNet_Numerics_Distributions_Geometric __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Geometric_Get_Mean(
	MathNet_Numerics_Distributions_Geometric __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Geometric_Get_Variance(
	MathNet_Numerics_Distributions_Geometric __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Geometric_Get_StdDev(
	MathNet_Numerics_Distributions_Geometric __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Geometric_Get_Entropy(
	MathNet_Numerics_Distributions_Geometric __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Geometric_Get_Skewness(
	MathNet_Numerics_Distributions_Geometric __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Geometric_Get_Mode(
	MathNet_Numerics_Distributions_Geometric __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Geometric_Get_Median(
	MathNet_Numerics_Distributions_Geometric __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Geometric_Get_Minimum(
	MathNet_Numerics_Distributions_Geometric __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Geometric_Get_Maximum(
	MathNet_Numerics_Distributions_Geometric __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Geometric_ToString(
	MathNet_Numerics_Distributions_Geometric __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Geometric_CumulativeDistribution(
	MathNet_Numerics_Distributions_Geometric __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Geometric_Probability(
	MathNet_Numerics_Distributions_Geometric __instance,
	int k,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Geometric_ProbabilityLn(
	MathNet_Numerics_Distributions_Geometric __instance,
	int k,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Geometric_Sample(
	MathNet_Numerics_Distributions_Geometric __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Geometric_Samples(
	MathNet_Numerics_Distributions_Geometric __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Geometric_Sample_1(
	System_Random rnd,
	double p,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Geometric_Samples_1(
	System_Random rnd,
	double p,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Distributions.Hypergeometric
int CVIFUNC MathNet_Numerics_Distributions_Hypergeometric__Create(
	MathNet_Numerics_Distributions_Hypergeometric * __instance,
	int populationSize,
	int m,
	int n,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Hypergeometric_Get_PopulationSize(
	MathNet_Numerics_Distributions_Hypergeometric __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Hypergeometric_Set_PopulationSize(
	MathNet_Numerics_Distributions_Hypergeometric __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Hypergeometric_Get_N(
	MathNet_Numerics_Distributions_Hypergeometric __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Hypergeometric_Set_N(
	MathNet_Numerics_Distributions_Hypergeometric __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Hypergeometric_Get_M(
	MathNet_Numerics_Distributions_Hypergeometric __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Hypergeometric_Set_M(
	MathNet_Numerics_Distributions_Hypergeometric __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Hypergeometric_Get_RandomSource(
	MathNet_Numerics_Distributions_Hypergeometric __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Hypergeometric_Set_RandomSource(
	MathNet_Numerics_Distributions_Hypergeometric __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Hypergeometric_Get_Mean(
	MathNet_Numerics_Distributions_Hypergeometric __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Hypergeometric_Get_Variance(
	MathNet_Numerics_Distributions_Hypergeometric __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Hypergeometric_Get_StdDev(
	MathNet_Numerics_Distributions_Hypergeometric __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Hypergeometric_Get_Entropy(
	MathNet_Numerics_Distributions_Hypergeometric __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Hypergeometric_Get_Skewness(
	MathNet_Numerics_Distributions_Hypergeometric __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Hypergeometric_Get_Mode(
	MathNet_Numerics_Distributions_Hypergeometric __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Hypergeometric_Get_Median(
	MathNet_Numerics_Distributions_Hypergeometric __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Hypergeometric_Get_Minimum(
	MathNet_Numerics_Distributions_Hypergeometric __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Hypergeometric_Get_Maximum(
	MathNet_Numerics_Distributions_Hypergeometric __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Hypergeometric_ToString(
	MathNet_Numerics_Distributions_Hypergeometric __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Hypergeometric_CumulativeDistribution(
	MathNet_Numerics_Distributions_Hypergeometric __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Hypergeometric_Probability(
	MathNet_Numerics_Distributions_Hypergeometric __instance,
	int k,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Hypergeometric_ProbabilityLn(
	MathNet_Numerics_Distributions_Hypergeometric __instance,
	int k,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Hypergeometric_Sample(
	MathNet_Numerics_Distributions_Hypergeometric __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Hypergeometric_Samples(
	MathNet_Numerics_Distributions_Hypergeometric __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Hypergeometric_Sample_1(
	System_Random rnd,
	int populationSize,
	int m,
	int n,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Hypergeometric_Samples_1(
	System_Random rnd,
	int populationSize,
	int m,
	int n,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Distributions.NegativeBinomial
int CVIFUNC MathNet_Numerics_Distributions_NegativeBinomial__Create(
	MathNet_Numerics_Distributions_NegativeBinomial * __instance,
	double r,
	double p,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NegativeBinomial_Get_R(
	MathNet_Numerics_Distributions_NegativeBinomial __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NegativeBinomial_Set_R(
	MathNet_Numerics_Distributions_NegativeBinomial __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NegativeBinomial_Get_P(
	MathNet_Numerics_Distributions_NegativeBinomial __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NegativeBinomial_Set_P(
	MathNet_Numerics_Distributions_NegativeBinomial __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NegativeBinomial_Get_RandomSource(
	MathNet_Numerics_Distributions_NegativeBinomial __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NegativeBinomial_Set_RandomSource(
	MathNet_Numerics_Distributions_NegativeBinomial __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NegativeBinomial_Get_Mean(
	MathNet_Numerics_Distributions_NegativeBinomial __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NegativeBinomial_Get_Variance(
	MathNet_Numerics_Distributions_NegativeBinomial __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NegativeBinomial_Get_StdDev(
	MathNet_Numerics_Distributions_NegativeBinomial __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NegativeBinomial_Get_Entropy(
	MathNet_Numerics_Distributions_NegativeBinomial __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NegativeBinomial_Get_Skewness(
	MathNet_Numerics_Distributions_NegativeBinomial __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NegativeBinomial_Get_Mode(
	MathNet_Numerics_Distributions_NegativeBinomial __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NegativeBinomial_Get_Median(
	MathNet_Numerics_Distributions_NegativeBinomial __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NegativeBinomial_Get_Minimum(
	MathNet_Numerics_Distributions_NegativeBinomial __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NegativeBinomial_Get_Maximum(
	MathNet_Numerics_Distributions_NegativeBinomial __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NegativeBinomial_ToString(
	MathNet_Numerics_Distributions_NegativeBinomial __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NegativeBinomial_CumulativeDistribution(
	MathNet_Numerics_Distributions_NegativeBinomial __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NegativeBinomial_Probability(
	MathNet_Numerics_Distributions_NegativeBinomial __instance,
	int k,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NegativeBinomial_ProbabilityLn(
	MathNet_Numerics_Distributions_NegativeBinomial __instance,
	int k,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NegativeBinomial_Sample(
	MathNet_Numerics_Distributions_NegativeBinomial __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NegativeBinomial_Samples(
	MathNet_Numerics_Distributions_NegativeBinomial __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NegativeBinomial_Sample_1(
	System_Random rnd,
	double r,
	double p,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NegativeBinomial_Samples_1(
	System_Random rnd,
	double r,
	double p,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Distributions.Poisson
int CVIFUNC MathNet_Numerics_Distributions_Poisson__Create(
	MathNet_Numerics_Distributions_Poisson * __instance,
	double lambda,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Poisson_Get_Lambda(
	MathNet_Numerics_Distributions_Poisson __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Poisson_Set_Lambda(
	MathNet_Numerics_Distributions_Poisson __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Poisson_Get_RandomSource(
	MathNet_Numerics_Distributions_Poisson __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Poisson_Set_RandomSource(
	MathNet_Numerics_Distributions_Poisson __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Poisson_Get_Mean(
	MathNet_Numerics_Distributions_Poisson __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Poisson_Get_Variance(
	MathNet_Numerics_Distributions_Poisson __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Poisson_Get_StdDev(
	MathNet_Numerics_Distributions_Poisson __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Poisson_Get_Entropy(
	MathNet_Numerics_Distributions_Poisson __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Poisson_Get_Skewness(
	MathNet_Numerics_Distributions_Poisson __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Poisson_Get_Minimum(
	MathNet_Numerics_Distributions_Poisson __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Poisson_Get_Maximum(
	MathNet_Numerics_Distributions_Poisson __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Poisson_Get_Mode(
	MathNet_Numerics_Distributions_Poisson __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Poisson_Get_Median(
	MathNet_Numerics_Distributions_Poisson __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Poisson_ToString(
	MathNet_Numerics_Distributions_Poisson __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Poisson_CumulativeDistribution(
	MathNet_Numerics_Distributions_Poisson __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Poisson_Probability(
	MathNet_Numerics_Distributions_Poisson __instance,
	int k,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Poisson_ProbabilityLn(
	MathNet_Numerics_Distributions_Poisson __instance,
	int k,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Poisson_Sample(
	MathNet_Numerics_Distributions_Poisson __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Poisson_Samples(
	MathNet_Numerics_Distributions_Poisson __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Poisson_Sample_1(
	System_Random rnd,
	double lambda,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Poisson_Samples_1(
	System_Random rnd,
	double lambda,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Distributions.Zipf
int CVIFUNC MathNet_Numerics_Distributions_Zipf__Create(
	MathNet_Numerics_Distributions_Zipf * __instance,
	double s,
	int n,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Zipf_Get_S(
	MathNet_Numerics_Distributions_Zipf __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Zipf_Set_S(
	MathNet_Numerics_Distributions_Zipf __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Zipf_Get_N(
	MathNet_Numerics_Distributions_Zipf __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Zipf_Set_N(
	MathNet_Numerics_Distributions_Zipf __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Zipf_Get_RandomSource(
	MathNet_Numerics_Distributions_Zipf __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Zipf_Set_RandomSource(
	MathNet_Numerics_Distributions_Zipf __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Zipf_Get_Mean(
	MathNet_Numerics_Distributions_Zipf __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Zipf_Get_Variance(
	MathNet_Numerics_Distributions_Zipf __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Zipf_Get_StdDev(
	MathNet_Numerics_Distributions_Zipf __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Zipf_Get_Entropy(
	MathNet_Numerics_Distributions_Zipf __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Zipf_Get_Skewness(
	MathNet_Numerics_Distributions_Zipf __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Zipf_Get_Mode(
	MathNet_Numerics_Distributions_Zipf __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Zipf_Get_Median(
	MathNet_Numerics_Distributions_Zipf __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Zipf_Get_Minimum(
	MathNet_Numerics_Distributions_Zipf __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Zipf_Get_Maximum(
	MathNet_Numerics_Distributions_Zipf __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Zipf_ToString(
	MathNet_Numerics_Distributions_Zipf __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Zipf_CumulativeDistribution(
	MathNet_Numerics_Distributions_Zipf __instance,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Zipf_Probability(
	MathNet_Numerics_Distributions_Zipf __instance,
	int k,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Zipf_ProbabilityLn(
	MathNet_Numerics_Distributions_Zipf __instance,
	int k,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Zipf_Sample(
	MathNet_Numerics_Distributions_Zipf __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Zipf_Samples(
	MathNet_Numerics_Distributions_Zipf __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Zipf_Sample_1(
	System_Random rnd,
	double s,
	int n,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Zipf_Samples_1(
	System_Random rnd,
	double s,
	int n,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Distributions.Dirichlet
int CVIFUNC MathNet_Numerics_Distributions_Dirichlet__Create(
	MathNet_Numerics_Distributions_Dirichlet * __instance,
	double * alpha,
	ssize_t __alphaLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Dirichlet__Create_1(
	MathNet_Numerics_Distributions_Dirichlet * __instance,
	double alpha,
	int k,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Dirichlet_Get_Dimension(
	MathNet_Numerics_Distributions_Dirichlet __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Dirichlet_Get_Alpha(
	MathNet_Numerics_Distributions_Dirichlet __instance,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Dirichlet_Set_Alpha(
	MathNet_Numerics_Distributions_Dirichlet __instance,
	double * value,
	ssize_t __valueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Dirichlet_Get_Mean(
	MathNet_Numerics_Distributions_Dirichlet __instance,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Dirichlet_Get_Variance(
	MathNet_Numerics_Distributions_Dirichlet __instance,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Dirichlet_Get_Entropy(
	MathNet_Numerics_Distributions_Dirichlet __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Dirichlet_Get_RandomSource(
	MathNet_Numerics_Distributions_Dirichlet __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Dirichlet_Set_RandomSource(
	MathNet_Numerics_Distributions_Dirichlet __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Dirichlet_IsValidParameterSet(
	double * alpha,
	ssize_t __alphaLength,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Dirichlet_ToString(
	MathNet_Numerics_Distributions_Dirichlet __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Dirichlet_Density(
	MathNet_Numerics_Distributions_Dirichlet __instance,
	double * x,
	ssize_t __xLength,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Dirichlet_DensityLn(
	MathNet_Numerics_Distributions_Dirichlet __instance,
	double * x,
	ssize_t __xLength,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Dirichlet_Sample(
	MathNet_Numerics_Distributions_Dirichlet __instance,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Dirichlet_Sample_1(
	System_Random rnd,
	double * alpha,
	ssize_t __alphaLength,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Distributions.InverseWishart
int CVIFUNC MathNet_Numerics_Distributions_InverseWishart__Create(
	MathNet_Numerics_Distributions_InverseWishart * __instance,
	double nu,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 s,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_InverseWishart_Get_Nu(
	MathNet_Numerics_Distributions_InverseWishart __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_InverseWishart_Set_Nu(
	MathNet_Numerics_Distributions_InverseWishart __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_InverseWishart_Get_S(
	MathNet_Numerics_Distributions_InverseWishart __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_InverseWishart_Set_S(
	MathNet_Numerics_Distributions_InverseWishart __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_InverseWishart_Get_RandomSource(
	MathNet_Numerics_Distributions_InverseWishart __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_InverseWishart_Set_RandomSource(
	MathNet_Numerics_Distributions_InverseWishart __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_InverseWishart_Get_Mean(
	MathNet_Numerics_Distributions_InverseWishart __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_InverseWishart_Get_Mode(
	MathNet_Numerics_Distributions_InverseWishart __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_InverseWishart_Get_Variance(
	MathNet_Numerics_Distributions_InverseWishart __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_InverseWishart_ToString(
	MathNet_Numerics_Distributions_InverseWishart __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_InverseWishart_Density(
	MathNet_Numerics_Distributions_InverseWishart __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_InverseWishart_Sample(
	MathNet_Numerics_Distributions_InverseWishart __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_InverseWishart_Sample_1(
	System_Random rnd,
	double nu,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 s,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Distributions.MatrixNormal
int CVIFUNC MathNet_Numerics_Distributions_MatrixNormal__Create(
	MathNet_Numerics_Distributions_MatrixNormal * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 m,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 v,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 k,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_MatrixNormal_Get_Mean(
	MathNet_Numerics_Distributions_MatrixNormal __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_MatrixNormal_Set_Mean(
	MathNet_Numerics_Distributions_MatrixNormal __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_MatrixNormal_Get_RowCovariance(
	MathNet_Numerics_Distributions_MatrixNormal __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_MatrixNormal_Set_RowCovariance(
	MathNet_Numerics_Distributions_MatrixNormal __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_MatrixNormal_Get_ColumnCovariance(
	MathNet_Numerics_Distributions_MatrixNormal __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_MatrixNormal_Set_ColumnCovariance(
	MathNet_Numerics_Distributions_MatrixNormal __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_MatrixNormal_Get_RandomSource(
	MathNet_Numerics_Distributions_MatrixNormal __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_MatrixNormal_Set_RandomSource(
	MathNet_Numerics_Distributions_MatrixNormal __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_MatrixNormal_ToString(
	MathNet_Numerics_Distributions_MatrixNormal __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_MatrixNormal_Density(
	MathNet_Numerics_Distributions_MatrixNormal __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_MatrixNormal_Sample(
	MathNet_Numerics_Distributions_MatrixNormal __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_MatrixNormal_Sample_1(
	System_Random rnd,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 m,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 v,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 k,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Distributions.Multinomial
int CVIFUNC MathNet_Numerics_Distributions_Multinomial__Create(
	MathNet_Numerics_Distributions_Multinomial * __instance,
	double * p,
	ssize_t __pLength,
	int n,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Multinomial__Create_1(
	MathNet_Numerics_Distributions_Multinomial * __instance,
	MathNet_Numerics_Statistics_Histogram h,
	int n,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Multinomial_Get_P(
	MathNet_Numerics_Distributions_Multinomial __instance,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Multinomial_Set_P(
	MathNet_Numerics_Distributions_Multinomial __instance,
	double * value,
	ssize_t __valueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Multinomial_Get_N(
	MathNet_Numerics_Distributions_Multinomial __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Multinomial_Set_N(
	MathNet_Numerics_Distributions_Multinomial __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Multinomial_Get_RandomSource(
	MathNet_Numerics_Distributions_Multinomial __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Multinomial_Set_RandomSource(
	MathNet_Numerics_Distributions_Multinomial __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Multinomial_Get_Mean(
	MathNet_Numerics_Distributions_Multinomial __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Multinomial_Get_Variance(
	MathNet_Numerics_Distributions_Multinomial __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Multinomial_Get_Skewness(
	MathNet_Numerics_Distributions_Multinomial __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Multinomial_ToString(
	MathNet_Numerics_Distributions_Multinomial __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Multinomial_Probability(
	MathNet_Numerics_Distributions_Multinomial __instance,
	int * x,
	ssize_t __xLength,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Multinomial_ProbabilityLn(
	MathNet_Numerics_Distributions_Multinomial __instance,
	int * x,
	ssize_t __xLength,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Multinomial_Sample(
	MathNet_Numerics_Distributions_Multinomial __instance,
	int ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Multinomial_Samples(
	MathNet_Numerics_Distributions_Multinomial __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Multinomial_Sample_1(
	System_Random rnd,
	double * p,
	ssize_t __pLength,
	int n,
	int ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Multinomial_Samples_1(
	System_Random rnd,
	double * p,
	ssize_t __pLength,
	int n,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Distributions.MeanPrecisionPair
int CVIFUNC MathNet_Numerics_Distributions_MeanPrecisionPair__Create(
	MathNet_Numerics_Distributions_MeanPrecisionPair * __instance,
	double m,
	double p,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_MeanPrecisionPair_Get_Mean(
	MathNet_Numerics_Distributions_MeanPrecisionPair __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_MeanPrecisionPair_Set_Mean(
	MathNet_Numerics_Distributions_MeanPrecisionPair __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_MeanPrecisionPair_Get_Precision(
	MathNet_Numerics_Distributions_MeanPrecisionPair __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_MeanPrecisionPair_Set_Precision(
	MathNet_Numerics_Distributions_MeanPrecisionPair __instance,
	double value,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Distributions.NormalGamma
int CVIFUNC MathNet_Numerics_Distributions_NormalGamma__Create(
	MathNet_Numerics_Distributions_NormalGamma * __instance,
	double meanLocation,
	double meanScale,
	double precisionShape,
	double precisionInverseScale,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NormalGamma_Get_MeanLocation(
	MathNet_Numerics_Distributions_NormalGamma __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NormalGamma_Set_MeanLocation(
	MathNet_Numerics_Distributions_NormalGamma __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NormalGamma_Get_MeanScale(
	MathNet_Numerics_Distributions_NormalGamma __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NormalGamma_Set_MeanScale(
	MathNet_Numerics_Distributions_NormalGamma __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NormalGamma_Get_PrecisionShape(
	MathNet_Numerics_Distributions_NormalGamma __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NormalGamma_Set_PrecisionShape(
	MathNet_Numerics_Distributions_NormalGamma __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NormalGamma_Get_PrecisionInverseScale(
	MathNet_Numerics_Distributions_NormalGamma __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NormalGamma_Set_PrecisionInverseScale(
	MathNet_Numerics_Distributions_NormalGamma __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NormalGamma_Get_RandomSource(
	MathNet_Numerics_Distributions_NormalGamma __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NormalGamma_Set_RandomSource(
	MathNet_Numerics_Distributions_NormalGamma __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NormalGamma_Get_Mean(
	MathNet_Numerics_Distributions_NormalGamma __instance,
	MathNet_Numerics_Distributions_MeanPrecisionPair * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NormalGamma_Get_Variance(
	MathNet_Numerics_Distributions_NormalGamma __instance,
	MathNet_Numerics_Distributions_MeanPrecisionPair * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NormalGamma_ToString(
	MathNet_Numerics_Distributions_NormalGamma __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NormalGamma_MeanMarginal(
	MathNet_Numerics_Distributions_NormalGamma __instance,
	MathNet_Numerics_Distributions_StudentT * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NormalGamma_PrecisionMarginal(
	MathNet_Numerics_Distributions_NormalGamma __instance,
	MathNet_Numerics_Distributions_Gamma * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NormalGamma_Density(
	MathNet_Numerics_Distributions_NormalGamma __instance,
	MathNet_Numerics_Distributions_MeanPrecisionPair mp,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NormalGamma_Density_1(
	MathNet_Numerics_Distributions_NormalGamma __instance,
	double mean,
	double prec,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NormalGamma_DensityLn(
	MathNet_Numerics_Distributions_NormalGamma __instance,
	MathNet_Numerics_Distributions_MeanPrecisionPair mp,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NormalGamma_DensityLn_1(
	MathNet_Numerics_Distributions_NormalGamma __instance,
	double mean,
	double prec,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NormalGamma_Sample(
	MathNet_Numerics_Distributions_NormalGamma __instance,
	MathNet_Numerics_Distributions_MeanPrecisionPair * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NormalGamma_Samples(
	MathNet_Numerics_Distributions_NormalGamma __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NormalGamma_Sample_1(
	System_Random rnd,
	double meanLocation,
	double meanScale,
	double precisionShape,
	double precisionInverseScale,
	MathNet_Numerics_Distributions_MeanPrecisionPair * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_NormalGamma_Samples_1(
	System_Random rnd,
	double meanLocation,
	double meanScale,
	double precisionShape,
	double precisionInvScale,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Distributions.Wishart
int CVIFUNC MathNet_Numerics_Distributions_Wishart__Create(
	MathNet_Numerics_Distributions_Wishart * __instance,
	double nu,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 s,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Wishart_Get_Nu(
	MathNet_Numerics_Distributions_Wishart __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Wishart_Set_Nu(
	MathNet_Numerics_Distributions_Wishart __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Wishart_Get_S(
	MathNet_Numerics_Distributions_Wishart __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Wishart_Set_S(
	MathNet_Numerics_Distributions_Wishart __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Wishart_Get_RandomSource(
	MathNet_Numerics_Distributions_Wishart __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Wishart_Set_RandomSource(
	MathNet_Numerics_Distributions_Wishart __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Wishart_Get_Mean(
	MathNet_Numerics_Distributions_Wishart __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Wishart_Get_Mode(
	MathNet_Numerics_Distributions_Wishart __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Wishart_Get_Variance(
	MathNet_Numerics_Distributions_Wishart __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Wishart_ToString(
	MathNet_Numerics_Distributions_Wishart __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Wishart_Density(
	MathNet_Numerics_Distributions_Wishart __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Wishart_Sample(
	MathNet_Numerics_Distributions_Wishart __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Distributions_Wishart_Sample_1(
	System_Random rnd,
	double nu,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 s,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Financial.AbsoluteReturnMeasures
int CVIFUNC MathNet_Numerics_Financial_AbsoluteReturnMeasures_CompoundMonthlyReturn(
	System_Collections_Generic_IEnumerable_T1 data,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Financial_AbsoluteReturnMeasures_GainMean(
	System_Collections_Generic_IEnumerable_T1 data,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Financial_AbsoluteReturnMeasures_LossMean(
	System_Collections_Generic_IEnumerable_T1 data,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Financial.AbsoluteRiskMeasures
int CVIFUNC MathNet_Numerics_Financial_AbsoluteRiskMeasures_GainStandardDeviation(
	System_Collections_Generic_IEnumerable_T1 data,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Financial_AbsoluteRiskMeasures_LossStandardDeviation(
	System_Collections_Generic_IEnumerable_T1 data,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Financial_AbsoluteRiskMeasures_DownsideDeviation(
	System_Collections_Generic_IEnumerable_T1 data,
	double minimalAcceptableReturn,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Financial_AbsoluteRiskMeasures_SemiDeviation(
	System_Collections_Generic_IEnumerable_T1 data,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Financial_AbsoluteRiskMeasures_GainLossRatio(
	System_Collections_Generic_IEnumerable_T1 data,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteFourierTransform
int CVIFUNC MathNet_Numerics_IntegralTransforms_Algorithms_DiscreteFourierTransform__Create(
	MathNet_Numerics_IntegralTransforms_Algorithms_DiscreteFourierTransform * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_IntegralTransforms_Algorithms_DiscreteFourierTransform_BluesteinForward(
	MathNet_Numerics_IntegralTransforms_Algorithms_DiscreteFourierTransform __instance,
	System_Numerics_Complex * samples,
	ssize_t __samplesLength,
	MathNet_Numerics_IntegralTransforms_FourierOptions options,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_IntegralTransforms_Algorithms_DiscreteFourierTransform_BluesteinInverse(
	MathNet_Numerics_IntegralTransforms_Algorithms_DiscreteFourierTransform __instance,
	System_Numerics_Complex * samples,
	ssize_t __samplesLength,
	MathNet_Numerics_IntegralTransforms_FourierOptions options,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_IntegralTransforms_Algorithms_DiscreteFourierTransform_NaiveForward(
	MathNet_Numerics_IntegralTransforms_Algorithms_DiscreteFourierTransform __instance,
	System_Numerics_Complex * timeSpace,
	ssize_t __timeSpaceLength,
	MathNet_Numerics_IntegralTransforms_FourierOptions options,
	System_Numerics_Complex ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_IntegralTransforms_Algorithms_DiscreteFourierTransform_NaiveInverse(
	MathNet_Numerics_IntegralTransforms_Algorithms_DiscreteFourierTransform __instance,
	System_Numerics_Complex * frequencySpace,
	ssize_t __frequencySpaceLength,
	MathNet_Numerics_IntegralTransforms_FourierOptions options,
	System_Numerics_Complex ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_IntegralTransforms_Algorithms_DiscreteFourierTransform_Radix2Forward(
	MathNet_Numerics_IntegralTransforms_Algorithms_DiscreteFourierTransform __instance,
	System_Numerics_Complex * samples,
	ssize_t __samplesLength,
	MathNet_Numerics_IntegralTransforms_FourierOptions options,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_IntegralTransforms_Algorithms_DiscreteFourierTransform_Radix2Inverse(
	MathNet_Numerics_IntegralTransforms_Algorithms_DiscreteFourierTransform __instance,
	System_Numerics_Complex * samples,
	ssize_t __samplesLength,
	MathNet_Numerics_IntegralTransforms_FourierOptions options,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteHartleyTransform
int CVIFUNC MathNet_Numerics_IntegralTransforms_Algorithms_DiscreteHartleyTransform__Create(
	MathNet_Numerics_IntegralTransforms_Algorithms_DiscreteHartleyTransform * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_IntegralTransforms_Algorithms_DiscreteHartleyTransform_NaiveForward(
	MathNet_Numerics_IntegralTransforms_Algorithms_DiscreteHartleyTransform __instance,
	double * timeSpace,
	ssize_t __timeSpaceLength,
	MathNet_Numerics_IntegralTransforms_HartleyOptions options,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_IntegralTransforms_Algorithms_DiscreteHartleyTransform_NaiveInverse(
	MathNet_Numerics_IntegralTransforms_Algorithms_DiscreteHartleyTransform __instance,
	double * frequencySpace,
	ssize_t __frequencySpaceLength,
	MathNet_Numerics_IntegralTransforms_HartleyOptions options,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.IntegralTransforms.Transform
int CVIFUNC MathNet_Numerics_IntegralTransforms_Transform_FourierForward(
	System_Numerics_Complex * samples,
	ssize_t __samplesLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_IntegralTransforms_Transform_FourierForward_1(
	System_Numerics_Complex * samples,
	ssize_t __samplesLength,
	MathNet_Numerics_IntegralTransforms_FourierOptions options,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_IntegralTransforms_Transform_FourierInverse(
	System_Numerics_Complex * samples,
	ssize_t __samplesLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_IntegralTransforms_Transform_FourierInverse_1(
	System_Numerics_Complex * samples,
	ssize_t __samplesLength,
	MathNet_Numerics_IntegralTransforms_FourierOptions options,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Integration.Algorithms.DoubleExponentialTransformation
int CVIFUNC MathNet_Numerics_Integration_Algorithms_DoubleExponentialTransformation__Create(
	MathNet_Numerics_Integration_Algorithms_DoubleExponentialTransformation * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Integration_Algorithms_DoubleExponentialTransformation_Integrate(
	MathNet_Numerics_Integration_Algorithms_DoubleExponentialTransformation __instance,
	System_Func_T2 f,
	double intervalBegin,
	double intervalEnd,
	double targetRelativeError,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Integration.Algorithms.NewtonCotesTrapeziumRule
int CVIFUNC MathNet_Numerics_Integration_Algorithms_NewtonCotesTrapeziumRule_IntegrateTwoPoint(
	System_Func_T2 f,
	double intervalBegin,
	double intervalEnd,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Integration_Algorithms_NewtonCotesTrapeziumRule_IntegrateComposite(
	System_Func_T2 f,
	double intervalBegin,
	double intervalEnd,
	int numberOfPartitions,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Integration_Algorithms_NewtonCotesTrapeziumRule_IntegrateAdaptive(
	System_Func_T2 f,
	double intervalBegin,
	double intervalEnd,
	double targetError,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Integration_Algorithms_NewtonCotesTrapeziumRule_IntegrateAdaptiveTransformedOdd(
	System_Func_T2 f,
	double intervalBegin,
	double intervalEnd,
	System_Collections_Generic_IEnumerable_T1 levelAbscissas,
	System_Collections_Generic_IEnumerable_T1 levelWeights,
	double levelOneStep,
	double targetRelativeError,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Integration.Algorithms.SimpsonRule
int CVIFUNC MathNet_Numerics_Integration_Algorithms_SimpsonRule_IntegrateThreePoint(
	System_Func_T2 f,
	double intervalBegin,
	double intervalEnd,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Integration_Algorithms_SimpsonRule_IntegrateComposite(
	System_Func_T2 f,
	double intervalBegin,
	double intervalEnd,
	int numberOfPartitions,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Integration.Integrate
int CVIFUNC MathNet_Numerics_Integration_Integrate_OnClosedInterval(
	System_Func_T2 f,
	double intervalBegin,
	double intervalEnd,
	double targetAbsoluteError,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Integration_Integrate_OnClosedInterval_1(
	System_Func_T2 f,
	double intervalBegin,
	double intervalEnd,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Interpolation.IInterpolation
int CVIFUNC MathNet_Numerics_Interpolation_IInterpolation_Get_SupportsDifferentiation(
	MathNet_Numerics_Interpolation_IInterpolation __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_IInterpolation_Get_SupportsIntegration(
	MathNet_Numerics_Interpolation_IInterpolation __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_IInterpolation_Interpolate(
	MathNet_Numerics_Interpolation_IInterpolation __instance,
	double t,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_IInterpolation_Differentiate(
	MathNet_Numerics_Interpolation_IInterpolation __instance,
	double t,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_IInterpolation_Differentiate_1(
	MathNet_Numerics_Interpolation_IInterpolation __instance,
	double t,
	double * interpolatedValue,
	double * secondDerivative,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_IInterpolation_Integrate(
	MathNet_Numerics_Interpolation_IInterpolation __instance,
	double t,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_AkimaSplineInterpolation__Create(
	MathNet_Numerics_Interpolation_Algorithms_AkimaSplineInterpolation * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_AkimaSplineInterpolation__Create_1(
	MathNet_Numerics_Interpolation_Algorithms_AkimaSplineInterpolation * __instance,
	System_Collections_Generic_IList_T1 samplePoints,
	System_Collections_Generic_IList_T1 sampleValues,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_AkimaSplineInterpolation_Initialize(
	MathNet_Numerics_Interpolation_Algorithms_AkimaSplineInterpolation __instance,
	System_Collections_Generic_IList_T1 samplePoints,
	System_Collections_Generic_IList_T1 sampleValues,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_AkimaSplineInterpolation_EvaluateSplineDerivatives(
	System_Collections_Generic_IList_T1 samplePoints,
	System_Collections_Generic_IList_T1 sampleValues,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_AkimaSplineInterpolation_EvaluateSplineCoefficients(
	System_Collections_Generic_IList_T1 samplePoints,
	System_Collections_Generic_IList_T1 sampleValues,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_AkimaSplineInterpolation_Interpolate(
	MathNet_Numerics_Interpolation_Algorithms_AkimaSplineInterpolation __instance,
	double t,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_AkimaSplineInterpolation_Differentiate(
	MathNet_Numerics_Interpolation_Algorithms_AkimaSplineInterpolation __instance,
	double t,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_AkimaSplineInterpolation_Differentiate_1(
	MathNet_Numerics_Interpolation_Algorithms_AkimaSplineInterpolation __instance,
	double t,
	double * interpolatedValue,
	double * secondDerivative,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_AkimaSplineInterpolation_Integrate(
	MathNet_Numerics_Interpolation_Algorithms_AkimaSplineInterpolation __instance,
	double t,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Interpolation.Algorithms.BarycentricInterpolation
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_BarycentricInterpolation__Create(
	MathNet_Numerics_Interpolation_Algorithms_BarycentricInterpolation * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_BarycentricInterpolation__Create_1(
	MathNet_Numerics_Interpolation_Algorithms_BarycentricInterpolation * __instance,
	System_Collections_Generic_IList_T1 samplePoints,
	System_Collections_Generic_IList_T1 sampleValues,
	System_Collections_Generic_IList_T1 barycentricWeights,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_BarycentricInterpolation_Initialize(
	MathNet_Numerics_Interpolation_Algorithms_BarycentricInterpolation __instance,
	System_Collections_Generic_IList_T1 samplePoints,
	System_Collections_Generic_IList_T1 sampleValues,
	System_Collections_Generic_IList_T1 barycentricWeights,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_BarycentricInterpolation_Interpolate(
	MathNet_Numerics_Interpolation_Algorithms_BarycentricInterpolation __instance,
	double t,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Interpolation.Algorithms.BulirschStoerRationalInterpolation
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_BulirschStoerRationalInterpolation__Create(
	MathNet_Numerics_Interpolation_Algorithms_BulirschStoerRationalInterpolation * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_BulirschStoerRationalInterpolation__Create_1(
	MathNet_Numerics_Interpolation_Algorithms_BulirschStoerRationalInterpolation * __instance,
	System_Collections_Generic_IList_T1 samplePoints,
	System_Collections_Generic_IList_T1 sampleValues,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_BulirschStoerRationalInterpolation_Initialize(
	MathNet_Numerics_Interpolation_Algorithms_BulirschStoerRationalInterpolation __instance,
	System_Collections_Generic_IList_T1 samplePoints,
	System_Collections_Generic_IList_T1 sampleValues,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_BulirschStoerRationalInterpolation_Interpolate(
	MathNet_Numerics_Interpolation_Algorithms_BulirschStoerRationalInterpolation __instance,
	double t,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_CubicHermiteSplineInterpolation__Create(
	MathNet_Numerics_Interpolation_Algorithms_CubicHermiteSplineInterpolation * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_CubicHermiteSplineInterpolation__Create_1(
	MathNet_Numerics_Interpolation_Algorithms_CubicHermiteSplineInterpolation * __instance,
	System_Collections_Generic_IList_T1 samplePoints,
	System_Collections_Generic_IList_T1 sampleValues,
	System_Collections_Generic_IList_T1 sampleDerivatives,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_CubicHermiteSplineInterpolation_Initialize(
	MathNet_Numerics_Interpolation_Algorithms_CubicHermiteSplineInterpolation __instance,
	System_Collections_Generic_IList_T1 samplePoints,
	System_Collections_Generic_IList_T1 sampleValues,
	System_Collections_Generic_IList_T1 sampleDerivatives,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_CubicHermiteSplineInterpolation_EvaluateSplineCoefficients(
	System_Collections_Generic_IList_T1 samplePoints,
	System_Collections_Generic_IList_T1 sampleValues,
	System_Collections_Generic_IList_T1 sampleDerivatives,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_CubicHermiteSplineInterpolation_Interpolate(
	MathNet_Numerics_Interpolation_Algorithms_CubicHermiteSplineInterpolation __instance,
	double t,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_CubicHermiteSplineInterpolation_Differentiate(
	MathNet_Numerics_Interpolation_Algorithms_CubicHermiteSplineInterpolation __instance,
	double t,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_CubicHermiteSplineInterpolation_Differentiate_1(
	MathNet_Numerics_Interpolation_Algorithms_CubicHermiteSplineInterpolation __instance,
	double t,
	double * interpolatedValue,
	double * secondDerivative,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_CubicHermiteSplineInterpolation_Integrate(
	MathNet_Numerics_Interpolation_Algorithms_CubicHermiteSplineInterpolation __instance,
	double t,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_CubicSplineInterpolation__Create(
	MathNet_Numerics_Interpolation_Algorithms_CubicSplineInterpolation * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_CubicSplineInterpolation__Create_1(
	MathNet_Numerics_Interpolation_Algorithms_CubicSplineInterpolation * __instance,
	System_Collections_Generic_IList_T1 samplePoints,
	System_Collections_Generic_IList_T1 sampleValues,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_CubicSplineInterpolation__Create_2(
	MathNet_Numerics_Interpolation_Algorithms_CubicSplineInterpolation * __instance,
	System_Collections_Generic_IList_T1 samplePoints,
	System_Collections_Generic_IList_T1 sampleValues,
	MathNet_Numerics_Interpolation_SplineBoundaryCondition leftBoundaryCondition,
	double leftBoundary,
	MathNet_Numerics_Interpolation_SplineBoundaryCondition rightBoundaryCondition,
	double rightBoundary,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_CubicSplineInterpolation_Initialize(
	MathNet_Numerics_Interpolation_Algorithms_CubicSplineInterpolation __instance,
	System_Collections_Generic_IList_T1 samplePoints,
	System_Collections_Generic_IList_T1 sampleValues,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_CubicSplineInterpolation_Initialize_1(
	MathNet_Numerics_Interpolation_Algorithms_CubicSplineInterpolation __instance,
	System_Collections_Generic_IList_T1 samplePoints,
	System_Collections_Generic_IList_T1 sampleValues,
	MathNet_Numerics_Interpolation_SplineBoundaryCondition leftBoundaryCondition,
	double leftBoundary,
	MathNet_Numerics_Interpolation_SplineBoundaryCondition rightBoundaryCondition,
	double rightBoundary,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_CubicSplineInterpolation_EvaluateSplineDerivatives(
	System_Collections_Generic_IList_T1 samplePoints,
	System_Collections_Generic_IList_T1 sampleValues,
	MathNet_Numerics_Interpolation_SplineBoundaryCondition leftBoundaryCondition,
	double leftBoundary,
	MathNet_Numerics_Interpolation_SplineBoundaryCondition rightBoundaryCondition,
	double rightBoundary,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_CubicSplineInterpolation_EvaluateSplineCoefficients(
	System_Collections_Generic_IList_T1 samplePoints,
	System_Collections_Generic_IList_T1 sampleValues,
	MathNet_Numerics_Interpolation_SplineBoundaryCondition leftBoundaryCondition,
	double leftBoundary,
	MathNet_Numerics_Interpolation_SplineBoundaryCondition rightBoundaryCondition,
	double rightBoundary,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_CubicSplineInterpolation_Interpolate(
	MathNet_Numerics_Interpolation_Algorithms_CubicSplineInterpolation __instance,
	double t,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_CubicSplineInterpolation_Differentiate(
	MathNet_Numerics_Interpolation_Algorithms_CubicSplineInterpolation __instance,
	double t,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_CubicSplineInterpolation_Differentiate_1(
	MathNet_Numerics_Interpolation_Algorithms_CubicSplineInterpolation __instance,
	double t,
	double * interpolatedValue,
	double * secondDerivative,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_CubicSplineInterpolation_Integrate(
	MathNet_Numerics_Interpolation_Algorithms_CubicSplineInterpolation __instance,
	double t,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_EquidistantPolynomialInterpolation__Create(
	MathNet_Numerics_Interpolation_Algorithms_EquidistantPolynomialInterpolation * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_EquidistantPolynomialInterpolation__Create_1(
	MathNet_Numerics_Interpolation_Algorithms_EquidistantPolynomialInterpolation * __instance,
	double leftBound,
	double rightBound,
	System_Collections_Generic_IList_T1 sampleValues,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_EquidistantPolynomialInterpolation__Create_2(
	MathNet_Numerics_Interpolation_Algorithms_EquidistantPolynomialInterpolation * __instance,
	System_Collections_Generic_IList_T1 samplePoints,
	System_Collections_Generic_IList_T1 sampleValues,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_EquidistantPolynomialInterpolation_Initialize(
	MathNet_Numerics_Interpolation_Algorithms_EquidistantPolynomialInterpolation __instance,
	double leftBound,
	double rightBound,
	System_Collections_Generic_IList_T1 sampleValues,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_EquidistantPolynomialInterpolation_Initialize_1(
	MathNet_Numerics_Interpolation_Algorithms_EquidistantPolynomialInterpolation __instance,
	System_Collections_Generic_IList_T1 samplePoints,
	System_Collections_Generic_IList_T1 sampleValues,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_EquidistantPolynomialInterpolation_EvaluateBarycentricWeights(
	int sampleCount,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_EquidistantPolynomialInterpolation_Interpolate(
	MathNet_Numerics_Interpolation_Algorithms_EquidistantPolynomialInterpolation __instance,
	double t,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Interpolation.Algorithms.FloaterHormannRationalInterpolation
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_FloaterHormannRationalInterpolation__Create(
	MathNet_Numerics_Interpolation_Algorithms_FloaterHormannRationalInterpolation * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_FloaterHormannRationalInterpolation__Create_1(
	MathNet_Numerics_Interpolation_Algorithms_FloaterHormannRationalInterpolation * __instance,
	System_Collections_Generic_IList_T1 samplePoints,
	System_Collections_Generic_IList_T1 sampleValues,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_FloaterHormannRationalInterpolation__Create_2(
	MathNet_Numerics_Interpolation_Algorithms_FloaterHormannRationalInterpolation * __instance,
	System_Collections_Generic_IList_T1 samplePoints,
	System_Collections_Generic_IList_T1 sampleValues,
	int order,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_FloaterHormannRationalInterpolation_Initialize(
	MathNet_Numerics_Interpolation_Algorithms_FloaterHormannRationalInterpolation __instance,
	System_Collections_Generic_IList_T1 samplePoints,
	System_Collections_Generic_IList_T1 sampleValues,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_FloaterHormannRationalInterpolation_Initialize_1(
	MathNet_Numerics_Interpolation_Algorithms_FloaterHormannRationalInterpolation __instance,
	System_Collections_Generic_IList_T1 samplePoints,
	System_Collections_Generic_IList_T1 sampleValues,
	int order,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_FloaterHormannRationalInterpolation_EvaluateBarycentricWeights(
	System_Collections_Generic_IList_T1 samplePoints,
	System_Collections_Generic_IList_T1 sampleValues,
	int order,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_FloaterHormannRationalInterpolation_Interpolate(
	MathNet_Numerics_Interpolation_Algorithms_FloaterHormannRationalInterpolation __instance,
	double t,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_LinearSplineInterpolation__Create(
	MathNet_Numerics_Interpolation_Algorithms_LinearSplineInterpolation * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_LinearSplineInterpolation__Create_1(
	MathNet_Numerics_Interpolation_Algorithms_LinearSplineInterpolation * __instance,
	System_Collections_Generic_IList_T1 samplePoints,
	System_Collections_Generic_IList_T1 sampleValues,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_LinearSplineInterpolation_Initialize(
	MathNet_Numerics_Interpolation_Algorithms_LinearSplineInterpolation __instance,
	System_Collections_Generic_IList_T1 samplePoints,
	System_Collections_Generic_IList_T1 sampleValues,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_LinearSplineInterpolation_EvaluateSplineCoefficients(
	System_Collections_Generic_IList_T1 samplePoints,
	System_Collections_Generic_IList_T1 sampleValues,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_LinearSplineInterpolation_Interpolate(
	MathNet_Numerics_Interpolation_Algorithms_LinearSplineInterpolation __instance,
	double t,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_LinearSplineInterpolation_Differentiate(
	MathNet_Numerics_Interpolation_Algorithms_LinearSplineInterpolation __instance,
	double t,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_LinearSplineInterpolation_Differentiate_1(
	MathNet_Numerics_Interpolation_Algorithms_LinearSplineInterpolation __instance,
	double t,
	double * interpolatedValue,
	double * secondDerivative,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_LinearSplineInterpolation_Integrate(
	MathNet_Numerics_Interpolation_Algorithms_LinearSplineInterpolation __instance,
	double t,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Interpolation.Algorithms.NevillePolynomialInterpolation
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_NevillePolynomialInterpolation__Create(
	MathNet_Numerics_Interpolation_Algorithms_NevillePolynomialInterpolation * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_NevillePolynomialInterpolation__Create_1(
	MathNet_Numerics_Interpolation_Algorithms_NevillePolynomialInterpolation * __instance,
	System_Collections_Generic_IList_T1 samplePoints,
	System_Collections_Generic_IList_T1 sampleValues,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_NevillePolynomialInterpolation_Initialize(
	MathNet_Numerics_Interpolation_Algorithms_NevillePolynomialInterpolation __instance,
	System_Collections_Generic_IList_T1 samplePoints,
	System_Collections_Generic_IList_T1 sampleValues,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_NevillePolynomialInterpolation_Interpolate(
	MathNet_Numerics_Interpolation_Algorithms_NevillePolynomialInterpolation __instance,
	double t,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_NevillePolynomialInterpolation_Differentiate(
	MathNet_Numerics_Interpolation_Algorithms_NevillePolynomialInterpolation __instance,
	double t,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_NevillePolynomialInterpolation_Differentiate_1(
	MathNet_Numerics_Interpolation_Algorithms_NevillePolynomialInterpolation __instance,
	double t,
	double * interpolatedValue,
	double * secondDerivative,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_SplineInterpolation__Create(
	MathNet_Numerics_Interpolation_Algorithms_SplineInterpolation * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_SplineInterpolation__Create_1(
	MathNet_Numerics_Interpolation_Algorithms_SplineInterpolation * __instance,
	System_Collections_Generic_IList_T1 samplePoints,
	System_Collections_Generic_IList_T1 splineCoefficients,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_SplineInterpolation_Initialize(
	MathNet_Numerics_Interpolation_Algorithms_SplineInterpolation __instance,
	System_Collections_Generic_IList_T1 samplePoints,
	System_Collections_Generic_IList_T1 splineCoefficients,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_SplineInterpolation_Interpolate(
	MathNet_Numerics_Interpolation_Algorithms_SplineInterpolation __instance,
	double t,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_SplineInterpolation_Differentiate(
	MathNet_Numerics_Interpolation_Algorithms_SplineInterpolation __instance,
	double t,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_SplineInterpolation_Differentiate_1(
	MathNet_Numerics_Interpolation_Algorithms_SplineInterpolation __instance,
	double t,
	double * interpolatedValue,
	double * secondDerivative,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Algorithms_SplineInterpolation_Integrate(
	MathNet_Numerics_Interpolation_Algorithms_SplineInterpolation __instance,
	double t,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Interpolation.Interpolate
int CVIFUNC MathNet_Numerics_Interpolation_Interpolate_Common(
	System_Collections_Generic_IList_T1 points,
	System_Collections_Generic_IList_T1 values,
	MathNet_Numerics_Interpolation_IInterpolation * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Interpolate_LinearBetweenPoints(
	System_Collections_Generic_IList_T1 points,
	System_Collections_Generic_IList_T1 values,
	MathNet_Numerics_Interpolation_IInterpolation * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Interpolate_RationalWithoutPoles(
	System_Collections_Generic_IList_T1 points,
	System_Collections_Generic_IList_T1 values,
	MathNet_Numerics_Interpolation_IInterpolation * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Interpolation_Interpolate_RationalWithPoles(
	System_Collections_Generic_IList_T1 points,
	System_Collections_Generic_IList_T1 values,
	MathNet_Numerics_Interpolation_IInterpolation * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Generic.Matrix`1
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Get_Storage(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Get_ColumnCount(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Get_RowCount(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Get_Item(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	int row,
	int column,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Set_Item(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	int row,
	int column,
	void * value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Get_IsSymmetric(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_StrictlyLowerTriangle(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_StrictlyLowerTriangle_1(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_StrictlyUpperTriangle(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_StrictlyUpperTriangle_1(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_InsertColumn(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	int columnIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 column,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_SetColumn(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	int columnIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 column,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_SetColumn_1(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	int columnIndex,
	void * column,
	ssize_t __columnLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_InsertRow(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	int rowIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 row,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_SetRow(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	int rowIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 row,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_SetRow_1(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	int rowIndex,
	void * row,
	ssize_t __rowLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_SetSubMatrix(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 subMatrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_SetDiagonal(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 source,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_SetDiagonal_1(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	void * source,
	ssize_t __sourceLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Transpose(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_ConjugateTranspose(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_PermuteRows(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_Permutation p,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_PermuteColumns(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_Permutation p,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Append(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 right,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Append_1(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 right,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Stack(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Stack_1(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_DiagonalStack(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_DiagonalStack_1(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_L1Norm(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_L2Norm(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_FrobeniusNorm(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_InfinityNorm(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_ColumnEnumerator(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_ColumnEnumerator_1(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	int index,
	int length,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_RowEnumerator(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	int index,
	int length,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_RowEnumerator_1(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_IndexedEnumerator(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_ToArray(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	void * __returnValue,
	ssize_t * ____returnValueLength1,
	ssize_t * ____returnValueLength2,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_ToColumnWiseArray(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	void * __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_ToRowWiseArray(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	void * __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_MapInplace(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	System_Func_T2 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_MapIndexedInplace(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	System_Func_T4 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Add(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Add_1(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Subtract(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Subtract_1(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Multiply(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	void * scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Multiply_1(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	void * scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Divide(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	void * scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Divide_1(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	void * scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Multiply_2(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Multiply_3(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_LeftMultiply(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_LeftMultiply_1(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Multiply_4(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Multiply_5(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_TransposeAndMultiply(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_TransposeAndMultiply_1(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_TransposeThisAndMultiply(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_TransposeThisAndMultiply_1(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_TransposeThisAndMultiply_2(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_TransposeThisAndMultiply_3(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Negate(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Negate_1(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Conjugate(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Conjugate_1(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_PointwiseMultiply(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_PointwiseMultiply_1(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_PointwiseDivide(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_PointwiseDivide_1(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Modulus(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	void * divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Modulus_1(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	void * divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_op_UnaryPlus(
	char * T,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_op_UnaryNegation(
	char * T,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_op_Addition(
	char * T,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_op_Subtraction(
	char * T,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_op_Multiply(
	char * T,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 leftSide,
	void * rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_op_Multiply_1(
	char * T,
	void * leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_op_Multiply_2(
	char * T,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_op_Multiply_3(
	char * T,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_op_Multiply_4(
	char * T,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_op_Modulus(
	char * T,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 leftSide,
	void * rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Trace(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Rank(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_ConditionNumber(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Determinant(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Inverse(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_KroneckerProduct(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_KroneckerProduct_1(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_NormalizeColumns(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	int p,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_NormalizeRows(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	int p,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_DimensionsDontMatch(
	char * T,
	char * TException,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 left,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 right,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	char * paramName,
	System_Exception * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_DimensionsDontMatch_1(
	char * T,
	char * TException,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 left,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 right,
	char * paramName,
	System_Exception * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_DimensionsDontMatch_2(
	char * T,
	char * TException,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	System_Exception * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_DimensionsDontMatch_3(
	char * T,
	char * TException,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 left,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 right,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	char * paramName,
	System_Exception * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_DimensionsDontMatch_4(
	char * T,
	char * TException,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 left,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 right,
	char * paramName,
	System_Exception * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_DimensionsDontMatch_5(
	char * T,
	char * TException,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 left,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 right,
	char * paramName,
	System_Exception * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_DimensionsDontMatch_6(
	char * T,
	char * TException,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 left,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 right,
	char * paramName,
	System_Exception * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Equals(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Equals_1(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_GetHashCode(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_ToTypeString(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_ToMatrixString(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	int maxRows,
	int maxColumns,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_ToMatrixString_1(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	int maxRows,
	int maxColumns,
	int padding,
	char * format,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_ToString(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	int maxRows,
	int maxColumns,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_ToString_1(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_ToString_2(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	char * format,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_CreateFromColumns(
	char * T,
	System_Collections_Generic_IList_T1 columnVectors,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_CreateFromRows(
	char * T,
	System_Collections_Generic_IList_T1 rowVectors,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_At(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	int row,
	int column,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_At_1(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	int row,
	int column,
	void * value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Clear(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_ClearColumn(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	int columnIndex,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_ClearRow(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	int rowIndex,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_ClearSubMatrix(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Clone(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_CopyTo(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 target,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_CreateMatrix(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	int numberOfRows,
	int numberOfColumns,
	int fullyMutable,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_CreateVector(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	int size,
	int fullyMutable,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Row(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Row_1(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Row_2(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	int rowIndex,
	int columnIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Row_3(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	int rowIndex,
	int columnIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Column(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Column_1(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Column_2(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	int columnIndex,
	int rowIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Column_3(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	int columnIndex,
	int rowIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_UpperTriangle(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_LowerTriangle(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_LowerTriangle_1(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_UpperTriangle_1(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_SubMatrix(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1_Diagonal(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.Matrix
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Get_Storage(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Get_ColumnCount(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Get_RowCount(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Get_Item(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	int row,
	int column,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Set_Item(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	int row,
	int column,
	MathNet_Numerics_Complex32 value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Get_IsSymmetric(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_L1Norm(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_ConjugateTranspose(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_FrobeniusNorm(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_InfinityNorm(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Trace(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_StrictlyLowerTriangle(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_StrictlyLowerTriangle_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_StrictlyUpperTriangle(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_StrictlyUpperTriangle_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_InsertColumn(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	int columnIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 column,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_SetColumn(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	int columnIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 column,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_SetColumn_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	int columnIndex,
	MathNet_Numerics_Complex32 * column,
	ssize_t __columnLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_InsertRow(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	int rowIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 row,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_SetRow(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	int rowIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 row,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_SetRow_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	int rowIndex,
	MathNet_Numerics_Complex32 * row,
	ssize_t __rowLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_SetSubMatrix(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 subMatrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_SetDiagonal(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 source,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_SetDiagonal_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_Complex32 * source,
	ssize_t __sourceLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Transpose(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_PermuteRows(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_Permutation p,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_PermuteColumns(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_Permutation p,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Append(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 right,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Append_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 right,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Stack(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Stack_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_DiagonalStack(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_DiagonalStack_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_L2Norm(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_ColumnEnumerator(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_ColumnEnumerator_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	int index,
	int length,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_RowEnumerator(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	int index,
	int length,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_RowEnumerator_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_IndexedEnumerator(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_ToArray(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_Complex32 ** __returnValue,
	ssize_t * ____returnValueLength1,
	ssize_t * ____returnValueLength2,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_ToColumnWiseArray(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_Complex32 ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_ToRowWiseArray(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_Complex32 ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_MapInplace(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	System_Func_T2 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_MapIndexedInplace(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	System_Func_T4 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Add(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Add_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Subtract(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Subtract_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Multiply(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_Complex32 scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Multiply_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_Complex32 scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Divide(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_Complex32 scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Divide_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_Complex32 scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Multiply_2(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Multiply_3(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_LeftMultiply(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_LeftMultiply_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Multiply_4(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Multiply_5(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_TransposeAndMultiply(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_TransposeAndMultiply_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_TransposeThisAndMultiply(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_TransposeThisAndMultiply_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_TransposeThisAndMultiply_2(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_TransposeThisAndMultiply_3(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Negate(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Negate_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Conjugate(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Conjugate_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_PointwiseMultiply(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_PointwiseMultiply_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_PointwiseDivide(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_PointwiseDivide_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Modulus(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_Complex32 divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Modulus_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_Complex32 divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Rank(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_ConditionNumber(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Inverse(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_KroneckerProduct(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_KroneckerProduct_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_NormalizeColumns(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	int p,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_NormalizeRows(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	int p,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Equals(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Equals_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_GetHashCode(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_ToTypeString(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_ToMatrixString(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	int maxRows,
	int maxColumns,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_ToMatrixString_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	int maxRows,
	int maxColumns,
	int padding,
	char * format,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_ToString(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	int maxRows,
	int maxColumns,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_ToString_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_ToString_2(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	char * format,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_At(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	int row,
	int column,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_At_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	int row,
	int column,
	MathNet_Numerics_Complex32 value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Clear(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_ClearColumn(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	int columnIndex,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_ClearRow(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	int rowIndex,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_ClearSubMatrix(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Clone(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_CopyTo(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 target,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_CreateMatrix(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	int numberOfRows,
	int numberOfColumns,
	int fullyMutable,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_CreateVector(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	int size,
	int fullyMutable,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Row(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Row_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Row_2(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	int rowIndex,
	int columnIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Row_3(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	int rowIndex,
	int columnIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Column(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Column_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Column_2(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	int columnIndex,
	int rowIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Column_3(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	int columnIndex,
	int rowIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_UpperTriangle(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_LowerTriangle(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_LowerTriangle_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_UpperTriangle_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_SubMatrix(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Matrix_Diagonal(
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix__Create(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix * __instance,
	MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1 storage,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix__Create_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix * __instance,
	int order,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix__Create_2(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix * __instance,
	int rows,
	int columns,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix__Create_3(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix * __instance,
	int rows,
	int columns,
	MathNet_Numerics_Complex32 * storage,
	ssize_t __storageLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix__Create_4(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix * __instance,
	int rows,
	int columns,
	MathNet_Numerics_Complex32 value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix__Create_5(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix * __instance,
	MathNet_Numerics_Complex32 * array,
	ssize_t __arrayLength1,
	ssize_t __arrayLength2,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix__Create_6(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Get_Data(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_Complex32 ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Get_Values(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_Complex32 ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Get_Storage(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Get_ColumnCount(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Get_RowCount(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Get_Item(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	int row,
	int column,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Set_Item(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	int row,
	int column,
	MathNet_Numerics_Complex32 value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Get_IsSymmetric(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_OfMatrix(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_OfArray(
	MathNet_Numerics_Complex32 * array,
	ssize_t __arrayLength1,
	ssize_t __arrayLength2,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_OfIndexed(
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 enumerable,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_OfColumnMajor(
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 columnMajor,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_OfColumns(
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_OfColumnsCovariant(
	char * TColumn,
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_OfRows(
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_OfRowsCovariant(
	char * TRow,
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Create(
	int rows,
	int columns,
	System_Func_T3 init,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_CreateRandom(
	int rows,
	int columns,
	MathNet_Numerics_Distributions_IContinuousDistribution distribution,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_CreateMatrix(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	int numberOfRows,
	int numberOfColumns,
	int fullyMutable,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_CreateVector(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	int size,
	int fullyMutable,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Transpose(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_L1Norm(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_FrobeniusNorm(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_InfinityNorm(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Identity(
	int order,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_ConjugateTranspose(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Trace(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_op_Addition(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix leftSide,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_op_UnaryPlus(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_op_Subtraction(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix leftSide,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_op_UnaryNegation(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_op_Multiply(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix leftSide,
	MathNet_Numerics_Complex32 rightSide,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_op_Multiply_1(
	MathNet_Numerics_Complex32 leftSide,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_op_Multiply_2(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix leftSide,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_op_Multiply_3(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix leftSide,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector rightSide,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_op_Multiply_4(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector leftSide,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_op_Modulus(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix leftSide,
	MathNet_Numerics_Complex32 rightSide,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_StrictlyLowerTriangle(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_StrictlyLowerTriangle_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_StrictlyUpperTriangle(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_StrictlyUpperTriangle_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_InsertColumn(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	int columnIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 column,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_SetColumn(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	int columnIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 column,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_SetColumn_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	int columnIndex,
	MathNet_Numerics_Complex32 * column,
	ssize_t __columnLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_InsertRow(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	int rowIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 row,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_SetRow(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	int rowIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 row,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_SetRow_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	int rowIndex,
	MathNet_Numerics_Complex32 * row,
	ssize_t __rowLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_SetSubMatrix(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 subMatrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_SetDiagonal(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 source,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_SetDiagonal_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_Complex32 * source,
	ssize_t __sourceLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_PermuteRows(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_Permutation p,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_PermuteColumns(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_Permutation p,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Append(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 right,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Append_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 right,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Stack(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Stack_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_DiagonalStack(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_DiagonalStack_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_L2Norm(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_ColumnEnumerator(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_ColumnEnumerator_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	int index,
	int length,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_RowEnumerator(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	int index,
	int length,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_RowEnumerator_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_IndexedEnumerator(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_ToArray(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_Complex32 ** __returnValue,
	ssize_t * ____returnValueLength1,
	ssize_t * ____returnValueLength2,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_ToColumnWiseArray(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_Complex32 ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_ToRowWiseArray(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_Complex32 ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_MapInplace(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	System_Func_T2 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_MapIndexedInplace(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	System_Func_T4 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Add(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Add_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Subtract(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Subtract_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Multiply(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_Complex32 scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Multiply_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_Complex32 scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Divide(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_Complex32 scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Divide_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_Complex32 scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Multiply_2(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Multiply_3(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_LeftMultiply(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_LeftMultiply_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Multiply_4(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Multiply_5(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_TransposeAndMultiply(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_TransposeAndMultiply_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_TransposeThisAndMultiply(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_TransposeThisAndMultiply_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_TransposeThisAndMultiply_2(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_TransposeThisAndMultiply_3(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Negate(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Negate_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Conjugate(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Conjugate_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_PointwiseMultiply(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_PointwiseMultiply_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_PointwiseDivide(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_PointwiseDivide_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Modulus(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_Complex32 divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Modulus_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_Complex32 divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Rank(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_ConditionNumber(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Inverse(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_KroneckerProduct(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_KroneckerProduct_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_NormalizeColumns(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	int p,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_NormalizeRows(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	int p,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Equals(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Equals_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_GetHashCode(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_ToTypeString(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_ToMatrixString(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	int maxRows,
	int maxColumns,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_ToMatrixString_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	int maxRows,
	int maxColumns,
	int padding,
	char * format,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_ToString(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	int maxRows,
	int maxColumns,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_ToString_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_ToString_2(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	char * format,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_At(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	int row,
	int column,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_At_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	int row,
	int column,
	MathNet_Numerics_Complex32 value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Clear(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_ClearColumn(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	int columnIndex,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_ClearRow(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	int rowIndex,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_ClearSubMatrix(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Clone(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_CopyTo(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 target,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Row(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Row_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Row_2(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	int rowIndex,
	int columnIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Row_3(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	int rowIndex,
	int columnIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Column(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Column_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Column_2(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	int columnIndex,
	int rowIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Column_3(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	int columnIndex,
	int rowIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_UpperTriangle(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_LowerTriangle(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_LowerTriangle_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_UpperTriangle_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_SubMatrix(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix_Diagonal(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Generic.Vector`1
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_Get_Storage(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_Get_Count(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_Get_Item(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	int index,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_Set_Item(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	int index,
	void * value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_Sum(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_SumMagnitudes(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_Clone(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_SetValues(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	void * values,
	ssize_t __valuesLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_CopyTo(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 target,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_SubVector(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	int index,
	int count,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_SetSubVector(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	int index,
	int count,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 subVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_CopySubVectorTo(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 destination,
	int sourceIndex,
	int targetIndex,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_CopyTo_1(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 destination,
	int sourceIndex,
	int targetIndex,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_ToArray(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	void * __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_ToColumnMatrix(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_ToRowMatrix(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_GetEnumerator(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	System_Collections_Generic_IEnumerator_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_GetIndexedEnumerator(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_MapInplace(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	System_Func_T2 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_MapIndexedInplace(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	System_Func_T3 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_Equals(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_Equals_1(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_GetHashCode(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_ToTypeString(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_ToVectorString(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	int maxLines,
	int maxPerLine,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_ToVectorString_1(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	int maxLines,
	int maxPerLine,
	int padding,
	char * format,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_ToString(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	int maxLines,
	int maxPerLine,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_ToString_1(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_ToString_2(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	char * format,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_ToString_3(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_At(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	int index,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_At_1(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	int index,
	void * value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_Clear(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_ClearSubVector(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	int index,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_CreateMatrix(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	int rows,
	int columns,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_CreateVector(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	int size,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_Add(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	void * scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_Add_1(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	void * scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_Plus(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_Add_2(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_Add_3(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_Subtract(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	void * scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_Subtract_1(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	void * scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_Negate(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_Negate_1(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_Subtract_2(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_Subtract_3(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_Conjugate(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_Conjugate_1(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_Multiply(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	void * scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_Multiply_1(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	void * scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_DotProduct(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_Divide(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	void * scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_Divide_1(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	void * scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_Modulus(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	void * divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_Modulus_1(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	void * divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_PointwiseMultiply(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_PointwiseMultiply_1(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_PointwiseDivide(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_PointwiseDivide_1(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_OuterProduct(
	char * T,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 u,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 v,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_OuterProduct_1(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 v,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_op_UnaryPlus(
	char * T,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_op_UnaryNegation(
	char * T,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_op_Addition(
	char * T,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_op_Addition_1(
	char * T,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	void * rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_op_Addition_2(
	char * T,
	void * leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_op_Subtraction(
	char * T,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_op_Subtraction_1(
	char * T,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	void * rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_op_Subtraction_2(
	char * T,
	void * leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_op_Multiply(
	char * T,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	void * rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_op_Multiply_1(
	char * T,
	void * leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_op_Multiply_2(
	char * T,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_op_Division(
	char * T,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	void * rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_op_Modulus(
	char * T,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	void * rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_Norm(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	double p,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_Normalize(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	double p,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_AbsoluteMinimum(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_AbsoluteMinimumIndex(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_AbsoluteMaximum(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_AbsoluteMaximumIndex(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_Maximum(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_MaximumIndex(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_Minimum(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Vector_T1_MinimumIndex(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.Vector
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_Get_Storage(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_Get_Count(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_Get_Item(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	int index,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_Set_Item(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	int index,
	MathNet_Numerics_Complex32 value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_AbsoluteMinimum(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_AbsoluteMinimumIndex(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_AbsoluteMaximum(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_AbsoluteMaximumIndex(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_Sum(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_SumMagnitudes(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_Norm(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	double p,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_MaximumIndex(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_MinimumIndex(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_Normalize(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	double p,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_Clone(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_SetValues(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_Complex32 * values,
	ssize_t __valuesLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_CopyTo(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 target,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_SubVector(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	int index,
	int count,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_SetSubVector(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	int index,
	int count,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 subVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_CopySubVectorTo(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 destination,
	int sourceIndex,
	int targetIndex,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_CopyTo_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 destination,
	int sourceIndex,
	int targetIndex,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_ToArray(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_Complex32 ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_ToColumnMatrix(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_ToRowMatrix(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_GetEnumerator(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	System_Collections_Generic_IEnumerator_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_GetIndexedEnumerator(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_MapInplace(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	System_Func_T2 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_MapIndexedInplace(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	System_Func_T3 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_Equals(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_Equals_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_GetHashCode(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_ToTypeString(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_ToVectorString(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	int maxLines,
	int maxPerLine,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_ToVectorString_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	int maxLines,
	int maxPerLine,
	int padding,
	char * format,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_ToString(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	int maxLines,
	int maxPerLine,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_ToString_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_ToString_2(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	char * format,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_ToString_3(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_At(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	int index,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_At_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	int index,
	MathNet_Numerics_Complex32 value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_Clear(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_ClearSubVector(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	int index,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_CreateMatrix(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	int rows,
	int columns,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_CreateVector(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	int size,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_Add(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_Complex32 scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_Add_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_Complex32 scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_Plus(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_Add_2(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_Add_3(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_Subtract(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_Complex32 scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_Subtract_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_Complex32 scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_Negate(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_Negate_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_Subtract_2(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_Subtract_3(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_Conjugate(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_Conjugate_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_Multiply(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_Complex32 scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_Multiply_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_Complex32 scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_DotProduct(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_Divide(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_Complex32 scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_Divide_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_Complex32 scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_Modulus(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_Complex32 divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_Modulus_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_Complex32 divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_PointwiseMultiply(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_PointwiseMultiply_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_PointwiseDivide(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_PointwiseDivide_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_OuterProduct(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 v,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_Maximum(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Vector_Minimum(
	MathNet_Numerics_LinearAlgebra_Complex32_Vector __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.DenseVector
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector__Create(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector * __instance,
	MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1 storage,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector__Create_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector * __instance,
	int length,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector__Create_2(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector * __instance,
	MathNet_Numerics_Complex32 * storage,
	ssize_t __storageLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector__Create_3(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector * __instance,
	int length,
	MathNet_Numerics_Complex32 value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector__Create_4(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector__Create_5(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector * __instance,
	System_Collections_Generic_IEnumerable_T1 other,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_Get_Values(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_Complex32 ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_Get_Storage(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_Get_Count(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_Get_Item(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	int index,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_Set_Item(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	int index,
	MathNet_Numerics_Complex32 value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_OfVector(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 vector,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_OfEnumerable(
	System_Collections_Generic_IEnumerable_T1 enumerable,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_OfIndexedEnumerable(
	int length,
	System_Collections_Generic_IEnumerable_T1 enumerable,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_Create(
	int length,
	System_Func_T2 init,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_CreateRandom(
	int length,
	MathNet_Numerics_Distributions_IContinuousDistribution distribution,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_op_Explicit(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector vector,
	MathNet_Numerics_Complex32 ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_op_Implicit(
	MathNet_Numerics_Complex32 * array,
	ssize_t __arrayLength,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_CreateMatrix(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	int rows,
	int columns,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_CreateVector(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	int size,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_op_Addition(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector leftSide,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector rightSide,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_op_UnaryNegation(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector rightSide,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_op_Subtraction(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector leftSide,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector rightSide,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_op_Multiply(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector leftSide,
	MathNet_Numerics_Complex32 rightSide,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_op_Multiply_1(
	MathNet_Numerics_Complex32 leftSide,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector rightSide,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_op_Multiply_2(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector leftSide,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector rightSide,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_op_Division(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector leftSide,
	MathNet_Numerics_Complex32 rightSide,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_AbsoluteMinimumIndex(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_AbsoluteMinimum(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_AbsoluteMaximum(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_AbsoluteMaximumIndex(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_Sum(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_SumMagnitudes(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_OuterProduct(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector u,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector v,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_OuterProduct_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector v,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_Norm(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	double p,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_Parse(
	char * value,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_Parse_1(
	char * value,
	System_IFormatProvider formatProvider,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_TryParse(
	char * value,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector * result,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_TryParse_1(
	char * value,
	System_IFormatProvider formatProvider,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector * result,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_MaximumIndex(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_MinimumIndex(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_Normalize(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	double p,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_Clone(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_SetValues(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_Complex32 * values,
	ssize_t __valuesLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_CopyTo(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 target,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_SubVector(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	int index,
	int count,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_SetSubVector(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	int index,
	int count,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 subVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_CopySubVectorTo(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 destination,
	int sourceIndex,
	int targetIndex,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_CopyTo_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 destination,
	int sourceIndex,
	int targetIndex,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_ToArray(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_Complex32 ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_ToColumnMatrix(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_ToRowMatrix(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_GetEnumerator(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	System_Collections_Generic_IEnumerator_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_GetIndexedEnumerator(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_MapInplace(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	System_Func_T2 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_MapIndexedInplace(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	System_Func_T3 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_Equals(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_Equals_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_GetHashCode(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_ToTypeString(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_ToVectorString(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	int maxLines,
	int maxPerLine,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_ToVectorString_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	int maxLines,
	int maxPerLine,
	int padding,
	char * format,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_ToString(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	int maxLines,
	int maxPerLine,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_ToString_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_ToString_2(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	char * format,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_ToString_3(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_At(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	int index,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_At_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	int index,
	MathNet_Numerics_Complex32 value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_Clear(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_ClearSubVector(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	int index,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_Add(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_Complex32 scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_Add_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_Complex32 scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_Plus(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_Add_2(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_Add_3(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_Subtract(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_Complex32 scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_Subtract_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_Complex32 scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_Negate(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_Negate_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_Subtract_2(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_Subtract_3(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_Conjugate(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_Conjugate_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_Multiply(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_Complex32 scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_Multiply_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_Complex32 scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_DotProduct(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_Divide(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_Complex32 scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_Divide_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_Complex32 scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_Modulus(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_Complex32 divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_Modulus_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_Complex32 divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_PointwiseMultiply(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_PointwiseMultiply_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_PointwiseDivide(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_PointwiseDivide_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_OuterProduct_2(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 v,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_Maximum(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DenseVector_Minimum(
	MathNet_Numerics_LinearAlgebra_Complex32_DenseVector __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix__Create(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix * __instance,
	MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1 storage,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix__Create_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix * __instance,
	int order,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix__Create_2(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix * __instance,
	int rows,
	int columns,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix__Create_3(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix * __instance,
	int rows,
	int columns,
	MathNet_Numerics_Complex32 diagonalValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix__Create_4(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix * __instance,
	int rows,
	int columns,
	MathNet_Numerics_Complex32 * diagonalStorage,
	ssize_t __diagonalStorageLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix__Create_5(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix * __instance,
	MathNet_Numerics_Complex32 * array,
	ssize_t __arrayLength1,
	ssize_t __arrayLength2,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix__Create_6(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Get_IsSymmetric(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Get_Storage(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Get_ColumnCount(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Get_RowCount(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Get_Item(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	int row,
	int column,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Set_Item(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	int row,
	int column,
	MathNet_Numerics_Complex32 value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_OfMatrix(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_OfArray(
	MathNet_Numerics_Complex32 * array,
	ssize_t __arrayLength1,
	ssize_t __arrayLength2,
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_OfIndexedDiagonal(
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 diagonal,
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_OfDiagonal(
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 diagonal,
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Create(
	int rows,
	int columns,
	System_Func_T2 init,
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_CreateRandom(
	int rows,
	int columns,
	MathNet_Numerics_Distributions_IContinuousDistribution distribution,
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_CreateMatrix(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	int numberOfRows,
	int numberOfColumns,
	int fullyMutable,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_CreateVector(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	int size,
	int fullyMutable,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Add(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Subtract(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_SetDiagonal(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_Complex32 * source,
	ssize_t __sourceLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_SetDiagonal_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 source,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Multiply(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Multiply_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Multiply_2(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_LeftMultiply(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Diagonal(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_TransposeAndMultiply(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_TransposeAndMultiply_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Transpose(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_L1Norm(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_L2Norm(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_FrobeniusNorm(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_InfinityNorm(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_ConditionNumber(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Inverse(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_LowerTriangle(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_LowerTriangle_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_StrictlyLowerTriangle(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_StrictlyLowerTriangle_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_UpperTriangle(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_UpperTriangle_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_StrictlyUpperTriangle(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_StrictlyUpperTriangle_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_SubMatrix(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_InsertColumn(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	int columnIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 column,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_InsertRow(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	int rowIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 row,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_PermuteColumns(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_Permutation p,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_PermuteRows(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_Permutation p,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Identity(
	int order,
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_ConjugateTranspose(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Trace(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_SetColumn(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	int columnIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 column,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_SetColumn_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	int columnIndex,
	MathNet_Numerics_Complex32 * column,
	ssize_t __columnLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_SetRow(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	int rowIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 row,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_SetRow_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	int rowIndex,
	MathNet_Numerics_Complex32 * row,
	ssize_t __rowLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_SetSubMatrix(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 subMatrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Append(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 right,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Append_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 right,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Stack(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Stack_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_DiagonalStack(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_DiagonalStack_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_ColumnEnumerator(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_ColumnEnumerator_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	int index,
	int length,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_RowEnumerator(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	int index,
	int length,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_RowEnumerator_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_IndexedEnumerator(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_ToArray(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_Complex32 ** __returnValue,
	ssize_t * ____returnValueLength1,
	ssize_t * ____returnValueLength2,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_ToColumnWiseArray(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_Complex32 ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_ToRowWiseArray(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_Complex32 ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_MapInplace(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	System_Func_T2 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_MapIndexedInplace(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	System_Func_T4 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Add_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Subtract_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Multiply_3(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_Complex32 scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Multiply_4(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_Complex32 scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Divide(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_Complex32 scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Divide_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_Complex32 scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Multiply_5(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_LeftMultiply_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_TransposeThisAndMultiply(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_TransposeThisAndMultiply_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_TransposeThisAndMultiply_2(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_TransposeThisAndMultiply_3(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Negate(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Negate_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Conjugate(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Conjugate_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_PointwiseMultiply(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_PointwiseMultiply_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_PointwiseDivide(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_PointwiseDivide_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Modulus(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_Complex32 divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Modulus_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_Complex32 divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Rank(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_KroneckerProduct(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_KroneckerProduct_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_NormalizeColumns(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	int p,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_NormalizeRows(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	int p,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Equals(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Equals_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_GetHashCode(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_ToTypeString(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_ToMatrixString(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	int maxRows,
	int maxColumns,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_ToMatrixString_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	int maxRows,
	int maxColumns,
	int padding,
	char * format,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_ToString(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	int maxRows,
	int maxColumns,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_ToString_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_ToString_2(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	char * format,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_At(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	int row,
	int column,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_At_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	int row,
	int column,
	MathNet_Numerics_Complex32 value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Clear(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_ClearColumn(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	int columnIndex,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_ClearRow(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	int rowIndex,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_ClearSubMatrix(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Clone(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_CopyTo(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 target,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Row(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Row_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Row_2(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	int rowIndex,
	int columnIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Row_3(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	int rowIndex,
	int columnIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Column(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Column_1(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Column_2(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	int columnIndex,
	int rowIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix_Column_3(
	MathNet_Numerics_LinearAlgebra_Complex32_DiagonalMatrix __instance,
	int columnIndex,
	int rowIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.ExtensionMethods
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_ExtensionMethods_Cholesky(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Cholesky * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_ExtensionMethods_LU(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_LU * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_ExtensionMethods_QR(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_QR * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_ExtensionMethods_GramSchmidt(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_GramSchmidt * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_ExtensionMethods_Svd(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	int computeVectors,
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Svd * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_ExtensionMethods_Evd(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Evd * __returnValue,
	CDotNetHandle * __exception);

int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_ISolver_T1_Solve(
	MathNet_Numerics_LinearAlgebra_Generic_ISolver_T1 __instance,
	char * T,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_ISolver_T1_Solve_1(
	MathNet_Numerics_LinearAlgebra_Generic_ISolver_T1 __instance,
	char * T,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_ISolver_T1_Solve_2(
	MathNet_Numerics_LinearAlgebra_Generic_ISolver_T1 __instance,
	char * T,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_ISolver_T1_Solve_3(
	MathNet_Numerics_LinearAlgebra_Generic_ISolver_T1 __instance,
	char * T,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Generic.Factorization.Cholesky`1
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_Cholesky_T1_Get_Factor(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_Cholesky_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_Cholesky_T1_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_Cholesky_T1 __instance,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_Cholesky_T1_Get_DeterminantLn(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_Cholesky_T1 __instance,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_Cholesky_T1_Solve(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_Cholesky_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_Cholesky_T1_Solve_1(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_Cholesky_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_Cholesky_T1_Solve_2(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_Cholesky_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_Cholesky_T1_Solve_3(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_Cholesky_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.Factorization.Cholesky
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Cholesky_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Cholesky __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Cholesky_Get_DeterminantLn(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Cholesky __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Cholesky_Get_Factor(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Cholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Cholesky_Solve(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Cholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Cholesky_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Cholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Cholesky_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Cholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Cholesky_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Cholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseCholesky
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseCholesky__Create(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseCholesky * __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseCholesky_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseCholesky __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseCholesky_Get_DeterminantLn(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseCholesky __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseCholesky_Get_Factor(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseCholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseCholesky_Solve(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseCholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseCholesky_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseCholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseCholesky_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseCholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseCholesky_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseCholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Generic.Factorization.Evd`1
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_Evd_T1_Get_IsSymmetric(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_Evd_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_Evd_T1_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_Evd_T1 __instance,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_Evd_T1_Get_Rank(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_Evd_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_Evd_T1_Get_IsFullRank(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_Evd_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_Evd_T1_EigenValues(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_Evd_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_Evd_T1_EigenVectors(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_Evd_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_Evd_T1_D(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_Evd_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_Evd_T1_Solve(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_Evd_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_Evd_T1_Solve_1(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_Evd_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_Evd_T1_Solve_2(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_Evd_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_Evd_T1_Solve_3(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_Evd_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.Factorization.Evd
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Evd_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Evd __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Evd_Get_Rank(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Evd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Evd_Get_IsFullRank(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Evd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Evd_Get_IsSymmetric(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Evd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Evd_EigenValues(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Evd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Evd_EigenVectors(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Evd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Evd_D(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Evd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Evd_Solve(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Evd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Evd_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Evd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Evd_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Evd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Evd_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Evd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseEvd
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseEvd__Create(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseEvd * __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseEvd_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseEvd __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseEvd_Get_Rank(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseEvd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseEvd_Get_IsFullRank(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseEvd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseEvd_Get_IsSymmetric(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseEvd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseEvd_Solve(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseEvd_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseEvd_EigenValues(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseEvd_EigenVectors(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseEvd_D(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseEvd_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseEvd_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Generic.Factorization.QR`1
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_QR_T1_Get_Q(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QR_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_QR_T1_Get_R(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QR_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_QR_T1_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QR_T1 __instance,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_QR_T1_Get_IsFullRank(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QR_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_QR_T1_Solve(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QR_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_QR_T1_Solve_1(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QR_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_QR_T1_Solve_2(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QR_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_QR_T1_Solve_3(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QR_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Generic.Factorization.GramSchmidt`1
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_GramSchmidt_T1_Get_Q(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_GramSchmidt_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_GramSchmidt_T1_Get_R(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_GramSchmidt_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_GramSchmidt_T1_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_GramSchmidt_T1 __instance,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_GramSchmidt_T1_Get_IsFullRank(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_GramSchmidt_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_GramSchmidt_T1_Solve(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_GramSchmidt_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_GramSchmidt_T1_Solve_1(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_GramSchmidt_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_GramSchmidt_T1_Solve_2(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_GramSchmidt_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_GramSchmidt_T1_Solve_3(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_GramSchmidt_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.Factorization.GramSchmidt
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_GramSchmidt_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_GramSchmidt __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_GramSchmidt_Get_IsFullRank(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_GramSchmidt __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_GramSchmidt_Get_Q(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_GramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_GramSchmidt_Get_R(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_GramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_GramSchmidt_Solve(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_GramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_GramSchmidt_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_GramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_GramSchmidt_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_GramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_GramSchmidt_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_GramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseGramSchmidt
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseGramSchmidt__Create(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseGramSchmidt * __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseGramSchmidt_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseGramSchmidt __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseGramSchmidt_Get_IsFullRank(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseGramSchmidt __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseGramSchmidt_Get_Q(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseGramSchmidt_Get_R(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseGramSchmidt_Solve(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseGramSchmidt_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseGramSchmidt_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseGramSchmidt_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Generic.Factorization.LU`1
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_LU_T1_Get_L(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_LU_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_LU_T1_Get_U(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_LU_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_LU_T1_Get_P(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_LU_T1 __instance,
	MathNet_Numerics_Permutation * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_LU_T1_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_LU_T1 __instance,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_LU_T1_Solve(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_LU_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_LU_T1_Solve_1(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_LU_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_LU_T1_Solve_2(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_LU_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_LU_T1_Solve_3(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_LU_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_LU_T1_Inverse(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_LU_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.Factorization.LU
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_LU_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_LU __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_LU_Get_L(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_LU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_LU_Get_U(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_LU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_LU_Get_P(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_LU __instance,
	MathNet_Numerics_Permutation * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_LU_Solve(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_LU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_LU_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_LU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_LU_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_LU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_LU_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_LU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_LU_Inverse(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_LU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseLU
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseLU__Create(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseLU * __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseLU_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseLU __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseLU_Get_L(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseLU_Get_U(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseLU_Get_P(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseLU __instance,
	MathNet_Numerics_Permutation * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseLU_Solve(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseLU_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseLU_Inverse(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseLU_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseLU_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.Factorization.QR
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_QR_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_QR __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_QR_Get_IsFullRank(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_QR __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_QR_Get_Q(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_QR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_QR_Get_R(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_QR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_QR_Solve(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_QR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_QR_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_QR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_QR_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_QR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_QR_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_QR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseQR
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseQR__Create(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseQR * __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix matrix,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseQR_Get_Tau(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseQR __instance,
	MathNet_Numerics_Complex32 ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseQR_Set_Tau(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseQR __instance,
	MathNet_Numerics_Complex32 * value,
	ssize_t __valueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseQR_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseQR __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseQR_Get_IsFullRank(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseQR __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseQR_Get_Q(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseQR_Get_R(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseQR_Solve(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseQR_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseQR_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseQR_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Generic.Factorization.Svd`1
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_Svd_T1_Get_Rank(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_Svd_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_Svd_T1_Get_Norm2(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_Svd_T1 __instance,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_Svd_T1_Get_ConditionNumber(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_Svd_T1 __instance,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_Svd_T1_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_Svd_T1 __instance,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_Svd_T1_U(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_Svd_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_Svd_T1_VT(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_Svd_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_Svd_T1_W(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_Svd_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_Svd_T1_S(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_Svd_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_Svd_T1_Solve(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_Svd_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_Svd_T1_Solve_1(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_Svd_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_Svd_T1_Solve_2(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_Svd_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Factorization_Svd_T1_Solve_3(
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_Svd_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.Factorization.Svd
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Svd_Get_Rank(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Svd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Svd_Get_Norm2(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Svd __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Svd_Get_ConditionNumber(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Svd __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Svd_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Svd __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Svd_U(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Svd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Svd_VT(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Svd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Svd_W(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Svd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Svd_S(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Svd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Svd_Solve(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Svd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Svd_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Svd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Svd_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Svd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Svd_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_Svd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseSvd
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseSvd__Create(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseSvd * __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_DenseMatrix matrix,
	int computeVectors,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseSvd_Get_Rank(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseSvd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseSvd_Get_Norm2(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseSvd __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseSvd_Get_ConditionNumber(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseSvd __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseSvd_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseSvd __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseSvd_Solve(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseSvd_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseSvd_U(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseSvd_VT(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseSvd_W(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseSvd_S(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseSvd_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseSvd_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_DenseSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserCholesky
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserCholesky__Create(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserCholesky * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserCholesky_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserCholesky __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserCholesky_Get_DeterminantLn(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserCholesky __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserCholesky_Get_Factor(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserCholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserCholesky_Solve(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserCholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserCholesky_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserCholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserCholesky_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserCholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserCholesky_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserCholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserEvd
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserEvd__Create(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserEvd * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserEvd_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserEvd __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserEvd_Get_Rank(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserEvd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserEvd_Get_IsFullRank(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserEvd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserEvd_Get_IsSymmetric(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserEvd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserEvd_Solve(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserEvd_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserEvd_EigenValues(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserEvd_EigenVectors(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserEvd_D(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserEvd_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserEvd_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserGramSchmidt
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserGramSchmidt__Create(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserGramSchmidt * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserGramSchmidt_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserGramSchmidt __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserGramSchmidt_Get_IsFullRank(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserGramSchmidt __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserGramSchmidt_Get_Q(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserGramSchmidt_Get_R(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserGramSchmidt_Solve(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserGramSchmidt_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserGramSchmidt_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserGramSchmidt_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserLU
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserLU__Create(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserLU * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserLU_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserLU __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserLU_Get_L(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserLU_Get_U(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserLU_Get_P(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserLU __instance,
	MathNet_Numerics_Permutation * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserLU_Solve(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserLU_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserLU_Inverse(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserLU_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserLU_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserQR
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserQR__Create(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserQR * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserQR_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserQR __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserQR_Get_IsFullRank(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserQR __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserQR_Get_Q(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserQR_Get_R(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserQR_Solve(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserQR_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserQR_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserQR_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserSvd
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserSvd__Create(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserSvd * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	int computeVectors,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserSvd_Get_Rank(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserSvd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserSvd_Get_Norm2(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserSvd __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserSvd_Get_ConditionNumber(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserSvd __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserSvd_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserSvd __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserSvd_Solve(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserSvd_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserSvd_U(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserSvd_VT(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserSvd_W(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserSvd_S(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserSvd_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserSvd_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex32_Factorization_UserSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterativeSolver
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterativeSolver_Get_IterationResult(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterativeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterativeSolver_StopSolve(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterativeSolver __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterativeSolver_SetIterator(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterativeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterativeSolver_Solve(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterativeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector vector,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterativeSolver_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterativeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector input,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterativeSolver_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterativeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix input,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterativeSolver_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterativeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix input,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterativeSolverSetup
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterativeSolverSetup_Get_SolverType(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterativeSolverSetup __instance,
	System_Type * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterativeSolverSetup_Get_PreconditionerType(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterativeSolverSetup __instance,
	System_Type * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterativeSolverSetup_Get_SolutionSpeed(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterativeSolverSetup __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterativeSolverSetup_Get_Reliability(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterativeSolverSetup __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterativeSolverSetup_CreateNew(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterativeSolverSetup __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterativeSolver * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterator_Get_Status(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterator __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterator_Add(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterator __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IIterationStopCriterium stopCriterium,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterator_Remove(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterator __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IIterationStopCriterium stopCriterium,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterator_Contains(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterator __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IIterationStopCriterium stopCriterium,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterator_IterationCancelled(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterator __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterator_DetermineStatus(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterator __instance,
	int iterationNumber,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector solutionVector,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector sourceVector,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector residualVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterator_ResetToPrecalculationState(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterator __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterator_Clone(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterator __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterator * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.BiCgStab
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_BiCgStab__Create(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_BiCgStab * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_BiCgStab__Create_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_BiCgStab * __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_BiCgStab__Create_2(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_BiCgStab * __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_IPreConditioner preconditioner,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_BiCgStab__Create_3(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_BiCgStab * __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_IPreConditioner preconditioner,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_BiCgStab_Get_IterationResult(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_BiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_BiCgStab_SetPreconditioner(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_BiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_IPreConditioner preconditioner,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_BiCgStab_SetIterator(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_BiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_BiCgStab_StopSolve(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_BiCgStab __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_BiCgStab_Solve(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_BiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector vector,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_BiCgStab_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_BiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector input,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_BiCgStab_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_BiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix input,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_BiCgStab_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_BiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix input,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.CompositeSolver
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_CompositeSolver__Create(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_CompositeSolver * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_CompositeSolver__Create_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_CompositeSolver * __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_CompositeSolver_Get_IterationResult(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_CompositeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_CompositeSolver_LoadSolverInformation(
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_CompositeSolver_LoadSolverInformation_1(
	System_Type * typesToExclude,
	ssize_t __typesToExcludeLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_CompositeSolver_LoadSolverInformationFromAssembly(
	System_Reflection_AssemblyName assemblyName,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_CompositeSolver_LoadSolverInformationFromAssembly_1(
	System_Reflection_AssemblyName assemblyName,
	System_Type * typesToExclude,
	ssize_t __typesToExcludeLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_CompositeSolver_LoadSolverInformationFromAssembly_2(
	System_Type typeInAssembly,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_CompositeSolver_LoadSolverInformationFromAssembly_3(
	System_Type typeInAssembly,
	System_Type * typesToExclude,
	ssize_t __typesToExcludeLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_CompositeSolver_LoadSolverInformationFromAssembly_4(
	System_Reflection_Assembly assembly,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_CompositeSolver_LoadSolverInformationFromAssembly_5(
	System_Reflection_Assembly assembly,
	System_Type * typesToExclude,
	ssize_t __typesToExcludeLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_CompositeSolver_SetIterator(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_CompositeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_CompositeSolver_StopSolve(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_CompositeSolver __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_CompositeSolver_Solve(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_CompositeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector vector,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_CompositeSolver_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_CompositeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector input,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_CompositeSolver_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_CompositeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix input,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_CompositeSolver_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_CompositeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix input,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.CompositeSolver+DoubleComparer
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_CompositeSolver_DoubleComparer__Create(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_CompositeSolver_DoubleComparer * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_CompositeSolver_DoubleComparer_Compare(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_CompositeSolver_DoubleComparer __instance,
	double x,
	double y,
	int * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.GpBiCg
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_GpBiCg__Create(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_GpBiCg * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_GpBiCg__Create_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_GpBiCg * __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_GpBiCg__Create_2(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_GpBiCg * __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_IPreConditioner preconditioner,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_GpBiCg__Create_3(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_GpBiCg * __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_IPreConditioner preconditioner,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_GpBiCg_Get_NumberOfBiCgStabSteps(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_GpBiCg __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_GpBiCg_Set_NumberOfBiCgStabSteps(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_GpBiCg __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_GpBiCg_Get_NumberOfGpBiCgSteps(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_GpBiCg __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_GpBiCg_Set_NumberOfGpBiCgSteps(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_GpBiCg __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_GpBiCg_Get_IterationResult(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_GpBiCg __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_GpBiCg_SetPreconditioner(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_GpBiCg __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_IPreConditioner preconditioner,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_GpBiCg_SetIterator(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_GpBiCg __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_GpBiCg_StopSolve(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_GpBiCg __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_GpBiCg_Solve(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_GpBiCg __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector vector,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_GpBiCg_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_GpBiCg __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector input,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_GpBiCg_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_GpBiCg __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix input,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_GpBiCg_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_GpBiCg __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix input,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.MlkBiCgStab
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_MlkBiCgStab__Create(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_MlkBiCgStab * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_MlkBiCgStab__Create_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_MlkBiCgStab * __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_MlkBiCgStab__Create_2(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_MlkBiCgStab * __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_IPreConditioner preconditioner,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_MlkBiCgStab__Create_3(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_MlkBiCgStab * __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_IPreConditioner preconditioner,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_MlkBiCgStab_Get_NumberOfStartingVectors(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_MlkBiCgStab __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_MlkBiCgStab_Set_NumberOfStartingVectors(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_MlkBiCgStab __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_MlkBiCgStab_Get_StartingVectors(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_MlkBiCgStab __instance,
	System_Collections_Generic_IList_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_MlkBiCgStab_Set_StartingVectors(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_MlkBiCgStab __instance,
	System_Collections_Generic_IList_T1 value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_MlkBiCgStab_Get_IterationResult(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_MlkBiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_MlkBiCgStab_ResetNumberOfStartingVectors(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_MlkBiCgStab __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_MlkBiCgStab_SetPreconditioner(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_MlkBiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_IPreConditioner preconditioner,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_MlkBiCgStab_SetIterator(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_MlkBiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_MlkBiCgStab_StopSolve(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_MlkBiCgStab __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_MlkBiCgStab_Solve(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_MlkBiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector vector,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_MlkBiCgStab_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_MlkBiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector input,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_MlkBiCgStab_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_MlkBiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix input,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_MlkBiCgStab_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_MlkBiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix input,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.TFQMR
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_TFQMR__Create(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_TFQMR * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_TFQMR__Create_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_TFQMR * __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_TFQMR__Create_2(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_TFQMR * __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_IPreConditioner preconditioner,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_TFQMR__Create_3(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_TFQMR * __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_IPreConditioner preconditioner,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_TFQMR_Get_IterationResult(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_TFQMR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_TFQMR_SetPreconditioner(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_TFQMR __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_IPreConditioner preconditioner,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_TFQMR_SetIterator(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_TFQMR __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_TFQMR_StopSolve(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_TFQMR __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_TFQMR_Solve(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_TFQMR __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector vector,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_TFQMR_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_TFQMR __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector input,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_TFQMR_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_TFQMR __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix input,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_TFQMR_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterative_TFQMR __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix input,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterator
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterator__Create(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterator * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterator__Create_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterator * __instance,
	System_Collections_Generic_IEnumerable_T1 stopCriteria,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterator_Get_Status(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterator __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterator_CreateDefault(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterator * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterator_Add(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterator __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IIterationStopCriterium stopCriterium,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterator_Remove(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterator __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IIterationStopCriterium stopCriterium,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterator_Contains(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterator __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IIterationStopCriterium stopCriterium,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterator_IterationCancelled(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterator __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterator_DetermineStatus(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterator __instance,
	int iterationNumber,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector solutionVector,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector sourceVector,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector residualVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterator_ResetToPrecalculationState(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterator __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterator_Clone(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Iterator __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_IIterator * __returnValue,
	CDotNetHandle * __exception);

int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_IPreConditioner_Initialize(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_IPreConditioner __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_IPreConditioner_Approximate(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_IPreConditioner __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector rhs,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_IPreConditioner_Approximate_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_IPreConditioner __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector rhs,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector lhs,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.Diagonal
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_Diagonal__Create(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_Diagonal * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_Diagonal_Initialize(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_Diagonal __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_Diagonal_Approximate(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_Diagonal __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector rhs,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_Diagonal_Approximate_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_Diagonal __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector rhs,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector lhs,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.Ilutp
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_Ilutp__Create(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_Ilutp * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_Ilutp__Create_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_Ilutp * __instance,
	double fillLevel,
	double dropTolerance,
	double pivotTolerance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_Ilutp_Get_FillLevel(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_Ilutp __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_Ilutp_Set_FillLevel(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_Ilutp __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_Ilutp_Get_DropTolerance(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_Ilutp __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_Ilutp_Set_DropTolerance(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_Ilutp __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_Ilutp_Get_PivotTolerance(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_Ilutp __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_Ilutp_Set_PivotTolerance(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_Ilutp __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_Ilutp_Initialize(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_Ilutp __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_Ilutp_Approximate(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_Ilutp __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector rhs,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_Ilutp_Approximate_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_Ilutp __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector rhs,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector lhs,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_Ilutp__Get__DefaultFillLevel(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_Ilutp__Get__DefaultDropTolerance(
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IncompleteLU
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_IncompleteLU__Create(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_IncompleteLU * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_IncompleteLU_Initialize(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_IncompleteLU __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Matrix matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_IncompleteLU_Approximate(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_IncompleteLU __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector rhs,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_IncompleteLU_Approximate_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_Preconditioners_IncompleteLU __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector rhs,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector lhs,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IIterationStopCriterium
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IIterationStopCriterium_Get_Status(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IIterationStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IIterationStopCriterium_Get_StopLevel(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IIterationStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_StopCriterium_StopLevel * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IIterationStopCriterium_DetermineStatus(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IIterationStopCriterium __instance,
	int iterationNumber,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector solutionVector,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector sourceVector,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector residualVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IIterationStopCriterium_ResetToPrecalculationState(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IIterationStopCriterium __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IIterationStopCriterium_Clone(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IIterationStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IIterationStopCriterium * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.DivergenceStopCriterium
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_DivergenceStopCriterium__Create(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_DivergenceStopCriterium * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_DivergenceStopCriterium__Create_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_DivergenceStopCriterium * __instance,
	double maximumRelativeIncrease,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_DivergenceStopCriterium__Create_2(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_DivergenceStopCriterium * __instance,
	int minimumIterations,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_DivergenceStopCriterium__Create_3(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_DivergenceStopCriterium * __instance,
	double maximumRelativeIncrease,
	int minimumIterations,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_DivergenceStopCriterium_Get_MaximumRelativeIncrease(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_DivergenceStopCriterium_Set_MaximumRelativeIncrease(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_DivergenceStopCriterium_Get_MinimumNumberOfIterations(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_DivergenceStopCriterium_Set_MinimumNumberOfIterations(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_DivergenceStopCriterium_Get_Status(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_DivergenceStopCriterium_Get_StopLevel(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_StopCriterium_StopLevel * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_DivergenceStopCriterium_ResetMaximumRelativeIncreaseToDefault(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_DivergenceStopCriterium_ResetNumberOfIterationsToDefault(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_DivergenceStopCriterium_DetermineStatus(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	int iterationNumber,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector solutionVector,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector sourceVector,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector residualVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_DivergenceStopCriterium_ResetToPrecalculationState(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_DivergenceStopCriterium_Clone(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IIterationStopCriterium * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_DivergenceStopCriterium__Get__DefaultMaximumRelativeIncrease(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_DivergenceStopCriterium__Get__DefaultMinimumNumberOfIterations(
	int * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.FailureStopCriterium
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_FailureStopCriterium__Create(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_FailureStopCriterium * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_FailureStopCriterium_Get_Status(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_FailureStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_FailureStopCriterium_Get_StopLevel(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_FailureStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_StopCriterium_StopLevel * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_FailureStopCriterium_DetermineStatus(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_FailureStopCriterium __instance,
	int iterationNumber,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector solutionVector,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector sourceVector,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector residualVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_FailureStopCriterium_ResetToPrecalculationState(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_FailureStopCriterium __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_FailureStopCriterium_Clone(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_FailureStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IIterationStopCriterium * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IterationCountStopCriterium
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IterationCountStopCriterium__Create(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IterationCountStopCriterium * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IterationCountStopCriterium__Create_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IterationCountStopCriterium * __instance,
	int maximumNumberOfIterations,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IterationCountStopCriterium_Get_MaximumNumberOfIterations(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IterationCountStopCriterium __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IterationCountStopCriterium_Set_MaximumNumberOfIterations(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IterationCountStopCriterium __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IterationCountStopCriterium_Get_Status(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IterationCountStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IterationCountStopCriterium_Get_StopLevel(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IterationCountStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_StopCriterium_StopLevel * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IterationCountStopCriterium_ResetMaximumNumberOfIterationsToDefault(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IterationCountStopCriterium __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IterationCountStopCriterium_DetermineStatus(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IterationCountStopCriterium __instance,
	int iterationNumber,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector solutionVector,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector sourceVector,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector residualVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IterationCountStopCriterium_ResetToPrecalculationState(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IterationCountStopCriterium __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IterationCountStopCriterium_Clone(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IterationCountStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IIterationStopCriterium * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IterationCountStopCriterium__Get__DefaultMaximumNumberOfIterations(
	int * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.ResidualStopCriterium
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_ResidualStopCriterium__Create(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_ResidualStopCriterium * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_ResidualStopCriterium__Create_1(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_ResidualStopCriterium * __instance,
	float maximum,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_ResidualStopCriterium__Create_2(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_ResidualStopCriterium * __instance,
	int minimumIterationsBelowMaximum,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_ResidualStopCriterium__Create_3(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_ResidualStopCriterium * __instance,
	float maximum,
	int minimumIterationsBelowMaximum,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_ResidualStopCriterium_Get_Maximum(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_ResidualStopCriterium __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_ResidualStopCriterium_Set_Maximum(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_ResidualStopCriterium __instance,
	float value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_ResidualStopCriterium_Get_MinimumIterationsBelowMaximum(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_ResidualStopCriterium __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_ResidualStopCriterium_Set_MinimumIterationsBelowMaximum(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_ResidualStopCriterium __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_ResidualStopCriterium_Get_Status(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_ResidualStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_ResidualStopCriterium_Get_StopLevel(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_ResidualStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_StopCriterium_StopLevel * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_ResidualStopCriterium_ResetMaximumResidualToDefault(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_ResidualStopCriterium __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_ResidualStopCriterium_ResetMinimumIterationsBelowMaximumToDefault(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_ResidualStopCriterium __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_ResidualStopCriterium_DetermineStatus(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_ResidualStopCriterium __instance,
	int iterationNumber,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector solutionVector,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector sourceVector,
	MathNet_Numerics_LinearAlgebra_Complex32_Vector residualVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_ResidualStopCriterium_ResetToPrecalculationState(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_ResidualStopCriterium __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_ResidualStopCriterium_Clone(
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_ResidualStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_IIterationStopCriterium * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_ResidualStopCriterium__Get__DefaultMaximumResidual(
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_Solvers_StopCriterium_ResidualStopCriterium__Get__DefaultMinimumIterationsBelowMaximum(
	int * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix__Create(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix * __instance,
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 storage,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix__Create_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix * __instance,
	int order,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix__Create_2(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix * __instance,
	int rows,
	int columns,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix__Create_3(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix * __instance,
	int rows,
	int columns,
	MathNet_Numerics_Complex32 value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix__Create_4(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix * __instance,
	int rows,
	int columns,
	MathNet_Numerics_Complex32 * array,
	ssize_t __arrayLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix__Create_5(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix * __instance,
	MathNet_Numerics_Complex32 * array,
	ssize_t __arrayLength1,
	ssize_t __arrayLength2,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix__Create_6(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Get_NonZerosCount(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Get_IsSymmetric(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Get_Storage(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Get_ColumnCount(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Get_RowCount(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Get_Item(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	int row,
	int column,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Set_Item(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	int row,
	int column,
	MathNet_Numerics_Complex32 value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_OfMatrix(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_OfArray(
	MathNet_Numerics_Complex32 * array,
	ssize_t __arrayLength1,
	ssize_t __arrayLength2,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_OfIndexed(
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 enumerable,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_OfRowMajor(
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 rowMajor,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_OfColumnMajor(
	int rows,
	int columns,
	System_Collections_Generic_IList_T1 columnMajor,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_OfColumns(
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_OfColumnsCovariant(
	char * TColumn,
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_OfRows(
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_OfRowsCovariant(
	char * TRow,
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Create(
	int rows,
	int columns,
	System_Func_T3 init,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_CreateMatrix(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	int numberOfRows,
	int numberOfColumns,
	int fullyMutable,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_CreateVector(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	int size,
	int fullyMutable,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_LowerTriangle(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_LowerTriangle_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_UpperTriangle(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_UpperTriangle_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_StrictlyLowerTriangle(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_StrictlyLowerTriangle_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_StrictlyUpperTriangle(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_StrictlyUpperTriangle_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Transpose(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_FrobeniusNorm(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_InfinityNorm(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Identity(
	int order,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_KroneckerProduct(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_IndexedEnumerator(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_op_Addition(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix leftSide,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_op_UnaryPlus(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_op_Subtraction(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix leftSide,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_op_UnaryNegation(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_op_Multiply(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix leftSide,
	MathNet_Numerics_Complex32 rightSide,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_op_Multiply_1(
	MathNet_Numerics_Complex32 leftSide,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_op_Multiply_2(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix leftSide,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_op_Multiply_3(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix leftSide,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector rightSide,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_op_Multiply_4(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector leftSide,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_op_Modulus(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix leftSide,
	MathNet_Numerics_Complex32 rightSide,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_ToTypeString(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_L1Norm(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_ConjugateTranspose(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Trace(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_InsertColumn(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	int columnIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 column,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_SetColumn(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	int columnIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 column,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_SetColumn_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	int columnIndex,
	MathNet_Numerics_Complex32 * column,
	ssize_t __columnLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_InsertRow(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	int rowIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 row,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_SetRow(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	int rowIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 row,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_SetRow_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	int rowIndex,
	MathNet_Numerics_Complex32 * row,
	ssize_t __rowLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_SetSubMatrix(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 subMatrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_SetDiagonal(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 source,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_SetDiagonal_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_Complex32 * source,
	ssize_t __sourceLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_PermuteRows(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_Permutation p,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_PermuteColumns(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_Permutation p,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Append(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 right,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Append_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 right,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Stack(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Stack_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_DiagonalStack(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_DiagonalStack_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_L2Norm(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_ColumnEnumerator(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_ColumnEnumerator_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	int index,
	int length,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_RowEnumerator(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	int index,
	int length,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_RowEnumerator_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_ToArray(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_Complex32 ** __returnValue,
	ssize_t * ____returnValueLength1,
	ssize_t * ____returnValueLength2,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_ToColumnWiseArray(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_Complex32 ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_ToRowWiseArray(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_Complex32 ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_MapInplace(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	System_Func_T2 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_MapIndexedInplace(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	System_Func_T4 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Add(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Add_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Subtract(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Subtract_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Multiply(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_Complex32 scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Multiply_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_Complex32 scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Divide(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_Complex32 scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Divide_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_Complex32 scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Multiply_2(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Multiply_3(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_LeftMultiply(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_LeftMultiply_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Multiply_4(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Multiply_5(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_TransposeAndMultiply(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_TransposeAndMultiply_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_TransposeThisAndMultiply(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_TransposeThisAndMultiply_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_TransposeThisAndMultiply_2(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_TransposeThisAndMultiply_3(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Negate(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Negate_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Conjugate(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Conjugate_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_PointwiseMultiply(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_PointwiseMultiply_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_PointwiseDivide(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_PointwiseDivide_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Modulus(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_Complex32 divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Modulus_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_Complex32 divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Rank(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_ConditionNumber(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Inverse(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_KroneckerProduct_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_NormalizeColumns(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	int p,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_NormalizeRows(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	int p,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Equals(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Equals_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_GetHashCode(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_ToMatrixString(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	int maxRows,
	int maxColumns,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_ToMatrixString_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	int maxRows,
	int maxColumns,
	int padding,
	char * format,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_ToString(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	int maxRows,
	int maxColumns,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_ToString_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_ToString_2(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	char * format,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_At(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	int row,
	int column,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_At_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	int row,
	int column,
	MathNet_Numerics_Complex32 value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Clear(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_ClearColumn(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	int columnIndex,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_ClearRow(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	int rowIndex,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_ClearSubMatrix(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Clone(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_CopyTo(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 target,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Row(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Row_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Row_2(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	int rowIndex,
	int columnIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Row_3(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	int rowIndex,
	int columnIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Column(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Column_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Column_2(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	int columnIndex,
	int rowIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Column_3(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	int columnIndex,
	int rowIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_SubMatrix(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix_Diagonal(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex32.SparseVector
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector__Create(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector * __instance,
	MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1 storage,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector__Create_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector * __instance,
	int length,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector__Create_2(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector * __instance,
	int length,
	MathNet_Numerics_Complex32 value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector__Create_3(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector__Create_4(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector * __instance,
	System_Collections_Generic_IEnumerable_T1 other,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_Get_NonZerosCount(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_Get_Storage(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_Get_Count(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_Get_Item(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	int index,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_Set_Item(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	int index,
	MathNet_Numerics_Complex32 value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_OfVector(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 vector,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_OfEnumerable(
	System_Collections_Generic_IEnumerable_T1 enumerable,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_OfIndexedEnumerable(
	int length,
	System_Collections_Generic_IEnumerable_T1 enumerable,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_Create(
	int length,
	System_Func_T2 init,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_CreateMatrix(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	int rows,
	int columns,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_CreateVector(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	int size,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_op_Addition(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector leftSide,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector rightSide,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_op_UnaryNegation(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector rightSide,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_op_Subtraction(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector leftSide,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector rightSide,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_op_Multiply(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector leftSide,
	MathNet_Numerics_Complex32 rightSide,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_op_Multiply_1(
	MathNet_Numerics_Complex32 leftSide,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector rightSide,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_op_Multiply_2(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector leftSide,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector rightSide,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_op_Division(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector leftSide,
	MathNet_Numerics_Complex32 rightSide,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_op_Modulus(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector leftSide,
	MathNet_Numerics_Complex32 rightSide,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_AbsoluteMinimumIndex(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_Sum(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_SumMagnitudes(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_OuterProduct(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector u,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector v,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_OuterProduct_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector v,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_Norm(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	double p,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_Parse(
	char * value,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_Parse_1(
	char * value,
	System_IFormatProvider formatProvider,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_TryParse(
	char * value,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector * result,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_TryParse_1(
	char * value,
	System_IFormatProvider formatProvider,
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector * result,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_ToTypeString(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_AbsoluteMinimum(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_AbsoluteMaximum(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_AbsoluteMaximumIndex(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_MaximumIndex(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_MinimumIndex(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_Normalize(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	double p,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_Clone(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_SetValues(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_Complex32 * values,
	ssize_t __valuesLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_CopyTo(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 target,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_SubVector(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	int index,
	int count,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_SetSubVector(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	int index,
	int count,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 subVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_CopySubVectorTo(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 destination,
	int sourceIndex,
	int targetIndex,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_CopyTo_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 destination,
	int sourceIndex,
	int targetIndex,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_ToArray(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_Complex32 ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_ToColumnMatrix(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_ToRowMatrix(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_GetEnumerator(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	System_Collections_Generic_IEnumerator_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_GetIndexedEnumerator(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_MapInplace(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	System_Func_T2 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_MapIndexedInplace(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	System_Func_T3 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_Equals(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_Equals_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_GetHashCode(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_ToVectorString(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	int maxLines,
	int maxPerLine,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_ToVectorString_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	int maxLines,
	int maxPerLine,
	int padding,
	char * format,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_ToString(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	int maxLines,
	int maxPerLine,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_ToString_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_ToString_2(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	char * format,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_ToString_3(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_At(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	int index,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_At_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	int index,
	MathNet_Numerics_Complex32 value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_Clear(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_ClearSubVector(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	int index,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_Add(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_Complex32 scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_Add_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_Complex32 scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_Plus(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_Add_2(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_Add_3(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_Subtract(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_Complex32 scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_Subtract_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_Complex32 scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_Negate(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_Negate_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_Subtract_2(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_Subtract_3(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_Conjugate(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_Conjugate_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_Multiply(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_Complex32 scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_Multiply_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_Complex32 scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_DotProduct(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_Divide(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_Complex32 scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_Divide_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_Complex32 scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_Modulus(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_Complex32 divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_Modulus_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_Complex32 divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_PointwiseMultiply(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_PointwiseMultiply_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_PointwiseDivide(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_PointwiseDivide_1(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_OuterProduct_2(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 v,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_Maximum(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex32_SparseVector_Minimum(
	MathNet_Numerics_LinearAlgebra_Complex32_SparseVector __instance,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.Matrix
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Get_Storage(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Get_ColumnCount(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Get_RowCount(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Get_Item(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	int row,
	int column,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Set_Item(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	int row,
	int column,
	System_Numerics_Complex value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Get_IsSymmetric(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_L1Norm(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_ConjugateTranspose(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_FrobeniusNorm(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_InfinityNorm(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Trace(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_StrictlyLowerTriangle(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_StrictlyLowerTriangle_1(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_StrictlyUpperTriangle(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_StrictlyUpperTriangle_1(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_InsertColumn(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	int columnIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 column,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_SetColumn(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	int columnIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 column,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_SetColumn_1(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	int columnIndex,
	System_Numerics_Complex * column,
	ssize_t __columnLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_InsertRow(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	int rowIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 row,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_SetRow(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	int rowIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 row,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_SetRow_1(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	int rowIndex,
	System_Numerics_Complex * row,
	ssize_t __rowLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_SetSubMatrix(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 subMatrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_SetDiagonal(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 source,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_SetDiagonal_1(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	System_Numerics_Complex * source,
	ssize_t __sourceLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Transpose(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_PermuteRows(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_Permutation p,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_PermuteColumns(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_Permutation p,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Append(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 right,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Append_1(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 right,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Stack(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Stack_1(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_DiagonalStack(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_DiagonalStack_1(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_L2Norm(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_ColumnEnumerator(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_ColumnEnumerator_1(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	int index,
	int length,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_RowEnumerator(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	int index,
	int length,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_RowEnumerator_1(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_IndexedEnumerator(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_ToArray(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	System_Numerics_Complex ** __returnValue,
	ssize_t * ____returnValueLength1,
	ssize_t * ____returnValueLength2,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_ToColumnWiseArray(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	System_Numerics_Complex ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_ToRowWiseArray(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	System_Numerics_Complex ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_MapInplace(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	System_Func_T2 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_MapIndexedInplace(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	System_Func_T4 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Add(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Add_1(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Subtract(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Subtract_1(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Multiply(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	System_Numerics_Complex scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Multiply_1(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	System_Numerics_Complex scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Divide(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	System_Numerics_Complex scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Divide_1(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	System_Numerics_Complex scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Multiply_2(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Multiply_3(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_LeftMultiply(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_LeftMultiply_1(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Multiply_4(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Multiply_5(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_TransposeAndMultiply(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_TransposeAndMultiply_1(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_TransposeThisAndMultiply(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_TransposeThisAndMultiply_1(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_TransposeThisAndMultiply_2(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_TransposeThisAndMultiply_3(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Negate(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Negate_1(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Conjugate(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Conjugate_1(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_PointwiseMultiply(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_PointwiseMultiply_1(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_PointwiseDivide(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_PointwiseDivide_1(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Modulus(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	System_Numerics_Complex divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Modulus_1(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	System_Numerics_Complex divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Rank(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_ConditionNumber(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Inverse(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_KroneckerProduct(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_KroneckerProduct_1(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_NormalizeColumns(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	int p,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_NormalizeRows(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	int p,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Equals(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Equals_1(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_GetHashCode(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_ToTypeString(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_ToMatrixString(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	int maxRows,
	int maxColumns,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_ToMatrixString_1(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	int maxRows,
	int maxColumns,
	int padding,
	char * format,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_ToString(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	int maxRows,
	int maxColumns,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_ToString_1(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_ToString_2(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	char * format,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_At(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	int row,
	int column,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_At_1(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	int row,
	int column,
	System_Numerics_Complex value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Clear(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_ClearColumn(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	int columnIndex,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_ClearRow(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	int rowIndex,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_ClearSubMatrix(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Clone(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_CopyTo(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 target,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_CreateMatrix(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	int numberOfRows,
	int numberOfColumns,
	int fullyMutable,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_CreateVector(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	int size,
	int fullyMutable,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Row(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Row_1(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Row_2(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	int rowIndex,
	int columnIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Row_3(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	int rowIndex,
	int columnIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Column(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Column_1(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Column_2(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	int columnIndex,
	int rowIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Column_3(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	int columnIndex,
	int rowIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_UpperTriangle(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_LowerTriangle(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_LowerTriangle_1(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_UpperTriangle_1(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_SubMatrix(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Matrix_Diagonal(
	MathNet_Numerics_LinearAlgebra_Complex_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix__Create(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix * __instance,
	MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1 storage,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix__Create_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix * __instance,
	int order,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix__Create_2(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix * __instance,
	int rows,
	int columns,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix__Create_3(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix * __instance,
	int rows,
	int columns,
	System_Numerics_Complex * storage,
	ssize_t __storageLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix__Create_4(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix * __instance,
	int rows,
	int columns,
	System_Numerics_Complex value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix__Create_5(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix * __instance,
	System_Numerics_Complex * array,
	ssize_t __arrayLength1,
	ssize_t __arrayLength2,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix__Create_6(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Get_Data(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	System_Numerics_Complex ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Get_Values(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	System_Numerics_Complex ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Get_Storage(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Get_ColumnCount(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Get_RowCount(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Get_Item(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	int row,
	int column,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Set_Item(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	int row,
	int column,
	System_Numerics_Complex value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Get_IsSymmetric(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_OfMatrix(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_OfArray(
	System_Numerics_Complex * array,
	ssize_t __arrayLength1,
	ssize_t __arrayLength2,
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_OfIndexed(
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 enumerable,
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_OfColumnMajor(
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 columnMajor,
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_OfColumns(
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_OfColumnsCovariant(
	char * TColumn,
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_OfRows(
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_OfRowsCovariant(
	char * TRow,
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Create(
	int rows,
	int columns,
	System_Func_T3 init,
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_CreateRandom(
	int rows,
	int columns,
	MathNet_Numerics_Distributions_IContinuousDistribution distribution,
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_CreateMatrix(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	int numberOfRows,
	int numberOfColumns,
	int fullyMutable,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_CreateVector(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	int size,
	int fullyMutable,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Transpose(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_L1Norm(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_FrobeniusNorm(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_InfinityNorm(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Identity(
	int order,
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_ConjugateTranspose(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Trace(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_op_Addition(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix leftSide,
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_op_UnaryPlus(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_op_Subtraction(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix leftSide,
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_op_UnaryNegation(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_op_Multiply(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix leftSide,
	System_Numerics_Complex rightSide,
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_op_Multiply_1(
	System_Numerics_Complex leftSide,
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_op_Multiply_2(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix leftSide,
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_op_Multiply_3(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix leftSide,
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector rightSide,
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_op_Multiply_4(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector leftSide,
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_op_Modulus(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix leftSide,
	System_Numerics_Complex rightSide,
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_StrictlyLowerTriangle(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_StrictlyLowerTriangle_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_StrictlyUpperTriangle(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_StrictlyUpperTriangle_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_InsertColumn(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	int columnIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 column,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_SetColumn(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	int columnIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 column,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_SetColumn_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	int columnIndex,
	System_Numerics_Complex * column,
	ssize_t __columnLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_InsertRow(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	int rowIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 row,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_SetRow(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	int rowIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 row,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_SetRow_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	int rowIndex,
	System_Numerics_Complex * row,
	ssize_t __rowLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_SetSubMatrix(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 subMatrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_SetDiagonal(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 source,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_SetDiagonal_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	System_Numerics_Complex * source,
	ssize_t __sourceLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_PermuteRows(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_Permutation p,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_PermuteColumns(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_Permutation p,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Append(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 right,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Append_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 right,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Stack(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Stack_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_DiagonalStack(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_DiagonalStack_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_L2Norm(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_ColumnEnumerator(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_ColumnEnumerator_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	int index,
	int length,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_RowEnumerator(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	int index,
	int length,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_RowEnumerator_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_IndexedEnumerator(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_ToArray(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	System_Numerics_Complex ** __returnValue,
	ssize_t * ____returnValueLength1,
	ssize_t * ____returnValueLength2,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_ToColumnWiseArray(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	System_Numerics_Complex ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_ToRowWiseArray(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	System_Numerics_Complex ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_MapInplace(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	System_Func_T2 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_MapIndexedInplace(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	System_Func_T4 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Add(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Add_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Subtract(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Subtract_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Multiply(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	System_Numerics_Complex scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Multiply_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	System_Numerics_Complex scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Divide(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	System_Numerics_Complex scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Divide_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	System_Numerics_Complex scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Multiply_2(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Multiply_3(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_LeftMultiply(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_LeftMultiply_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Multiply_4(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Multiply_5(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_TransposeAndMultiply(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_TransposeAndMultiply_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_TransposeThisAndMultiply(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_TransposeThisAndMultiply_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_TransposeThisAndMultiply_2(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_TransposeThisAndMultiply_3(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Negate(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Negate_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Conjugate(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Conjugate_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_PointwiseMultiply(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_PointwiseMultiply_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_PointwiseDivide(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_PointwiseDivide_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Modulus(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	System_Numerics_Complex divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Modulus_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	System_Numerics_Complex divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Rank(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_ConditionNumber(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Inverse(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_KroneckerProduct(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_KroneckerProduct_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_NormalizeColumns(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	int p,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_NormalizeRows(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	int p,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Equals(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Equals_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_GetHashCode(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_ToTypeString(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_ToMatrixString(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	int maxRows,
	int maxColumns,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_ToMatrixString_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	int maxRows,
	int maxColumns,
	int padding,
	char * format,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_ToString(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	int maxRows,
	int maxColumns,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_ToString_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_ToString_2(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	char * format,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_At(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	int row,
	int column,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_At_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	int row,
	int column,
	System_Numerics_Complex value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Clear(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_ClearColumn(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	int columnIndex,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_ClearRow(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	int rowIndex,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_ClearSubMatrix(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Clone(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_CopyTo(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 target,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Row(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Row_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Row_2(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	int rowIndex,
	int columnIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Row_3(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	int rowIndex,
	int columnIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Column(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Column_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Column_2(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	int columnIndex,
	int rowIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Column_3(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	int columnIndex,
	int rowIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_UpperTriangle(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_LowerTriangle(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_LowerTriangle_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_UpperTriangle_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_SubMatrix(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix_Diagonal(
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.Vector
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_Get_Storage(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_Get_Count(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_Get_Item(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	int index,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_Set_Item(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	int index,
	System_Numerics_Complex value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_AbsoluteMinimum(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_AbsoluteMinimumIndex(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_AbsoluteMaximum(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_AbsoluteMaximumIndex(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_Sum(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_SumMagnitudes(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_Norm(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	double p,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_MaximumIndex(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_MinimumIndex(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_Normalize(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	double p,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_Clone(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_SetValues(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	System_Numerics_Complex * values,
	ssize_t __valuesLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_CopyTo(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 target,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_SubVector(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	int index,
	int count,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_SetSubVector(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	int index,
	int count,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 subVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_CopySubVectorTo(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 destination,
	int sourceIndex,
	int targetIndex,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_CopyTo_1(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 destination,
	int sourceIndex,
	int targetIndex,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_ToArray(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	System_Numerics_Complex ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_ToColumnMatrix(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_ToRowMatrix(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_GetEnumerator(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	System_Collections_Generic_IEnumerator_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_GetIndexedEnumerator(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_MapInplace(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	System_Func_T2 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_MapIndexedInplace(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	System_Func_T3 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_Equals(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_Equals_1(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_GetHashCode(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_ToTypeString(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_ToVectorString(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	int maxLines,
	int maxPerLine,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_ToVectorString_1(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	int maxLines,
	int maxPerLine,
	int padding,
	char * format,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_ToString(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	int maxLines,
	int maxPerLine,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_ToString_1(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_ToString_2(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	char * format,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_ToString_3(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_At(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	int index,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_At_1(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	int index,
	System_Numerics_Complex value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_Clear(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_ClearSubVector(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	int index,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_CreateMatrix(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	int rows,
	int columns,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_CreateVector(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	int size,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_Add(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	System_Numerics_Complex scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_Add_1(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	System_Numerics_Complex scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_Plus(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_Add_2(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_Add_3(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_Subtract(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	System_Numerics_Complex scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_Subtract_1(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	System_Numerics_Complex scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_Negate(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_Negate_1(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_Subtract_2(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_Subtract_3(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_Conjugate(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_Conjugate_1(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_Multiply(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	System_Numerics_Complex scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_Multiply_1(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	System_Numerics_Complex scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_DotProduct(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_Divide(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	System_Numerics_Complex scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_Divide_1(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	System_Numerics_Complex scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_Modulus(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	System_Numerics_Complex divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_Modulus_1(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	System_Numerics_Complex divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_PointwiseMultiply(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_PointwiseMultiply_1(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_PointwiseDivide(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_PointwiseDivide_1(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_OuterProduct(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 v,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_Maximum(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Vector_Minimum(
	MathNet_Numerics_LinearAlgebra_Complex_Vector __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.DenseVector
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector__Create(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector * __instance,
	MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1 storage,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector__Create_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector * __instance,
	int length,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector__Create_2(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector * __instance,
	System_Numerics_Complex * storage,
	ssize_t __storageLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector__Create_3(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector * __instance,
	int length,
	System_Numerics_Complex value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector__Create_4(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector__Create_5(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector * __instance,
	System_Collections_Generic_IEnumerable_T1 other,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_Get_Values(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	System_Numerics_Complex ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_Get_Storage(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_Get_Count(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_Get_Item(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	int index,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_Set_Item(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	int index,
	System_Numerics_Complex value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_OfVector(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 vector,
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_OfEnumerable(
	System_Collections_Generic_IEnumerable_T1 enumerable,
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_OfIndexedEnumerable(
	int length,
	System_Collections_Generic_IEnumerable_T1 enumerable,
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_Create(
	int length,
	System_Func_T2 init,
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_CreateRandom(
	int length,
	MathNet_Numerics_Distributions_IContinuousDistribution distribution,
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_op_Explicit(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector vector,
	System_Numerics_Complex ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_op_Implicit(
	System_Numerics_Complex * array,
	ssize_t __arrayLength,
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_CreateMatrix(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	int rows,
	int columns,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_CreateVector(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	int size,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_op_Addition(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector leftSide,
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_op_UnaryNegation(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_op_Subtraction(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector leftSide,
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_op_Multiply(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector leftSide,
	System_Numerics_Complex rightSide,
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_op_Multiply_1(
	System_Numerics_Complex leftSide,
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector rightSide,
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_op_Multiply_2(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector leftSide,
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector rightSide,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_op_Division(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector leftSide,
	System_Numerics_Complex rightSide,
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_AbsoluteMinimumIndex(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_AbsoluteMinimum(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_AbsoluteMaximum(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_AbsoluteMaximumIndex(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_Sum(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_SumMagnitudes(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_OuterProduct(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector u,
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector v,
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_OuterProduct_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector v,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_Norm(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	double p,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_Parse(
	char * value,
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_Parse_1(
	char * value,
	System_IFormatProvider formatProvider,
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_TryParse(
	char * value,
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector * result,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_TryParse_1(
	char * value,
	System_IFormatProvider formatProvider,
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector * result,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_MaximumIndex(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_MinimumIndex(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_Normalize(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	double p,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_Clone(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_SetValues(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	System_Numerics_Complex * values,
	ssize_t __valuesLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_CopyTo(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 target,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_SubVector(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	int index,
	int count,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_SetSubVector(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	int index,
	int count,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 subVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_CopySubVectorTo(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 destination,
	int sourceIndex,
	int targetIndex,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_CopyTo_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 destination,
	int sourceIndex,
	int targetIndex,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_ToArray(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	System_Numerics_Complex ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_ToColumnMatrix(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_ToRowMatrix(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_GetEnumerator(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	System_Collections_Generic_IEnumerator_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_GetIndexedEnumerator(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_MapInplace(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	System_Func_T2 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_MapIndexedInplace(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	System_Func_T3 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_Equals(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_Equals_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_GetHashCode(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_ToTypeString(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_ToVectorString(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	int maxLines,
	int maxPerLine,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_ToVectorString_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	int maxLines,
	int maxPerLine,
	int padding,
	char * format,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_ToString(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	int maxLines,
	int maxPerLine,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_ToString_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_ToString_2(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	char * format,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_ToString_3(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_At(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	int index,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_At_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	int index,
	System_Numerics_Complex value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_Clear(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_ClearSubVector(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	int index,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_Add(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	System_Numerics_Complex scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_Add_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	System_Numerics_Complex scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_Plus(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_Add_2(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_Add_3(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_Subtract(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	System_Numerics_Complex scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_Subtract_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	System_Numerics_Complex scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_Negate(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_Negate_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_Subtract_2(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_Subtract_3(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_Conjugate(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_Conjugate_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_Multiply(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	System_Numerics_Complex scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_Multiply_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	System_Numerics_Complex scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_DotProduct(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_Divide(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	System_Numerics_Complex scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_Divide_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	System_Numerics_Complex scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_Modulus(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	System_Numerics_Complex divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_Modulus_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	System_Numerics_Complex divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_PointwiseMultiply(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_PointwiseMultiply_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_PointwiseDivide(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_PointwiseDivide_1(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_OuterProduct_2(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 v,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_Maximum(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DenseVector_Minimum(
	MathNet_Numerics_LinearAlgebra_Complex_DenseVector __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix__Create(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix * __instance,
	MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1 storage,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix__Create_1(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix * __instance,
	int order,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix__Create_2(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix * __instance,
	int rows,
	int columns,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix__Create_3(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix * __instance,
	int rows,
	int columns,
	System_Numerics_Complex diagonalValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix__Create_4(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix * __instance,
	int rows,
	int columns,
	System_Numerics_Complex * diagonalStorage,
	ssize_t __diagonalStorageLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix__Create_5(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix * __instance,
	System_Numerics_Complex * array,
	ssize_t __arrayLength1,
	ssize_t __arrayLength2,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix__Create_6(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Get_IsSymmetric(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Get_Storage(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Get_ColumnCount(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Get_RowCount(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Get_Item(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	int row,
	int column,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Set_Item(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	int row,
	int column,
	System_Numerics_Complex value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_OfMatrix(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_OfArray(
	System_Numerics_Complex * array,
	ssize_t __arrayLength1,
	ssize_t __arrayLength2,
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_OfIndexedDiagonal(
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 diagonal,
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_OfDiagonal(
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 diagonal,
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Create(
	int rows,
	int columns,
	System_Func_T2 init,
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_CreateRandom(
	int rows,
	int columns,
	MathNet_Numerics_Distributions_IContinuousDistribution distribution,
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_CreateMatrix(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	int numberOfRows,
	int numberOfColumns,
	int fullyMutable,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_CreateVector(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	int size,
	int fullyMutable,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Add(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Subtract(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_SetDiagonal(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	System_Numerics_Complex * source,
	ssize_t __sourceLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_SetDiagonal_1(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 source,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Multiply(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Multiply_1(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Multiply_2(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_LeftMultiply(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Diagonal(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_TransposeAndMultiply(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_TransposeAndMultiply_1(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Transpose(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_L1Norm(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_L2Norm(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_FrobeniusNorm(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_InfinityNorm(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_ConditionNumber(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Inverse(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_LowerTriangle(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_LowerTriangle_1(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_StrictlyLowerTriangle(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_StrictlyLowerTriangle_1(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_UpperTriangle(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_UpperTriangle_1(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_StrictlyUpperTriangle(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_StrictlyUpperTriangle_1(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_SubMatrix(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_InsertColumn(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	int columnIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 column,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_InsertRow(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	int rowIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 row,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_PermuteColumns(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_Permutation p,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_PermuteRows(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_Permutation p,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Identity(
	int order,
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_ConjugateTranspose(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Trace(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_SetColumn(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	int columnIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 column,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_SetColumn_1(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	int columnIndex,
	System_Numerics_Complex * column,
	ssize_t __columnLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_SetRow(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	int rowIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 row,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_SetRow_1(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	int rowIndex,
	System_Numerics_Complex * row,
	ssize_t __rowLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_SetSubMatrix(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 subMatrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Append(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 right,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Append_1(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 right,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Stack(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Stack_1(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_DiagonalStack(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_DiagonalStack_1(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_ColumnEnumerator(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_ColumnEnumerator_1(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	int index,
	int length,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_RowEnumerator(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	int index,
	int length,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_RowEnumerator_1(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_IndexedEnumerator(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_ToArray(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	System_Numerics_Complex ** __returnValue,
	ssize_t * ____returnValueLength1,
	ssize_t * ____returnValueLength2,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_ToColumnWiseArray(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	System_Numerics_Complex ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_ToRowWiseArray(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	System_Numerics_Complex ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_MapInplace(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	System_Func_T2 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_MapIndexedInplace(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	System_Func_T4 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Add_1(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Subtract_1(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Multiply_3(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	System_Numerics_Complex scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Multiply_4(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	System_Numerics_Complex scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Divide(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	System_Numerics_Complex scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Divide_1(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	System_Numerics_Complex scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Multiply_5(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_LeftMultiply_1(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_TransposeThisAndMultiply(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_TransposeThisAndMultiply_1(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_TransposeThisAndMultiply_2(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_TransposeThisAndMultiply_3(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Negate(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Negate_1(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Conjugate(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Conjugate_1(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_PointwiseMultiply(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_PointwiseMultiply_1(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_PointwiseDivide(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_PointwiseDivide_1(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Modulus(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	System_Numerics_Complex divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Modulus_1(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	System_Numerics_Complex divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Rank(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_KroneckerProduct(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_KroneckerProduct_1(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_NormalizeColumns(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	int p,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_NormalizeRows(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	int p,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Equals(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Equals_1(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_GetHashCode(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_ToTypeString(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_ToMatrixString(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	int maxRows,
	int maxColumns,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_ToMatrixString_1(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	int maxRows,
	int maxColumns,
	int padding,
	char * format,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_ToString(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	int maxRows,
	int maxColumns,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_ToString_1(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_ToString_2(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	char * format,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_At(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	int row,
	int column,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_At_1(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	int row,
	int column,
	System_Numerics_Complex value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Clear(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_ClearColumn(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	int columnIndex,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_ClearRow(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	int rowIndex,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_ClearSubMatrix(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Clone(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_CopyTo(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 target,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Row(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Row_1(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Row_2(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	int rowIndex,
	int columnIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Row_3(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	int rowIndex,
	int columnIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Column(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Column_1(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Column_2(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	int columnIndex,
	int rowIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix_Column_3(
	MathNet_Numerics_LinearAlgebra_Complex_DiagonalMatrix __instance,
	int columnIndex,
	int rowIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.ExtensionMethods
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_ExtensionMethods_Cholesky(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_Cholesky * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_ExtensionMethods_LU(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_LU * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_ExtensionMethods_QR(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_QR * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_ExtensionMethods_GramSchmidt(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_GramSchmidt * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_ExtensionMethods_Svd(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	int computeVectors,
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_Svd * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_ExtensionMethods_Evd(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_Evd * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.Factorization.Cholesky
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_Cholesky_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_Cholesky __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_Cholesky_Get_DeterminantLn(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_Cholesky __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_Cholesky_Get_Factor(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_Cholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_Cholesky_Solve(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_Cholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_Cholesky_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_Cholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_Cholesky_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_Cholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_Cholesky_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_Cholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseCholesky
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseCholesky__Create(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseCholesky * __instance,
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseCholesky_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseCholesky __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseCholesky_Get_DeterminantLn(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseCholesky __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseCholesky_Get_Factor(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseCholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseCholesky_Solve(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseCholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseCholesky_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseCholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseCholesky_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseCholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseCholesky_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseCholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.Factorization.Evd
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_Evd_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_Evd __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_Evd_Get_Rank(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_Evd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_Evd_Get_IsFullRank(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_Evd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_Evd_Get_IsSymmetric(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_Evd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_Evd_EigenValues(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_Evd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_Evd_EigenVectors(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_Evd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_Evd_D(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_Evd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_Evd_Solve(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_Evd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_Evd_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_Evd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_Evd_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_Evd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_Evd_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_Evd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseEvd
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseEvd__Create(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseEvd * __instance,
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseEvd_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseEvd __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseEvd_Get_Rank(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseEvd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseEvd_Get_IsFullRank(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseEvd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseEvd_Get_IsSymmetric(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseEvd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseEvd_Solve(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseEvd_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseEvd_EigenValues(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseEvd_EigenVectors(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseEvd_D(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseEvd_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseEvd_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.Factorization.GramSchmidt
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_GramSchmidt_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_GramSchmidt __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_GramSchmidt_Get_IsFullRank(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_GramSchmidt __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_GramSchmidt_Get_Q(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_GramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_GramSchmidt_Get_R(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_GramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_GramSchmidt_Solve(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_GramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_GramSchmidt_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_GramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_GramSchmidt_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_GramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_GramSchmidt_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_GramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseGramSchmidt
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseGramSchmidt__Create(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseGramSchmidt * __instance,
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseGramSchmidt_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseGramSchmidt __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseGramSchmidt_Get_IsFullRank(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseGramSchmidt __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseGramSchmidt_Get_Q(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseGramSchmidt_Get_R(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseGramSchmidt_Solve(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseGramSchmidt_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseGramSchmidt_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseGramSchmidt_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.Factorization.LU
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_LU_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_LU __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_LU_Get_L(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_LU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_LU_Get_U(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_LU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_LU_Get_P(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_LU __instance,
	MathNet_Numerics_Permutation * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_LU_Solve(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_LU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_LU_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_LU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_LU_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_LU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_LU_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_LU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_LU_Inverse(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_LU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseLU
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseLU__Create(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseLU * __instance,
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseLU_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseLU __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseLU_Get_L(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseLU_Get_U(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseLU_Get_P(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseLU __instance,
	MathNet_Numerics_Permutation * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseLU_Solve(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseLU_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseLU_Inverse(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseLU_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseLU_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.Factorization.QR
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_QR_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_QR __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_QR_Get_IsFullRank(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_QR __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_QR_Get_Q(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_QR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_QR_Get_R(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_QR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_QR_Solve(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_QR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_QR_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_QR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_QR_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_QR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_QR_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_QR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseQR
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseQR__Create(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseQR * __instance,
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix matrix,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseQR_Get_Tau(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseQR __instance,
	System_Numerics_Complex ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseQR_Set_Tau(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseQR __instance,
	System_Numerics_Complex * value,
	ssize_t __valueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseQR_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseQR __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseQR_Get_IsFullRank(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseQR __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseQR_Get_Q(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseQR_Get_R(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseQR_Solve(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseQR_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseQR_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseQR_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.Factorization.Svd
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_Svd_Get_Rank(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_Svd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_Svd_Get_Norm2(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_Svd __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_Svd_Get_ConditionNumber(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_Svd __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_Svd_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_Svd __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_Svd_U(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_Svd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_Svd_VT(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_Svd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_Svd_W(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_Svd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_Svd_S(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_Svd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_Svd_Solve(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_Svd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_Svd_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_Svd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_Svd_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_Svd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_Svd_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_Svd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseSvd
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseSvd__Create(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseSvd * __instance,
	MathNet_Numerics_LinearAlgebra_Complex_DenseMatrix matrix,
	int computeVectors,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseSvd_Get_Rank(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseSvd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseSvd_Get_Norm2(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseSvd __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseSvd_Get_ConditionNumber(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseSvd __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseSvd_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseSvd __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseSvd_Solve(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseSvd_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseSvd_U(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseSvd_VT(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseSvd_W(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseSvd_S(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseSvd_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseSvd_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_DenseSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserCholesky
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserCholesky__Create(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserCholesky * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserCholesky_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserCholesky __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserCholesky_Get_DeterminantLn(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserCholesky __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserCholesky_Get_Factor(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserCholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserCholesky_Solve(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserCholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserCholesky_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserCholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserCholesky_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserCholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserCholesky_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserCholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserEvd
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserEvd__Create(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserEvd * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserEvd_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserEvd __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserEvd_Get_Rank(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserEvd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserEvd_Get_IsFullRank(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserEvd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserEvd_Get_IsSymmetric(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserEvd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserEvd_Solve(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserEvd_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserEvd_EigenValues(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserEvd_EigenVectors(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserEvd_D(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserEvd_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserEvd_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserGramSchmidt
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserGramSchmidt__Create(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserGramSchmidt * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserGramSchmidt_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserGramSchmidt __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserGramSchmidt_Get_IsFullRank(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserGramSchmidt __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserGramSchmidt_Get_Q(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserGramSchmidt_Get_R(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserGramSchmidt_Solve(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserGramSchmidt_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserGramSchmidt_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserGramSchmidt_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserLU
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserLU__Create(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserLU * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserLU_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserLU __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserLU_Get_L(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserLU_Get_U(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserLU_Get_P(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserLU __instance,
	MathNet_Numerics_Permutation * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserLU_Solve(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserLU_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserLU_Inverse(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserLU_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserLU_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserQR
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserQR__Create(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserQR * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserQR_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserQR __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserQR_Get_IsFullRank(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserQR __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserQR_Get_Q(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserQR_Get_R(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserQR_Solve(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserQR_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserQR_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserQR_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserSvd
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserSvd__Create(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserSvd * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	int computeVectors,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserSvd_Get_Rank(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserSvd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserSvd_Get_Norm2(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserSvd __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserSvd_Get_ConditionNumber(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserSvd __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserSvd_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserSvd __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserSvd_Solve(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserSvd_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserSvd_U(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserSvd_VT(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserSvd_W(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserSvd_S(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserSvd_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserSvd_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex_Factorization_UserSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterativeSolver
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterativeSolver_Get_IterationResult(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterativeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterativeSolver_StopSolve(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterativeSolver __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterativeSolver_SetIterator(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterativeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterativeSolver_Solve(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterativeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex_Vector vector,
	MathNet_Numerics_LinearAlgebra_Complex_Vector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterativeSolver_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterativeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex_Vector input,
	MathNet_Numerics_LinearAlgebra_Complex_Vector result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterativeSolver_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterativeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix input,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterativeSolver_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterativeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix input,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterativeSolverSetup
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterativeSolverSetup_Get_SolverType(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterativeSolverSetup __instance,
	System_Type * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterativeSolverSetup_Get_PreconditionerType(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterativeSolverSetup __instance,
	System_Type * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterativeSolverSetup_Get_SolutionSpeed(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterativeSolverSetup __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterativeSolverSetup_Get_Reliability(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterativeSolverSetup __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterativeSolverSetup_CreateNew(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterativeSolverSetup __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterativeSolver * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterator_Get_Status(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterator __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterator_Add(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterator __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IIterationStopCriterium stopCriterium,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterator_Remove(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterator __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IIterationStopCriterium stopCriterium,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterator_Contains(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterator __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IIterationStopCriterium stopCriterium,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterator_IterationCancelled(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterator __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterator_DetermineStatus(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterator __instance,
	int iterationNumber,
	MathNet_Numerics_LinearAlgebra_Complex_Vector solutionVector,
	MathNet_Numerics_LinearAlgebra_Complex_Vector sourceVector,
	MathNet_Numerics_LinearAlgebra_Complex_Vector residualVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterator_ResetToPrecalculationState(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterator __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterator_Clone(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterator __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterator * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.BiCgStab
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_BiCgStab__Create(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_BiCgStab * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_BiCgStab__Create_1(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_BiCgStab * __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_BiCgStab__Create_2(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_BiCgStab * __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_IPreConditioner preconditioner,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_BiCgStab__Create_3(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_BiCgStab * __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_IPreConditioner preconditioner,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_BiCgStab_Get_IterationResult(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_BiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_BiCgStab_SetPreconditioner(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_BiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_IPreConditioner preconditioner,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_BiCgStab_SetIterator(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_BiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_BiCgStab_StopSolve(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_BiCgStab __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_BiCgStab_Solve(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_BiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex_Vector vector,
	MathNet_Numerics_LinearAlgebra_Complex_Vector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_BiCgStab_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_BiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex_Vector input,
	MathNet_Numerics_LinearAlgebra_Complex_Vector result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_BiCgStab_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_BiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix input,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_BiCgStab_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_BiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix input,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.CompositeSolver
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_CompositeSolver__Create(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_CompositeSolver * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_CompositeSolver__Create_1(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_CompositeSolver * __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_CompositeSolver_Get_IterationResult(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_CompositeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_CompositeSolver_LoadSolverInformation(
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_CompositeSolver_LoadSolverInformation_1(
	System_Type * typesToExclude,
	ssize_t __typesToExcludeLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_CompositeSolver_LoadSolverInformationFromAssembly(
	System_Reflection_AssemblyName assemblyName,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_CompositeSolver_LoadSolverInformationFromAssembly_1(
	System_Reflection_AssemblyName assemblyName,
	System_Type * typesToExclude,
	ssize_t __typesToExcludeLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_CompositeSolver_LoadSolverInformationFromAssembly_2(
	System_Type typeInAssembly,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_CompositeSolver_LoadSolverInformationFromAssembly_3(
	System_Type typeInAssembly,
	System_Type * typesToExclude,
	ssize_t __typesToExcludeLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_CompositeSolver_LoadSolverInformationFromAssembly_4(
	System_Reflection_Assembly assembly,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_CompositeSolver_LoadSolverInformationFromAssembly_5(
	System_Reflection_Assembly assembly,
	System_Type * typesToExclude,
	ssize_t __typesToExcludeLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_CompositeSolver_SetIterator(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_CompositeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_CompositeSolver_StopSolve(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_CompositeSolver __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_CompositeSolver_Solve(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_CompositeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex_Vector vector,
	MathNet_Numerics_LinearAlgebra_Complex_Vector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_CompositeSolver_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_CompositeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex_Vector input,
	MathNet_Numerics_LinearAlgebra_Complex_Vector result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_CompositeSolver_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_CompositeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix input,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_CompositeSolver_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_CompositeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix input,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.CompositeSolver+DoubleComparer
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_CompositeSolver_DoubleComparer__Create(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_CompositeSolver_DoubleComparer * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_CompositeSolver_DoubleComparer_Compare(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_CompositeSolver_DoubleComparer __instance,
	double x,
	double y,
	int * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.GpBiCg
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_GpBiCg__Create(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_GpBiCg * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_GpBiCg__Create_1(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_GpBiCg * __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_GpBiCg__Create_2(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_GpBiCg * __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_IPreConditioner preconditioner,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_GpBiCg__Create_3(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_GpBiCg * __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_IPreConditioner preconditioner,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_GpBiCg_Get_NumberOfBiCgStabSteps(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_GpBiCg __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_GpBiCg_Set_NumberOfBiCgStabSteps(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_GpBiCg __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_GpBiCg_Get_NumberOfGpBiCgSteps(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_GpBiCg __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_GpBiCg_Set_NumberOfGpBiCgSteps(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_GpBiCg __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_GpBiCg_Get_IterationResult(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_GpBiCg __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_GpBiCg_SetPreconditioner(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_GpBiCg __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_IPreConditioner preconditioner,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_GpBiCg_SetIterator(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_GpBiCg __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_GpBiCg_StopSolve(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_GpBiCg __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_GpBiCg_Solve(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_GpBiCg __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex_Vector vector,
	MathNet_Numerics_LinearAlgebra_Complex_Vector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_GpBiCg_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_GpBiCg __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex_Vector input,
	MathNet_Numerics_LinearAlgebra_Complex_Vector result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_GpBiCg_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_GpBiCg __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix input,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_GpBiCg_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_GpBiCg __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix input,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.MlkBiCgStab
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_MlkBiCgStab__Create(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_MlkBiCgStab * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_MlkBiCgStab__Create_1(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_MlkBiCgStab * __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_MlkBiCgStab__Create_2(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_MlkBiCgStab * __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_IPreConditioner preconditioner,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_MlkBiCgStab__Create_3(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_MlkBiCgStab * __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_IPreConditioner preconditioner,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_MlkBiCgStab_Get_NumberOfStartingVectors(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_MlkBiCgStab __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_MlkBiCgStab_Set_NumberOfStartingVectors(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_MlkBiCgStab __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_MlkBiCgStab_Get_StartingVectors(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_MlkBiCgStab __instance,
	System_Collections_Generic_IList_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_MlkBiCgStab_Set_StartingVectors(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_MlkBiCgStab __instance,
	System_Collections_Generic_IList_T1 value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_MlkBiCgStab_Get_IterationResult(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_MlkBiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_MlkBiCgStab_ResetNumberOfStartingVectors(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_MlkBiCgStab __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_MlkBiCgStab_SetPreconditioner(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_MlkBiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_IPreConditioner preconditioner,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_MlkBiCgStab_SetIterator(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_MlkBiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_MlkBiCgStab_StopSolve(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_MlkBiCgStab __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_MlkBiCgStab_Solve(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_MlkBiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex_Vector vector,
	MathNet_Numerics_LinearAlgebra_Complex_Vector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_MlkBiCgStab_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_MlkBiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex_Vector input,
	MathNet_Numerics_LinearAlgebra_Complex_Vector result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_MlkBiCgStab_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_MlkBiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix input,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_MlkBiCgStab_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_MlkBiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix input,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.TFQMR
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_TFQMR__Create(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_TFQMR * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_TFQMR__Create_1(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_TFQMR * __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_TFQMR__Create_2(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_TFQMR * __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_IPreConditioner preconditioner,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_TFQMR__Create_3(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_TFQMR * __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_IPreConditioner preconditioner,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_TFQMR_Get_IterationResult(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_TFQMR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_TFQMR_SetPreconditioner(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_TFQMR __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_IPreConditioner preconditioner,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_TFQMR_SetIterator(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_TFQMR __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_TFQMR_StopSolve(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_TFQMR __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_TFQMR_Solve(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_TFQMR __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex_Vector vector,
	MathNet_Numerics_LinearAlgebra_Complex_Vector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_TFQMR_Solve_1(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_TFQMR __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex_Vector input,
	MathNet_Numerics_LinearAlgebra_Complex_Vector result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_TFQMR_Solve_2(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_TFQMR __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix input,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_TFQMR_Solve_3(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterative_TFQMR __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix input,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterator
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterator__Create(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterator * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterator__Create_1(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterator * __instance,
	System_Collections_Generic_IEnumerable_T1 stopCriteria,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterator_Get_Status(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterator __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterator_CreateDefault(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterator * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterator_Add(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterator __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IIterationStopCriterium stopCriterium,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterator_Remove(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterator __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IIterationStopCriterium stopCriterium,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterator_Contains(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterator __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IIterationStopCriterium stopCriterium,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterator_IterationCancelled(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterator __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterator_DetermineStatus(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterator __instance,
	int iterationNumber,
	MathNet_Numerics_LinearAlgebra_Complex_Vector solutionVector,
	MathNet_Numerics_LinearAlgebra_Complex_Vector sourceVector,
	MathNet_Numerics_LinearAlgebra_Complex_Vector residualVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterator_ResetToPrecalculationState(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterator __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterator_Clone(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Iterator __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_IIterator * __returnValue,
	CDotNetHandle * __exception);

int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_IPreConditioner_Initialize(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_IPreConditioner __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_IPreConditioner_Approximate(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_IPreConditioner __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Vector rhs,
	MathNet_Numerics_LinearAlgebra_Complex_Vector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_IPreConditioner_Approximate_1(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_IPreConditioner __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Vector rhs,
	MathNet_Numerics_LinearAlgebra_Complex_Vector lhs,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.Diagonal
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_Diagonal__Create(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_Diagonal * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_Diagonal_Initialize(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_Diagonal __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_Diagonal_Approximate(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_Diagonal __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Vector rhs,
	MathNet_Numerics_LinearAlgebra_Complex_Vector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_Diagonal_Approximate_1(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_Diagonal __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Vector rhs,
	MathNet_Numerics_LinearAlgebra_Complex_Vector lhs,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.Ilutp
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_Ilutp__Create(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_Ilutp * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_Ilutp__Create_1(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_Ilutp * __instance,
	double fillLevel,
	double dropTolerance,
	double pivotTolerance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_Ilutp_Get_FillLevel(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_Ilutp __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_Ilutp_Set_FillLevel(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_Ilutp __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_Ilutp_Get_DropTolerance(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_Ilutp __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_Ilutp_Set_DropTolerance(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_Ilutp __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_Ilutp_Get_PivotTolerance(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_Ilutp __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_Ilutp_Set_PivotTolerance(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_Ilutp __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_Ilutp_Initialize(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_Ilutp __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_Ilutp_Approximate(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_Ilutp __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Vector rhs,
	MathNet_Numerics_LinearAlgebra_Complex_Vector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_Ilutp_Approximate_1(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_Ilutp __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Vector rhs,
	MathNet_Numerics_LinearAlgebra_Complex_Vector lhs,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_Ilutp__Get__DefaultFillLevel(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_Ilutp__Get__DefaultDropTolerance(
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IncompleteLU
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_IncompleteLU__Create(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_IncompleteLU * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_IncompleteLU_Initialize(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_IncompleteLU __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Matrix matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_IncompleteLU_Approximate(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_IncompleteLU __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Vector rhs,
	MathNet_Numerics_LinearAlgebra_Complex_Vector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_IncompleteLU_Approximate_1(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_Preconditioners_IncompleteLU __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Vector rhs,
	MathNet_Numerics_LinearAlgebra_Complex_Vector lhs,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IIterationStopCriterium
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IIterationStopCriterium_Get_Status(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IIterationStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IIterationStopCriterium_Get_StopLevel(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IIterationStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_StopCriterium_StopLevel * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IIterationStopCriterium_DetermineStatus(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IIterationStopCriterium __instance,
	int iterationNumber,
	MathNet_Numerics_LinearAlgebra_Complex_Vector solutionVector,
	MathNet_Numerics_LinearAlgebra_Complex_Vector sourceVector,
	MathNet_Numerics_LinearAlgebra_Complex_Vector residualVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IIterationStopCriterium_ResetToPrecalculationState(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IIterationStopCriterium __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IIterationStopCriterium_Clone(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IIterationStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IIterationStopCriterium * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.DivergenceStopCriterium
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_DivergenceStopCriterium__Create(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_DivergenceStopCriterium * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_DivergenceStopCriterium__Create_1(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_DivergenceStopCriterium * __instance,
	double maximumRelativeIncrease,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_DivergenceStopCriterium__Create_2(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_DivergenceStopCriterium * __instance,
	int minimumIterations,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_DivergenceStopCriterium__Create_3(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_DivergenceStopCriterium * __instance,
	double maximumRelativeIncrease,
	int minimumIterations,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_DivergenceStopCriterium_Get_MaximumRelativeIncrease(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_DivergenceStopCriterium_Set_MaximumRelativeIncrease(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_DivergenceStopCriterium_Get_MinimumNumberOfIterations(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_DivergenceStopCriterium_Set_MinimumNumberOfIterations(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_DivergenceStopCriterium_Get_Status(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_DivergenceStopCriterium_Get_StopLevel(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_StopCriterium_StopLevel * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_DivergenceStopCriterium_ResetMaximumRelativeIncreaseToDefault(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_DivergenceStopCriterium_ResetNumberOfIterationsToDefault(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_DivergenceStopCriterium_DetermineStatus(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	int iterationNumber,
	MathNet_Numerics_LinearAlgebra_Complex_Vector solutionVector,
	MathNet_Numerics_LinearAlgebra_Complex_Vector sourceVector,
	MathNet_Numerics_LinearAlgebra_Complex_Vector residualVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_DivergenceStopCriterium_ResetToPrecalculationState(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_DivergenceStopCriterium_Clone(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IIterationStopCriterium * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_DivergenceStopCriterium__Get__DefaultMaximumRelativeIncrease(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_DivergenceStopCriterium__Get__DefaultMinimumNumberOfIterations(
	int * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.FailureStopCriterium
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_FailureStopCriterium__Create(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_FailureStopCriterium * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_FailureStopCriterium_Get_Status(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_FailureStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_FailureStopCriterium_Get_StopLevel(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_FailureStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_StopCriterium_StopLevel * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_FailureStopCriterium_DetermineStatus(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_FailureStopCriterium __instance,
	int iterationNumber,
	MathNet_Numerics_LinearAlgebra_Complex_Vector solutionVector,
	MathNet_Numerics_LinearAlgebra_Complex_Vector sourceVector,
	MathNet_Numerics_LinearAlgebra_Complex_Vector residualVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_FailureStopCriterium_ResetToPrecalculationState(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_FailureStopCriterium __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_FailureStopCriterium_Clone(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_FailureStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IIterationStopCriterium * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IterationCountStopCriterium
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IterationCountStopCriterium__Create(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IterationCountStopCriterium * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IterationCountStopCriterium__Create_1(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IterationCountStopCriterium * __instance,
	int maximumNumberOfIterations,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IterationCountStopCriterium_Get_MaximumNumberOfIterations(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IterationCountStopCriterium __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IterationCountStopCriterium_Set_MaximumNumberOfIterations(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IterationCountStopCriterium __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IterationCountStopCriterium_Get_Status(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IterationCountStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IterationCountStopCriterium_Get_StopLevel(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IterationCountStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_StopCriterium_StopLevel * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IterationCountStopCriterium_ResetMaximumNumberOfIterationsToDefault(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IterationCountStopCriterium __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IterationCountStopCriterium_DetermineStatus(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IterationCountStopCriterium __instance,
	int iterationNumber,
	MathNet_Numerics_LinearAlgebra_Complex_Vector solutionVector,
	MathNet_Numerics_LinearAlgebra_Complex_Vector sourceVector,
	MathNet_Numerics_LinearAlgebra_Complex_Vector residualVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IterationCountStopCriterium_ResetToPrecalculationState(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IterationCountStopCriterium __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IterationCountStopCriterium_Clone(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IterationCountStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IIterationStopCriterium * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IterationCountStopCriterium__Get__DefaultMaximumNumberOfIterations(
	int * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.ResidualStopCriterium
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_ResidualStopCriterium__Create(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_ResidualStopCriterium * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_ResidualStopCriterium__Create_1(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_ResidualStopCriterium * __instance,
	double maximum,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_ResidualStopCriterium__Create_2(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_ResidualStopCriterium * __instance,
	int minimumIterationsBelowMaximum,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_ResidualStopCriterium__Create_3(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_ResidualStopCriterium * __instance,
	double maximum,
	int minimumIterationsBelowMaximum,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_ResidualStopCriterium_Get_Maximum(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_ResidualStopCriterium __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_ResidualStopCriterium_Set_Maximum(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_ResidualStopCriterium __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_ResidualStopCriterium_Get_MinimumIterationsBelowMaximum(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_ResidualStopCriterium __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_ResidualStopCriterium_Set_MinimumIterationsBelowMaximum(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_ResidualStopCriterium __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_ResidualStopCriterium_Get_Status(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_ResidualStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_ResidualStopCriterium_Get_StopLevel(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_ResidualStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_StopCriterium_StopLevel * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_ResidualStopCriterium_ResetMaximumResidualToDefault(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_ResidualStopCriterium __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_ResidualStopCriterium_ResetMinimumIterationsBelowMaximumToDefault(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_ResidualStopCriterium __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_ResidualStopCriterium_DetermineStatus(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_ResidualStopCriterium __instance,
	int iterationNumber,
	MathNet_Numerics_LinearAlgebra_Complex_Vector solutionVector,
	MathNet_Numerics_LinearAlgebra_Complex_Vector sourceVector,
	MathNet_Numerics_LinearAlgebra_Complex_Vector residualVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_ResidualStopCriterium_ResetToPrecalculationState(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_ResidualStopCriterium __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_ResidualStopCriterium_Clone(
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_ResidualStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_IIterationStopCriterium * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_ResidualStopCriterium__Get__DefaultMaximumResidual(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_Solvers_StopCriterium_ResidualStopCriterium__Get__DefaultMinimumIterationsBelowMaximum(
	int * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix__Create(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix * __instance,
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 storage,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix__Create_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix * __instance,
	int order,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix__Create_2(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix * __instance,
	int rows,
	int columns,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix__Create_3(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix * __instance,
	int rows,
	int columns,
	System_Numerics_Complex value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix__Create_4(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix * __instance,
	int rows,
	int columns,
	System_Numerics_Complex * array,
	ssize_t __arrayLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix__Create_5(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix * __instance,
	System_Numerics_Complex * array,
	ssize_t __arrayLength1,
	ssize_t __arrayLength2,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix__Create_6(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Get_NonZerosCount(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Get_IsSymmetric(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Get_Storage(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Get_ColumnCount(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Get_RowCount(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Get_Item(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	int row,
	int column,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Set_Item(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	int row,
	int column,
	System_Numerics_Complex value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_OfMatrix(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_OfArray(
	System_Numerics_Complex * array,
	ssize_t __arrayLength1,
	ssize_t __arrayLength2,
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_OfIndexed(
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 enumerable,
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_OfRowMajor(
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 rowMajor,
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_OfColumnMajor(
	int rows,
	int columns,
	System_Collections_Generic_IList_T1 columnMajor,
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_OfColumns(
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_OfColumnsCovariant(
	char * TColumn,
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_OfRows(
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_OfRowsCovariant(
	char * TRow,
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Create(
	int rows,
	int columns,
	System_Func_T3 init,
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_CreateMatrix(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	int numberOfRows,
	int numberOfColumns,
	int fullyMutable,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_CreateVector(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	int size,
	int fullyMutable,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_LowerTriangle(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_LowerTriangle_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_UpperTriangle(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_UpperTriangle_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_StrictlyLowerTriangle(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_StrictlyLowerTriangle_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_StrictlyUpperTriangle(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_StrictlyUpperTriangle_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Transpose(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_FrobeniusNorm(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_InfinityNorm(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Identity(
	int order,
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_KroneckerProduct(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_IndexedEnumerator(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_op_Addition(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix leftSide,
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_op_UnaryPlus(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_op_Subtraction(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix leftSide,
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_op_UnaryNegation(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_op_Multiply(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix leftSide,
	System_Numerics_Complex rightSide,
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_op_Multiply_1(
	System_Numerics_Complex leftSide,
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_op_Multiply_2(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix leftSide,
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_op_Multiply_3(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix leftSide,
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector rightSide,
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_op_Multiply_4(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector leftSide,
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_op_Modulus(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix leftSide,
	System_Numerics_Complex rightSide,
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_ToTypeString(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_L1Norm(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_ConjugateTranspose(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Trace(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_InsertColumn(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	int columnIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 column,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_SetColumn(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	int columnIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 column,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_SetColumn_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	int columnIndex,
	System_Numerics_Complex * column,
	ssize_t __columnLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_InsertRow(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	int rowIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 row,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_SetRow(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	int rowIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 row,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_SetRow_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	int rowIndex,
	System_Numerics_Complex * row,
	ssize_t __rowLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_SetSubMatrix(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 subMatrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_SetDiagonal(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 source,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_SetDiagonal_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	System_Numerics_Complex * source,
	ssize_t __sourceLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_PermuteRows(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_Permutation p,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_PermuteColumns(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_Permutation p,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Append(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 right,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Append_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 right,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Stack(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Stack_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_DiagonalStack(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_DiagonalStack_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_L2Norm(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_ColumnEnumerator(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_ColumnEnumerator_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	int index,
	int length,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_RowEnumerator(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	int index,
	int length,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_RowEnumerator_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_ToArray(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	System_Numerics_Complex ** __returnValue,
	ssize_t * ____returnValueLength1,
	ssize_t * ____returnValueLength2,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_ToColumnWiseArray(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	System_Numerics_Complex ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_ToRowWiseArray(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	System_Numerics_Complex ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_MapInplace(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	System_Func_T2 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_MapIndexedInplace(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	System_Func_T4 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Add(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Add_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Subtract(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Subtract_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Multiply(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	System_Numerics_Complex scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Multiply_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	System_Numerics_Complex scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Divide(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	System_Numerics_Complex scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Divide_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	System_Numerics_Complex scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Multiply_2(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Multiply_3(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_LeftMultiply(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_LeftMultiply_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Multiply_4(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Multiply_5(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_TransposeAndMultiply(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_TransposeAndMultiply_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_TransposeThisAndMultiply(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_TransposeThisAndMultiply_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_TransposeThisAndMultiply_2(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_TransposeThisAndMultiply_3(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Negate(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Negate_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Conjugate(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Conjugate_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_PointwiseMultiply(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_PointwiseMultiply_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_PointwiseDivide(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_PointwiseDivide_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Modulus(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	System_Numerics_Complex divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Modulus_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	System_Numerics_Complex divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Rank(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_ConditionNumber(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Determinant(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Inverse(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_KroneckerProduct_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_NormalizeColumns(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	int p,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_NormalizeRows(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	int p,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Equals(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Equals_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_GetHashCode(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_ToMatrixString(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	int maxRows,
	int maxColumns,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_ToMatrixString_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	int maxRows,
	int maxColumns,
	int padding,
	char * format,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_ToString(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	int maxRows,
	int maxColumns,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_ToString_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_ToString_2(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	char * format,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_At(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	int row,
	int column,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_At_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	int row,
	int column,
	System_Numerics_Complex value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Clear(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_ClearColumn(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	int columnIndex,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_ClearRow(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	int rowIndex,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_ClearSubMatrix(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Clone(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_CopyTo(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 target,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Row(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Row_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Row_2(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	int rowIndex,
	int columnIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Row_3(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	int rowIndex,
	int columnIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Column(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Column_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Column_2(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	int columnIndex,
	int rowIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Column_3(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	int columnIndex,
	int rowIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_SubMatrix(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix_Diagonal(
	MathNet_Numerics_LinearAlgebra_Complex_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Complex.SparseVector
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector__Create(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector * __instance,
	MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1 storage,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector__Create_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector * __instance,
	int length,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector__Create_2(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector * __instance,
	int length,
	System_Numerics_Complex value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector__Create_3(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector__Create_4(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector * __instance,
	System_Collections_Generic_IEnumerable_T1 other,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_Get_NonZerosCount(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_Get_Storage(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_Get_Count(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_Get_Item(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	int index,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_Set_Item(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	int index,
	System_Numerics_Complex value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_OfVector(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 vector,
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_OfEnumerable(
	System_Collections_Generic_IEnumerable_T1 enumerable,
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_OfIndexedEnumerable(
	int length,
	System_Collections_Generic_IEnumerable_T1 enumerable,
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_Create(
	int length,
	System_Func_T2 init,
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_CreateMatrix(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	int rows,
	int columns,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_CreateVector(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	int size,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_op_Addition(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector leftSide,
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector rightSide,
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_op_UnaryNegation(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector rightSide,
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_op_Subtraction(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector leftSide,
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector rightSide,
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_op_Multiply(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector leftSide,
	System_Numerics_Complex rightSide,
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_op_Multiply_1(
	System_Numerics_Complex leftSide,
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector rightSide,
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_op_Multiply_2(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector leftSide,
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector rightSide,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_op_Division(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector leftSide,
	System_Numerics_Complex rightSide,
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_op_Modulus(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector leftSide,
	System_Numerics_Complex rightSide,
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_AbsoluteMinimumIndex(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_Sum(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_SumMagnitudes(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_OuterProduct(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector u,
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector v,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_OuterProduct_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector v,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_Norm(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	double p,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_Parse(
	char * value,
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_Parse_1(
	char * value,
	System_IFormatProvider formatProvider,
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_TryParse(
	char * value,
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector * result,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_TryParse_1(
	char * value,
	System_IFormatProvider formatProvider,
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector * result,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_ToTypeString(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_AbsoluteMinimum(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_AbsoluteMaximum(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_AbsoluteMaximumIndex(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_MaximumIndex(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_MinimumIndex(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_Normalize(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	double p,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_Clone(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_SetValues(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	System_Numerics_Complex * values,
	ssize_t __valuesLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_CopyTo(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 target,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_SubVector(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	int index,
	int count,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_SetSubVector(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	int index,
	int count,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 subVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_CopySubVectorTo(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 destination,
	int sourceIndex,
	int targetIndex,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_CopyTo_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 destination,
	int sourceIndex,
	int targetIndex,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_ToArray(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	System_Numerics_Complex ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_ToColumnMatrix(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_ToRowMatrix(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_GetEnumerator(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	System_Collections_Generic_IEnumerator_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_GetIndexedEnumerator(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_MapInplace(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	System_Func_T2 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_MapIndexedInplace(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	System_Func_T3 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_Equals(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_Equals_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_GetHashCode(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_ToVectorString(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	int maxLines,
	int maxPerLine,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_ToVectorString_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	int maxLines,
	int maxPerLine,
	int padding,
	char * format,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_ToString(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	int maxLines,
	int maxPerLine,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_ToString_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_ToString_2(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	char * format,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_ToString_3(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_At(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	int index,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_At_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	int index,
	System_Numerics_Complex value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_Clear(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_ClearSubVector(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	int index,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_Add(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	System_Numerics_Complex scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_Add_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	System_Numerics_Complex scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_Plus(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_Add_2(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_Add_3(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_Subtract(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	System_Numerics_Complex scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_Subtract_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	System_Numerics_Complex scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_Negate(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_Negate_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_Subtract_2(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_Subtract_3(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_Conjugate(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_Conjugate_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_Multiply(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	System_Numerics_Complex scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_Multiply_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	System_Numerics_Complex scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_DotProduct(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_Divide(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	System_Numerics_Complex scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_Divide_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	System_Numerics_Complex scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_Modulus(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	System_Numerics_Complex divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_Modulus_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	System_Numerics_Complex divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_PointwiseMultiply(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_PointwiseMultiply_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_PointwiseDivide(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_PointwiseDivide_1(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_OuterProduct_2(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 v,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_Maximum(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Complex_SparseVector_Minimum(
	MathNet_Numerics_LinearAlgebra_Complex_SparseVector __instance,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.Matrix
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Get_Storage(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Get_ColumnCount(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Get_RowCount(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Get_Item(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	int row,
	int column,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Set_Item(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	int row,
	int column,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Get_IsSymmetric(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_L1Norm(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_ConjugateTranspose(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_FrobeniusNorm(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_InfinityNorm(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Trace(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_StrictlyLowerTriangle(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_StrictlyLowerTriangle_1(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_StrictlyUpperTriangle(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_StrictlyUpperTriangle_1(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_InsertColumn(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	int columnIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 column,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_SetColumn(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	int columnIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 column,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_SetColumn_1(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	int columnIndex,
	double * column,
	ssize_t __columnLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_InsertRow(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	int rowIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 row,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_SetRow(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	int rowIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 row,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_SetRow_1(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	int rowIndex,
	double * row,
	ssize_t __rowLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_SetSubMatrix(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 subMatrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_SetDiagonal(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 source,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_SetDiagonal_1(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	double * source,
	ssize_t __sourceLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Transpose(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_PermuteRows(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_Permutation p,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_PermuteColumns(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_Permutation p,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Append(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 right,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Append_1(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 right,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Stack(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Stack_1(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_DiagonalStack(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_DiagonalStack_1(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_L2Norm(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_ColumnEnumerator(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_ColumnEnumerator_1(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	int index,
	int length,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_RowEnumerator(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	int index,
	int length,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_RowEnumerator_1(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_IndexedEnumerator(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_ToArray(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	double ** __returnValue,
	ssize_t * ____returnValueLength1,
	ssize_t * ____returnValueLength2,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_ToColumnWiseArray(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_ToRowWiseArray(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_MapInplace(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	System_Func_T2 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_MapIndexedInplace(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	System_Func_T4 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Add(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Add_1(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Subtract(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Subtract_1(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Multiply(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	double scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Multiply_1(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	double scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Divide(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	double scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Divide_1(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	double scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Multiply_2(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Multiply_3(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_LeftMultiply(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_LeftMultiply_1(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Multiply_4(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Multiply_5(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_TransposeAndMultiply(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_TransposeAndMultiply_1(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_TransposeThisAndMultiply(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_TransposeThisAndMultiply_1(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_TransposeThisAndMultiply_2(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_TransposeThisAndMultiply_3(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Negate(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Negate_1(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Conjugate(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Conjugate_1(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_PointwiseMultiply(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_PointwiseMultiply_1(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_PointwiseDivide(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_PointwiseDivide_1(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Modulus(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	double divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Modulus_1(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	double divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Rank(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_ConditionNumber(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Determinant(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Inverse(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_KroneckerProduct(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_KroneckerProduct_1(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_NormalizeColumns(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	int p,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_NormalizeRows(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	int p,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Equals(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Equals_1(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_GetHashCode(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_ToTypeString(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_ToMatrixString(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	int maxRows,
	int maxColumns,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_ToMatrixString_1(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	int maxRows,
	int maxColumns,
	int padding,
	char * format,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_ToString(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	int maxRows,
	int maxColumns,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_ToString_1(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_ToString_2(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	char * format,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_At(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	int row,
	int column,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_At_1(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	int row,
	int column,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Clear(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_ClearColumn(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	int columnIndex,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_ClearRow(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	int rowIndex,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_ClearSubMatrix(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Clone(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_CopyTo(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 target,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_CreateMatrix(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	int numberOfRows,
	int numberOfColumns,
	int fullyMutable,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_CreateVector(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	int size,
	int fullyMutable,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Row(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Row_1(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Row_2(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	int rowIndex,
	int columnIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Row_3(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	int rowIndex,
	int columnIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Column(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Column_1(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Column_2(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	int columnIndex,
	int rowIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Column_3(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	int columnIndex,
	int rowIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_UpperTriangle(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_LowerTriangle(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_LowerTriangle_1(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_UpperTriangle_1(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_SubMatrix(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Matrix_Diagonal(
	MathNet_Numerics_LinearAlgebra_Double_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.DenseMatrix
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix__Create(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix * __instance,
	MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1 storage,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix__Create_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix * __instance,
	int order,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix__Create_2(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix * __instance,
	int rows,
	int columns,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix__Create_3(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix * __instance,
	int rows,
	int columns,
	double * storage,
	ssize_t __storageLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix__Create_4(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix * __instance,
	int rows,
	int columns,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix__Create_5(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix * __instance,
	double * array,
	ssize_t __arrayLength1,
	ssize_t __arrayLength2,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix__Create_6(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Get_Data(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Get_Values(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Get_Storage(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Get_ColumnCount(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Get_RowCount(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Get_Item(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	int row,
	int column,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Set_Item(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	int row,
	int column,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Get_IsSymmetric(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_OfMatrix(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_OfArray(
	double * array,
	ssize_t __arrayLength1,
	ssize_t __arrayLength2,
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_OfIndexed(
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 enumerable,
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_OfColumnMajor(
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 columnMajor,
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_OfColumns(
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_OfColumnsCovariant(
	char * TColumn,
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_OfRows(
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_OfRowsCovariant(
	char * TRow,
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Create(
	int rows,
	int columns,
	System_Func_T3 init,
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_CreateRandom(
	int rows,
	int columns,
	MathNet_Numerics_Distributions_IContinuousDistribution distribution,
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_CreateMatrix(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	int numberOfRows,
	int numberOfColumns,
	int fullyMutable,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_CreateVector(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	int size,
	int fullyMutable,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Transpose(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_L1Norm(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_FrobeniusNorm(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_InfinityNorm(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Identity(
	int order,
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Trace(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_op_Addition(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix leftSide,
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_op_UnaryPlus(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_op_Subtraction(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix leftSide,
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_op_UnaryNegation(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_op_Multiply(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix leftSide,
	double rightSide,
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_op_Multiply_1(
	double leftSide,
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_op_Multiply_2(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix leftSide,
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_op_Multiply_3(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix leftSide,
	MathNet_Numerics_LinearAlgebra_Double_DenseVector rightSide,
	MathNet_Numerics_LinearAlgebra_Double_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_op_Multiply_4(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector leftSide,
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Double_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_op_Modulus(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix leftSide,
	double rightSide,
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_ConjugateTranspose(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_StrictlyLowerTriangle(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_StrictlyLowerTriangle_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_StrictlyUpperTriangle(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_StrictlyUpperTriangle_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_InsertColumn(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	int columnIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 column,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_SetColumn(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	int columnIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 column,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_SetColumn_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	int columnIndex,
	double * column,
	ssize_t __columnLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_InsertRow(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	int rowIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 row,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_SetRow(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	int rowIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 row,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_SetRow_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	int rowIndex,
	double * row,
	ssize_t __rowLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_SetSubMatrix(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 subMatrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_SetDiagonal(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 source,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_SetDiagonal_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	double * source,
	ssize_t __sourceLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_PermuteRows(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_Permutation p,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_PermuteColumns(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_Permutation p,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Append(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 right,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Append_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 right,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Stack(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Stack_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_DiagonalStack(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_DiagonalStack_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_L2Norm(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_ColumnEnumerator(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_ColumnEnumerator_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	int index,
	int length,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_RowEnumerator(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	int index,
	int length,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_RowEnumerator_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_IndexedEnumerator(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_ToArray(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	double ** __returnValue,
	ssize_t * ____returnValueLength1,
	ssize_t * ____returnValueLength2,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_ToColumnWiseArray(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_ToRowWiseArray(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_MapInplace(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	System_Func_T2 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_MapIndexedInplace(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	System_Func_T4 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Add(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Add_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Subtract(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Subtract_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Multiply(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	double scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Multiply_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	double scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Divide(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	double scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Divide_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	double scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Multiply_2(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Multiply_3(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_LeftMultiply(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_LeftMultiply_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Multiply_4(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Multiply_5(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_TransposeAndMultiply(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_TransposeAndMultiply_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_TransposeThisAndMultiply(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_TransposeThisAndMultiply_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_TransposeThisAndMultiply_2(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_TransposeThisAndMultiply_3(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Negate(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Negate_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Conjugate(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Conjugate_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_PointwiseMultiply(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_PointwiseMultiply_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_PointwiseDivide(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_PointwiseDivide_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Modulus(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	double divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Modulus_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	double divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Rank(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_ConditionNumber(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Determinant(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Inverse(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_KroneckerProduct(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_KroneckerProduct_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_NormalizeColumns(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	int p,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_NormalizeRows(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	int p,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Equals(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Equals_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_GetHashCode(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_ToTypeString(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_ToMatrixString(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	int maxRows,
	int maxColumns,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_ToMatrixString_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	int maxRows,
	int maxColumns,
	int padding,
	char * format,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_ToString(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	int maxRows,
	int maxColumns,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_ToString_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_ToString_2(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	char * format,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_At(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	int row,
	int column,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_At_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	int row,
	int column,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Clear(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_ClearColumn(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	int columnIndex,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_ClearRow(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	int rowIndex,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_ClearSubMatrix(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Clone(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_CopyTo(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 target,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Row(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Row_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Row_2(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	int rowIndex,
	int columnIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Row_3(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	int rowIndex,
	int columnIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Column(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Column_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Column_2(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	int columnIndex,
	int rowIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Column_3(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	int columnIndex,
	int rowIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_UpperTriangle(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_LowerTriangle(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_LowerTriangle_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_UpperTriangle_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_SubMatrix(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseMatrix_Diagonal(
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.Vector
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_Get_Storage(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_Get_Count(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_Get_Item(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	int index,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_Set_Item(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	int index,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_AbsoluteMinimum(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_AbsoluteMinimumIndex(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_AbsoluteMaximum(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_AbsoluteMaximumIndex(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_Sum(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_SumMagnitudes(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_Norm(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	double p,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_MaximumIndex(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_MinimumIndex(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_Normalize(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	double p,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_Clone(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_SetValues(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	double * values,
	ssize_t __valuesLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_CopyTo(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 target,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_SubVector(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	int index,
	int count,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_SetSubVector(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	int index,
	int count,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 subVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_CopySubVectorTo(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 destination,
	int sourceIndex,
	int targetIndex,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_CopyTo_1(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 destination,
	int sourceIndex,
	int targetIndex,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_ToArray(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_ToColumnMatrix(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_ToRowMatrix(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_GetEnumerator(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	System_Collections_Generic_IEnumerator_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_GetIndexedEnumerator(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_MapInplace(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	System_Func_T2 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_MapIndexedInplace(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	System_Func_T3 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_Equals(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_Equals_1(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_GetHashCode(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_ToTypeString(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_ToVectorString(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	int maxLines,
	int maxPerLine,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_ToVectorString_1(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	int maxLines,
	int maxPerLine,
	int padding,
	char * format,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_ToString(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	int maxLines,
	int maxPerLine,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_ToString_1(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_ToString_2(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	char * format,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_ToString_3(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_At(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	int index,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_At_1(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	int index,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_Clear(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_ClearSubVector(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	int index,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_CreateMatrix(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	int rows,
	int columns,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_CreateVector(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	int size,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_Add(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	double scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_Add_1(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	double scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_Plus(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_Add_2(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_Add_3(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_Subtract(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	double scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_Subtract_1(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	double scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_Negate(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_Negate_1(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_Subtract_2(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_Subtract_3(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_Conjugate(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_Conjugate_1(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_Multiply(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	double scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_Multiply_1(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	double scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_DotProduct(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_Divide(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	double scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_Divide_1(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	double scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_Modulus(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	double divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_Modulus_1(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	double divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_PointwiseMultiply(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_PointwiseMultiply_1(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_PointwiseDivide(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_PointwiseDivide_1(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_OuterProduct(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 v,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_Maximum(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Vector_Minimum(
	MathNet_Numerics_LinearAlgebra_Double_Vector __instance,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.DenseVector
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector__Create(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector * __instance,
	MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1 storage,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector__Create_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector * __instance,
	int length,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector__Create_2(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector * __instance,
	double * storage,
	ssize_t __storageLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector__Create_3(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector * __instance,
	int length,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector__Create_4(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector__Create_5(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector * __instance,
	System_Collections_Generic_IEnumerable_T1 other,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_Get_Values(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_Get_Storage(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_Get_Count(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_Get_Item(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	int index,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_Set_Item(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	int index,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_OfVector(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 vector,
	MathNet_Numerics_LinearAlgebra_Double_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_OfEnumerable(
	System_Collections_Generic_IEnumerable_T1 enumerable,
	MathNet_Numerics_LinearAlgebra_Double_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_OfIndexedEnumerable(
	int length,
	System_Collections_Generic_IEnumerable_T1 enumerable,
	MathNet_Numerics_LinearAlgebra_Double_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_Create(
	int length,
	System_Func_T2 init,
	MathNet_Numerics_LinearAlgebra_Double_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_CreateRandom(
	int length,
	MathNet_Numerics_Distributions_IContinuousDistribution distribution,
	MathNet_Numerics_LinearAlgebra_Double_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_op_Explicit(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector vector,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_op_Implicit(
	double * array,
	ssize_t __arrayLength,
	MathNet_Numerics_LinearAlgebra_Double_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_CreateMatrix(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	int rows,
	int columns,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_CreateVector(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	int size,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_op_Addition(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector leftSide,
	MathNet_Numerics_LinearAlgebra_Double_DenseVector rightSide,
	MathNet_Numerics_LinearAlgebra_Double_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_op_UnaryNegation(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector rightSide,
	MathNet_Numerics_LinearAlgebra_Double_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_op_Subtraction(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector leftSide,
	MathNet_Numerics_LinearAlgebra_Double_DenseVector rightSide,
	MathNet_Numerics_LinearAlgebra_Double_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_op_Multiply(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector leftSide,
	double rightSide,
	MathNet_Numerics_LinearAlgebra_Double_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_op_Multiply_1(
	double leftSide,
	MathNet_Numerics_LinearAlgebra_Double_DenseVector rightSide,
	MathNet_Numerics_LinearAlgebra_Double_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_op_Multiply_2(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector leftSide,
	MathNet_Numerics_LinearAlgebra_Double_DenseVector rightSide,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_op_Division(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector leftSide,
	double rightSide,
	MathNet_Numerics_LinearAlgebra_Double_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_op_Modulus(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector leftSide,
	double rightSide,
	MathNet_Numerics_LinearAlgebra_Double_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_AbsoluteMinimumIndex(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_AbsoluteMinimum(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_AbsoluteMaximum(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_AbsoluteMaximumIndex(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_MaximumIndex(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_MinimumIndex(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_Sum(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_SumMagnitudes(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_OuterProduct(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector u,
	MathNet_Numerics_LinearAlgebra_Double_DenseVector v,
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_OuterProduct_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Double_DenseVector v,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_Norm(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	double p,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_Parse(
	char * value,
	MathNet_Numerics_LinearAlgebra_Double_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_Parse_1(
	char * value,
	System_IFormatProvider formatProvider,
	MathNet_Numerics_LinearAlgebra_Double_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_TryParse(
	char * value,
	MathNet_Numerics_LinearAlgebra_Double_DenseVector * result,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_TryParse_1(
	char * value,
	System_IFormatProvider formatProvider,
	MathNet_Numerics_LinearAlgebra_Double_DenseVector * result,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_Normalize(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	double p,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_Clone(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_SetValues(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	double * values,
	ssize_t __valuesLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_CopyTo(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 target,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_SubVector(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	int index,
	int count,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_SetSubVector(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	int index,
	int count,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 subVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_CopySubVectorTo(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 destination,
	int sourceIndex,
	int targetIndex,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_CopyTo_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 destination,
	int sourceIndex,
	int targetIndex,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_ToArray(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_ToColumnMatrix(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_ToRowMatrix(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_GetEnumerator(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	System_Collections_Generic_IEnumerator_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_GetIndexedEnumerator(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_MapInplace(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	System_Func_T2 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_MapIndexedInplace(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	System_Func_T3 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_Equals(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_Equals_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_GetHashCode(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_ToTypeString(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_ToVectorString(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	int maxLines,
	int maxPerLine,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_ToVectorString_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	int maxLines,
	int maxPerLine,
	int padding,
	char * format,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_ToString(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	int maxLines,
	int maxPerLine,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_ToString_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_ToString_2(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	char * format,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_ToString_3(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_At(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	int index,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_At_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	int index,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_Clear(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_ClearSubVector(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	int index,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_Add(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	double scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_Add_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	double scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_Plus(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_Add_2(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_Add_3(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_Subtract(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	double scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_Subtract_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	double scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_Negate(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_Negate_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_Subtract_2(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_Subtract_3(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_Conjugate(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_Conjugate_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_Multiply(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	double scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_Multiply_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	double scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_DotProduct(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_Divide(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	double scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_Divide_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	double scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_Modulus(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	double divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_Modulus_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	double divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_PointwiseMultiply(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_PointwiseMultiply_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_PointwiseDivide(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_PointwiseDivide_1(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_OuterProduct_2(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 v,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_Maximum(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DenseVector_Minimum(
	MathNet_Numerics_LinearAlgebra_Double_DenseVector __instance,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix__Create(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix * __instance,
	MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1 storage,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix__Create_1(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix * __instance,
	int order,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix__Create_2(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix * __instance,
	int rows,
	int columns,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix__Create_3(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix * __instance,
	int rows,
	int columns,
	double diagonalValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix__Create_4(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix * __instance,
	int rows,
	int columns,
	double * diagonalStorage,
	ssize_t __diagonalStorageLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix__Create_5(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix * __instance,
	double * array,
	ssize_t __arrayLength1,
	ssize_t __arrayLength2,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix__Create_6(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Get_IsSymmetric(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Get_Storage(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Get_ColumnCount(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Get_RowCount(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Get_Item(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	int row,
	int column,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Set_Item(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	int row,
	int column,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_OfMatrix(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_OfArray(
	double * array,
	ssize_t __arrayLength1,
	ssize_t __arrayLength2,
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_OfIndexedDiagonal(
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 diagonal,
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_OfDiagonal(
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 diagonal,
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Create(
	int rows,
	int columns,
	System_Func_T2 init,
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_CreateRandom(
	int rows,
	int columns,
	MathNet_Numerics_Distributions_IContinuousDistribution distribution,
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_CreateMatrix(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	int numberOfRows,
	int numberOfColumns,
	int fullyMutable,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_CreateVector(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	int size,
	int fullyMutable,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Add(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Subtract(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_SetDiagonal(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	double * source,
	ssize_t __sourceLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_SetDiagonal_1(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 source,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Multiply(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Multiply_1(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Multiply_2(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_LeftMultiply(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Determinant(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Diagonal(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_TransposeAndMultiply(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_TransposeAndMultiply_1(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Transpose(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_L1Norm(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_L2Norm(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_FrobeniusNorm(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_InfinityNorm(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_ConditionNumber(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Inverse(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_LowerTriangle(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_LowerTriangle_1(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_StrictlyLowerTriangle(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_StrictlyLowerTriangle_1(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_UpperTriangle(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_UpperTriangle_1(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_StrictlyUpperTriangle(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_StrictlyUpperTriangle_1(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_SubMatrix(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_InsertColumn(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	int columnIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 column,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_InsertRow(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	int rowIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 row,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_PermuteColumns(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_Permutation p,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_PermuteRows(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_Permutation p,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Identity(
	int order,
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_ConjugateTranspose(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Trace(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_SetColumn(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	int columnIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 column,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_SetColumn_1(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	int columnIndex,
	double * column,
	ssize_t __columnLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_SetRow(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	int rowIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 row,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_SetRow_1(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	int rowIndex,
	double * row,
	ssize_t __rowLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_SetSubMatrix(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 subMatrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Append(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 right,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Append_1(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 right,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Stack(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Stack_1(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_DiagonalStack(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_DiagonalStack_1(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_ColumnEnumerator(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_ColumnEnumerator_1(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	int index,
	int length,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_RowEnumerator(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	int index,
	int length,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_RowEnumerator_1(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_IndexedEnumerator(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_ToArray(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	double ** __returnValue,
	ssize_t * ____returnValueLength1,
	ssize_t * ____returnValueLength2,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_ToColumnWiseArray(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_ToRowWiseArray(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_MapInplace(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	System_Func_T2 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_MapIndexedInplace(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	System_Func_T4 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Add_1(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Subtract_1(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Multiply_3(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	double scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Multiply_4(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	double scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Divide(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	double scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Divide_1(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	double scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Multiply_5(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_LeftMultiply_1(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_TransposeThisAndMultiply(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_TransposeThisAndMultiply_1(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_TransposeThisAndMultiply_2(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_TransposeThisAndMultiply_3(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Negate(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Negate_1(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Conjugate(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Conjugate_1(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_PointwiseMultiply(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_PointwiseMultiply_1(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_PointwiseDivide(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_PointwiseDivide_1(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Modulus(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	double divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Modulus_1(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	double divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Rank(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_KroneckerProduct(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_KroneckerProduct_1(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_NormalizeColumns(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	int p,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_NormalizeRows(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	int p,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Equals(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Equals_1(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_GetHashCode(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_ToTypeString(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_ToMatrixString(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	int maxRows,
	int maxColumns,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_ToMatrixString_1(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	int maxRows,
	int maxColumns,
	int padding,
	char * format,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_ToString(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	int maxRows,
	int maxColumns,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_ToString_1(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_ToString_2(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	char * format,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_At(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	int row,
	int column,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_At_1(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	int row,
	int column,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Clear(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_ClearColumn(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	int columnIndex,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_ClearRow(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	int rowIndex,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_ClearSubMatrix(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Clone(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_CopyTo(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 target,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Row(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Row_1(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Row_2(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	int rowIndex,
	int columnIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Row_3(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	int rowIndex,
	int columnIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Column(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Column_1(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Column_2(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	int columnIndex,
	int rowIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix_Column_3(
	MathNet_Numerics_LinearAlgebra_Double_DiagonalMatrix __instance,
	int columnIndex,
	int rowIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.ExtensionMethods
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_ExtensionMethods_Cholesky(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	MathNet_Numerics_LinearAlgebra_Double_Factorization_Cholesky * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_ExtensionMethods_LU(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	MathNet_Numerics_LinearAlgebra_Double_Factorization_LU * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_ExtensionMethods_QR(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	MathNet_Numerics_LinearAlgebra_Double_Factorization_QR * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_ExtensionMethods_GramSchmidt(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	MathNet_Numerics_LinearAlgebra_Double_Factorization_GramSchmidt * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_ExtensionMethods_Svd(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	int computeVectors,
	MathNet_Numerics_LinearAlgebra_Double_Factorization_Svd * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_ExtensionMethods_Evd(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	MathNet_Numerics_LinearAlgebra_Double_Factorization_Evd * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.Factorization.Cholesky
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_Cholesky_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_Cholesky __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_Cholesky_Get_DeterminantLn(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_Cholesky __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_Cholesky_Get_Factor(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_Cholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_Cholesky_Solve(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_Cholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_Cholesky_Solve_1(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_Cholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_Cholesky_Solve_2(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_Cholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_Cholesky_Solve_3(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_Cholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseCholesky
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseCholesky__Create(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseCholesky * __instance,
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseCholesky_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseCholesky __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseCholesky_Get_DeterminantLn(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseCholesky __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseCholesky_Get_Factor(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseCholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseCholesky_Solve(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseCholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseCholesky_Solve_1(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseCholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseCholesky_Solve_2(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseCholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseCholesky_Solve_3(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseCholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.Factorization.Evd
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_Evd_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_Evd __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_Evd_Get_Rank(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_Evd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_Evd_Get_IsFullRank(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_Evd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_Evd_Get_IsSymmetric(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_Evd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_Evd_EigenValues(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_Evd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_Evd_EigenVectors(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_Evd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_Evd_D(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_Evd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_Evd_Solve(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_Evd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_Evd_Solve_1(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_Evd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_Evd_Solve_2(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_Evd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_Evd_Solve_3(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_Evd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseEvd
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseEvd__Create(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseEvd * __instance,
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseEvd_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseEvd __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseEvd_Get_Rank(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseEvd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseEvd_Get_IsFullRank(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseEvd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseEvd_Get_IsSymmetric(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseEvd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseEvd_Solve(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseEvd_Solve_1(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseEvd_EigenValues(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseEvd_EigenVectors(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseEvd_D(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseEvd_Solve_2(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseEvd_Solve_3(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.Factorization.GramSchmidt
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_GramSchmidt_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_GramSchmidt __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_GramSchmidt_Get_IsFullRank(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_GramSchmidt __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_GramSchmidt_Get_Q(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_GramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_GramSchmidt_Get_R(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_GramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_GramSchmidt_Solve(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_GramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_GramSchmidt_Solve_1(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_GramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_GramSchmidt_Solve_2(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_GramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_GramSchmidt_Solve_3(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_GramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseGramSchmidt
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseGramSchmidt__Create(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseGramSchmidt * __instance,
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseGramSchmidt_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseGramSchmidt __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseGramSchmidt_Get_IsFullRank(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseGramSchmidt __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseGramSchmidt_Get_Q(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseGramSchmidt_Get_R(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseGramSchmidt_Solve(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseGramSchmidt_Solve_1(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseGramSchmidt_Solve_2(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseGramSchmidt_Solve_3(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.Factorization.LU
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_LU_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_LU __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_LU_Get_L(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_LU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_LU_Get_U(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_LU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_LU_Get_P(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_LU __instance,
	MathNet_Numerics_Permutation * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_LU_Solve(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_LU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_LU_Solve_1(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_LU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_LU_Solve_2(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_LU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_LU_Solve_3(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_LU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_LU_Inverse(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_LU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseLU
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseLU__Create(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseLU * __instance,
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseLU_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseLU __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseLU_Get_L(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseLU_Get_U(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseLU_Get_P(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseLU __instance,
	MathNet_Numerics_Permutation * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseLU_Solve(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseLU_Solve_1(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseLU_Inverse(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseLU_Solve_2(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseLU_Solve_3(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.Factorization.QR
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_QR_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_QR __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_QR_Get_IsFullRank(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_QR __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_QR_Get_Q(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_QR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_QR_Get_R(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_QR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_QR_Solve(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_QR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_QR_Solve_1(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_QR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_QR_Solve_2(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_QR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_QR_Solve_3(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_QR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseQR
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseQR__Create(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseQR * __instance,
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix matrix,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseQR_Get_Tau(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseQR __instance,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseQR_Set_Tau(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseQR __instance,
	double * value,
	ssize_t __valueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseQR_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseQR __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseQR_Get_IsFullRank(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseQR __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseQR_Get_Q(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseQR_Get_R(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseQR_Solve(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseQR_Solve_1(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseQR_Solve_2(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseQR_Solve_3(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.Factorization.Svd
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_Svd_Get_Rank(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_Svd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_Svd_Get_Norm2(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_Svd __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_Svd_Get_ConditionNumber(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_Svd __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_Svd_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_Svd __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_Svd_U(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_Svd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_Svd_VT(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_Svd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_Svd_W(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_Svd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_Svd_S(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_Svd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_Svd_Solve(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_Svd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_Svd_Solve_1(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_Svd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_Svd_Solve_2(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_Svd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_Svd_Solve_3(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_Svd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseSvd
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseSvd__Create(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseSvd * __instance,
	MathNet_Numerics_LinearAlgebra_Double_DenseMatrix matrix,
	int computeVectors,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseSvd_Get_Rank(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseSvd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseSvd_Get_Norm2(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseSvd __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseSvd_Get_ConditionNumber(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseSvd __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseSvd_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseSvd __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseSvd_Solve(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseSvd_Solve_1(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseSvd_U(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseSvd_VT(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseSvd_W(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseSvd_S(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseSvd_Solve_2(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseSvd_Solve_3(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_DenseSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.Factorization.UserCholesky
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserCholesky__Create(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserCholesky * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserCholesky_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserCholesky __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserCholesky_Get_DeterminantLn(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserCholesky __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserCholesky_Get_Factor(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserCholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserCholesky_Solve(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserCholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserCholesky_Solve_1(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserCholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserCholesky_Solve_2(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserCholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserCholesky_Solve_3(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserCholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.Factorization.UserEvd
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserEvd__Create(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserEvd * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserEvd_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserEvd __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserEvd_Get_Rank(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserEvd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserEvd_Get_IsFullRank(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserEvd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserEvd_Get_IsSymmetric(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserEvd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserEvd_Solve(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserEvd_Solve_1(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserEvd_EigenValues(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserEvd_EigenVectors(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserEvd_D(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserEvd_Solve_2(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserEvd_Solve_3(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.Factorization.UserGramSchmidt
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserGramSchmidt__Create(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserGramSchmidt * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserGramSchmidt_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserGramSchmidt __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserGramSchmidt_Get_IsFullRank(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserGramSchmidt __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserGramSchmidt_Get_Q(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserGramSchmidt_Get_R(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserGramSchmidt_Solve(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserGramSchmidt_Solve_1(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserGramSchmidt_Solve_2(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserGramSchmidt_Solve_3(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.Factorization.UserLU
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserLU__Create(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserLU * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserLU_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserLU __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserLU_Get_L(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserLU_Get_U(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserLU_Get_P(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserLU __instance,
	MathNet_Numerics_Permutation * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserLU_Solve(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserLU_Solve_1(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserLU_Inverse(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserLU_Solve_2(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserLU_Solve_3(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.Factorization.UserQR
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserQR__Create(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserQR * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserQR_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserQR __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserQR_Get_IsFullRank(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserQR __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserQR_Get_Q(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserQR_Get_R(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserQR_Solve(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserQR_Solve_1(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserQR_Solve_2(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserQR_Solve_3(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserSvd__Create(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserSvd * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	int computeVectors,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserSvd_Get_Rank(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserSvd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserSvd_Get_Norm2(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserSvd __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserSvd_Get_ConditionNumber(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserSvd __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserSvd_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserSvd __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserSvd_Solve(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserSvd_Solve_1(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserSvd_U(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserSvd_VT(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserSvd_W(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserSvd_S(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserSvd_Solve_2(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Factorization_UserSvd_Solve_3(
	MathNet_Numerics_LinearAlgebra_Double_Factorization_UserSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterativeSolver
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterativeSolver_Get_IterationResult(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterativeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterativeSolver_StopSolve(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterativeSolver __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterativeSolver_SetIterator(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterativeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterativeSolver_Solve(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterativeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Double_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Double_Vector vector,
	MathNet_Numerics_LinearAlgebra_Double_Vector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterativeSolver_Solve_1(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterativeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Double_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Double_Vector input,
	MathNet_Numerics_LinearAlgebra_Double_Vector result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterativeSolver_Solve_2(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterativeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Double_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Double_Matrix input,
	MathNet_Numerics_LinearAlgebra_Double_Matrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterativeSolver_Solve_3(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterativeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Double_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Double_Matrix input,
	MathNet_Numerics_LinearAlgebra_Double_Matrix result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterativeSolverSetup
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterativeSolverSetup_Get_SolverType(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterativeSolverSetup __instance,
	System_Type * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterativeSolverSetup_Get_PreconditionerType(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterativeSolverSetup __instance,
	System_Type * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterativeSolverSetup_Get_SolutionSpeed(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterativeSolverSetup __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterativeSolverSetup_Get_Reliability(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterativeSolverSetup __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterativeSolverSetup_CreateNew(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterativeSolverSetup __instance,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterativeSolver * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterator_Get_Status(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterator __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterator_Add(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterator __instance,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IIterationStopCriterium stopCriterium,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterator_Remove(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterator __instance,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IIterationStopCriterium stopCriterium,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterator_Contains(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterator __instance,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IIterationStopCriterium stopCriterium,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterator_IterationCancelled(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterator __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterator_DetermineStatus(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterator __instance,
	int iterationNumber,
	MathNet_Numerics_LinearAlgebra_Double_Vector solutionVector,
	MathNet_Numerics_LinearAlgebra_Double_Vector sourceVector,
	MathNet_Numerics_LinearAlgebra_Double_Vector residualVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterator_ResetToPrecalculationState(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterator __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterator_Clone(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterator __instance,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterator * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.BiCgStab
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_BiCgStab__Create(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_BiCgStab * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_BiCgStab__Create_1(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_BiCgStab * __instance,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_BiCgStab__Create_2(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_BiCgStab * __instance,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_IPreConditioner preconditioner,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_BiCgStab__Create_3(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_BiCgStab * __instance,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_IPreConditioner preconditioner,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_BiCgStab_Get_IterationResult(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_BiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_BiCgStab_SetPreconditioner(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_BiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_IPreConditioner preconditioner,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_BiCgStab_SetIterator(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_BiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_BiCgStab_StopSolve(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_BiCgStab __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_BiCgStab_Solve(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_BiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Double_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Double_Vector vector,
	MathNet_Numerics_LinearAlgebra_Double_Vector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_BiCgStab_Solve_1(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_BiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Double_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Double_Vector input,
	MathNet_Numerics_LinearAlgebra_Double_Vector result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_BiCgStab_Solve_2(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_BiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Double_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Double_Matrix input,
	MathNet_Numerics_LinearAlgebra_Double_Matrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_BiCgStab_Solve_3(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_BiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Double_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Double_Matrix input,
	MathNet_Numerics_LinearAlgebra_Double_Matrix result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.CompositeSolver
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_CompositeSolver__Create(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_CompositeSolver * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_CompositeSolver__Create_1(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_CompositeSolver * __instance,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_CompositeSolver_Get_IterationResult(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_CompositeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_CompositeSolver_LoadSolverInformation(
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_CompositeSolver_LoadSolverInformation_1(
	System_Type * typesToExclude,
	ssize_t __typesToExcludeLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_CompositeSolver_LoadSolverInformationFromAssembly(
	System_Reflection_AssemblyName assemblyName,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_CompositeSolver_LoadSolverInformationFromAssembly_1(
	System_Reflection_AssemblyName assemblyName,
	System_Type * typesToExclude,
	ssize_t __typesToExcludeLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_CompositeSolver_LoadSolverInformationFromAssembly_2(
	System_Type typeInAssembly,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_CompositeSolver_LoadSolverInformationFromAssembly_3(
	System_Type typeInAssembly,
	System_Type * typesToExclude,
	ssize_t __typesToExcludeLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_CompositeSolver_LoadSolverInformationFromAssembly_4(
	System_Reflection_Assembly assembly,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_CompositeSolver_LoadSolverInformationFromAssembly_5(
	System_Reflection_Assembly assembly,
	System_Type * typesToExclude,
	ssize_t __typesToExcludeLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_CompositeSolver_SetIterator(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_CompositeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_CompositeSolver_StopSolve(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_CompositeSolver __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_CompositeSolver_Solve(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_CompositeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Double_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Double_Vector vector,
	MathNet_Numerics_LinearAlgebra_Double_Vector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_CompositeSolver_Solve_1(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_CompositeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Double_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Double_Vector input,
	MathNet_Numerics_LinearAlgebra_Double_Vector result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_CompositeSolver_Solve_2(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_CompositeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Double_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Double_Matrix input,
	MathNet_Numerics_LinearAlgebra_Double_Matrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_CompositeSolver_Solve_3(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_CompositeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Double_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Double_Matrix input,
	MathNet_Numerics_LinearAlgebra_Double_Matrix result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.CompositeSolver+DoubleComparer
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_CompositeSolver_DoubleComparer__Create(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_CompositeSolver_DoubleComparer * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_CompositeSolver_DoubleComparer_Compare(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_CompositeSolver_DoubleComparer __instance,
	double x,
	double y,
	int * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.GpBiCg
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_GpBiCg__Create(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_GpBiCg * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_GpBiCg__Create_1(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_GpBiCg * __instance,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_GpBiCg__Create_2(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_GpBiCg * __instance,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_IPreConditioner preconditioner,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_GpBiCg__Create_3(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_GpBiCg * __instance,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_IPreConditioner preconditioner,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_GpBiCg_Get_NumberOfBiCgStabSteps(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_GpBiCg __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_GpBiCg_Set_NumberOfBiCgStabSteps(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_GpBiCg __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_GpBiCg_Get_NumberOfGpBiCgSteps(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_GpBiCg __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_GpBiCg_Set_NumberOfGpBiCgSteps(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_GpBiCg __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_GpBiCg_Get_IterationResult(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_GpBiCg __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_GpBiCg_SetPreconditioner(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_GpBiCg __instance,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_IPreConditioner preconditioner,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_GpBiCg_SetIterator(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_GpBiCg __instance,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_GpBiCg_StopSolve(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_GpBiCg __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_GpBiCg_Solve(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_GpBiCg __instance,
	MathNet_Numerics_LinearAlgebra_Double_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Double_Vector vector,
	MathNet_Numerics_LinearAlgebra_Double_Vector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_GpBiCg_Solve_1(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_GpBiCg __instance,
	MathNet_Numerics_LinearAlgebra_Double_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Double_Vector input,
	MathNet_Numerics_LinearAlgebra_Double_Vector result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_GpBiCg_Solve_2(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_GpBiCg __instance,
	MathNet_Numerics_LinearAlgebra_Double_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Double_Matrix input,
	MathNet_Numerics_LinearAlgebra_Double_Matrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_GpBiCg_Solve_3(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_GpBiCg __instance,
	MathNet_Numerics_LinearAlgebra_Double_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Double_Matrix input,
	MathNet_Numerics_LinearAlgebra_Double_Matrix result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.MlkBiCgStab
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_MlkBiCgStab__Create(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_MlkBiCgStab * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_MlkBiCgStab__Create_1(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_MlkBiCgStab * __instance,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_MlkBiCgStab__Create_2(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_MlkBiCgStab * __instance,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_IPreConditioner preconditioner,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_MlkBiCgStab__Create_3(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_MlkBiCgStab * __instance,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_IPreConditioner preconditioner,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_MlkBiCgStab_Get_NumberOfStartingVectors(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_MlkBiCgStab __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_MlkBiCgStab_Set_NumberOfStartingVectors(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_MlkBiCgStab __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_MlkBiCgStab_Get_StartingVectors(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_MlkBiCgStab __instance,
	System_Collections_Generic_IList_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_MlkBiCgStab_Set_StartingVectors(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_MlkBiCgStab __instance,
	System_Collections_Generic_IList_T1 value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_MlkBiCgStab_Get_IterationResult(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_MlkBiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_MlkBiCgStab_ResetNumberOfStartingVectors(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_MlkBiCgStab __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_MlkBiCgStab_SetPreconditioner(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_MlkBiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_IPreConditioner preconditioner,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_MlkBiCgStab_SetIterator(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_MlkBiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_MlkBiCgStab_StopSolve(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_MlkBiCgStab __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_MlkBiCgStab_Solve(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_MlkBiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Double_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Double_Vector vector,
	MathNet_Numerics_LinearAlgebra_Double_Vector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_MlkBiCgStab_Solve_1(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_MlkBiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Double_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Double_Vector input,
	MathNet_Numerics_LinearAlgebra_Double_Vector result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_MlkBiCgStab_Solve_2(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_MlkBiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Double_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Double_Matrix input,
	MathNet_Numerics_LinearAlgebra_Double_Matrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_MlkBiCgStab_Solve_3(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_MlkBiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Double_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Double_Matrix input,
	MathNet_Numerics_LinearAlgebra_Double_Matrix result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.TFQMR
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_TFQMR__Create(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_TFQMR * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_TFQMR__Create_1(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_TFQMR * __instance,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_TFQMR__Create_2(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_TFQMR * __instance,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_IPreConditioner preconditioner,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_TFQMR__Create_3(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_TFQMR * __instance,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_IPreConditioner preconditioner,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_TFQMR_Get_IterationResult(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_TFQMR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_TFQMR_SetPreconditioner(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_TFQMR __instance,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_IPreConditioner preconditioner,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_TFQMR_SetIterator(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_TFQMR __instance,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_TFQMR_StopSolve(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_TFQMR __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_TFQMR_Solve(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_TFQMR __instance,
	MathNet_Numerics_LinearAlgebra_Double_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Double_Vector vector,
	MathNet_Numerics_LinearAlgebra_Double_Vector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_TFQMR_Solve_1(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_TFQMR __instance,
	MathNet_Numerics_LinearAlgebra_Double_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Double_Vector input,
	MathNet_Numerics_LinearAlgebra_Double_Vector result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_TFQMR_Solve_2(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_TFQMR __instance,
	MathNet_Numerics_LinearAlgebra_Double_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Double_Matrix input,
	MathNet_Numerics_LinearAlgebra_Double_Matrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_TFQMR_Solve_3(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterative_TFQMR __instance,
	MathNet_Numerics_LinearAlgebra_Double_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Double_Matrix input,
	MathNet_Numerics_LinearAlgebra_Double_Matrix result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterator
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterator__Create(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterator * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterator__Create_1(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterator * __instance,
	System_Collections_Generic_IEnumerable_T1 stopCriteria,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterator_Get_Status(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterator __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterator_CreateDefault(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterator * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterator_Add(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterator __instance,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IIterationStopCriterium stopCriterium,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterator_Remove(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterator __instance,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IIterationStopCriterium stopCriterium,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterator_Contains(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterator __instance,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IIterationStopCriterium stopCriterium,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterator_IterationCancelled(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterator __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterator_DetermineStatus(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterator __instance,
	int iterationNumber,
	MathNet_Numerics_LinearAlgebra_Double_Vector solutionVector,
	MathNet_Numerics_LinearAlgebra_Double_Vector sourceVector,
	MathNet_Numerics_LinearAlgebra_Double_Vector residualVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterator_ResetToPrecalculationState(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterator __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterator_Clone(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Iterator __instance,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_IIterator * __returnValue,
	CDotNetHandle * __exception);

int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_IPreConditioner_Initialize(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_IPreConditioner __instance,
	MathNet_Numerics_LinearAlgebra_Double_Matrix matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_IPreConditioner_Approximate(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_IPreConditioner __instance,
	MathNet_Numerics_LinearAlgebra_Double_Vector rhs,
	MathNet_Numerics_LinearAlgebra_Double_Vector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_IPreConditioner_Approximate_1(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_IPreConditioner __instance,
	MathNet_Numerics_LinearAlgebra_Double_Vector rhs,
	MathNet_Numerics_LinearAlgebra_Double_Vector lhs,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.Diagonal
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_Diagonal__Create(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_Diagonal * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_Diagonal_Initialize(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_Diagonal __instance,
	MathNet_Numerics_LinearAlgebra_Double_Matrix matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_Diagonal_Approximate(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_Diagonal __instance,
	MathNet_Numerics_LinearAlgebra_Double_Vector rhs,
	MathNet_Numerics_LinearAlgebra_Double_Vector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_Diagonal_Approximate_1(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_Diagonal __instance,
	MathNet_Numerics_LinearAlgebra_Double_Vector rhs,
	MathNet_Numerics_LinearAlgebra_Double_Vector lhs,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.Ilutp
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_Ilutp__Create(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_Ilutp * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_Ilutp__Create_1(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_Ilutp * __instance,
	double fillLevel,
	double dropTolerance,
	double pivotTolerance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_Ilutp_Get_FillLevel(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_Ilutp __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_Ilutp_Set_FillLevel(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_Ilutp __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_Ilutp_Get_DropTolerance(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_Ilutp __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_Ilutp_Set_DropTolerance(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_Ilutp __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_Ilutp_Get_PivotTolerance(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_Ilutp __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_Ilutp_Set_PivotTolerance(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_Ilutp __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_Ilutp_Initialize(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_Ilutp __instance,
	MathNet_Numerics_LinearAlgebra_Double_Matrix matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_Ilutp_Approximate(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_Ilutp __instance,
	MathNet_Numerics_LinearAlgebra_Double_Vector rhs,
	MathNet_Numerics_LinearAlgebra_Double_Vector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_Ilutp_Approximate_1(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_Ilutp __instance,
	MathNet_Numerics_LinearAlgebra_Double_Vector rhs,
	MathNet_Numerics_LinearAlgebra_Double_Vector lhs,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_Ilutp__Get__DefaultFillLevel(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_Ilutp__Get__DefaultDropTolerance(
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IncompleteLU
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_IncompleteLU__Create(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_IncompleteLU * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_IncompleteLU_Initialize(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_IncompleteLU __instance,
	MathNet_Numerics_LinearAlgebra_Double_Matrix matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_IncompleteLU_Approximate(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_IncompleteLU __instance,
	MathNet_Numerics_LinearAlgebra_Double_Vector rhs,
	MathNet_Numerics_LinearAlgebra_Double_Vector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_IncompleteLU_Approximate_1(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_Preconditioners_IncompleteLU __instance,
	MathNet_Numerics_LinearAlgebra_Double_Vector rhs,
	MathNet_Numerics_LinearAlgebra_Double_Vector lhs,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IIterationStopCriterium
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IIterationStopCriterium_Get_Status(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IIterationStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IIterationStopCriterium_Get_StopLevel(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IIterationStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_StopCriterium_StopLevel * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IIterationStopCriterium_DetermineStatus(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IIterationStopCriterium __instance,
	int iterationNumber,
	MathNet_Numerics_LinearAlgebra_Double_Vector solutionVector,
	MathNet_Numerics_LinearAlgebra_Double_Vector sourceVector,
	MathNet_Numerics_LinearAlgebra_Double_Vector residualVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IIterationStopCriterium_ResetToPrecalculationState(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IIterationStopCriterium __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IIterationStopCriterium_Clone(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IIterationStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IIterationStopCriterium * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.DivergenceStopCriterium
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_DivergenceStopCriterium__Create(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_DivergenceStopCriterium * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_DivergenceStopCriterium__Create_1(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_DivergenceStopCriterium * __instance,
	double maximumRelativeIncrease,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_DivergenceStopCriterium__Create_2(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_DivergenceStopCriterium * __instance,
	int minimumIterations,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_DivergenceStopCriterium__Create_3(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_DivergenceStopCriterium * __instance,
	double maximumRelativeIncrease,
	int minimumIterations,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_DivergenceStopCriterium_Get_MaximumRelativeIncrease(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_DivergenceStopCriterium_Set_MaximumRelativeIncrease(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_DivergenceStopCriterium_Get_MinimumNumberOfIterations(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_DivergenceStopCriterium_Set_MinimumNumberOfIterations(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_DivergenceStopCriterium_Get_Status(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_DivergenceStopCriterium_Get_StopLevel(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_StopCriterium_StopLevel * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_DivergenceStopCriterium_ResetMaximumRelativeIncreaseToDefault(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_DivergenceStopCriterium_ResetNumberOfIterationsToDefault(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_DivergenceStopCriterium_DetermineStatus(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	int iterationNumber,
	MathNet_Numerics_LinearAlgebra_Double_Vector solutionVector,
	MathNet_Numerics_LinearAlgebra_Double_Vector sourceVector,
	MathNet_Numerics_LinearAlgebra_Double_Vector residualVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_DivergenceStopCriterium_ResetToPrecalculationState(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_DivergenceStopCriterium_Clone(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IIterationStopCriterium * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_DivergenceStopCriterium__Get__DefaultMaximumRelativeIncrease(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_DivergenceStopCriterium__Get__DefaultMinimumNumberOfIterations(
	int * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.FailureStopCriterium
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_FailureStopCriterium__Create(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_FailureStopCriterium * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_FailureStopCriterium_Get_Status(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_FailureStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_FailureStopCriterium_Get_StopLevel(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_FailureStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_StopCriterium_StopLevel * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_FailureStopCriterium_DetermineStatus(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_FailureStopCriterium __instance,
	int iterationNumber,
	MathNet_Numerics_LinearAlgebra_Double_Vector solutionVector,
	MathNet_Numerics_LinearAlgebra_Double_Vector sourceVector,
	MathNet_Numerics_LinearAlgebra_Double_Vector residualVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_FailureStopCriterium_ResetToPrecalculationState(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_FailureStopCriterium __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_FailureStopCriterium_Clone(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_FailureStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IIterationStopCriterium * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IterationCountStopCriterium
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IterationCountStopCriterium__Create(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IterationCountStopCriterium * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IterationCountStopCriterium__Create_1(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IterationCountStopCriterium * __instance,
	int maximumNumberOfIterations,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IterationCountStopCriterium_Get_MaximumNumberOfIterations(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IterationCountStopCriterium __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IterationCountStopCriterium_Set_MaximumNumberOfIterations(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IterationCountStopCriterium __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IterationCountStopCriterium_Get_Status(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IterationCountStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IterationCountStopCriterium_Get_StopLevel(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IterationCountStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_StopCriterium_StopLevel * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IterationCountStopCriterium_ResetMaximumNumberOfIterationsToDefault(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IterationCountStopCriterium __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IterationCountStopCriterium_DetermineStatus(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IterationCountStopCriterium __instance,
	int iterationNumber,
	MathNet_Numerics_LinearAlgebra_Double_Vector solutionVector,
	MathNet_Numerics_LinearAlgebra_Double_Vector sourceVector,
	MathNet_Numerics_LinearAlgebra_Double_Vector residualVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IterationCountStopCriterium_ResetToPrecalculationState(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IterationCountStopCriterium __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IterationCountStopCriterium_Clone(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IterationCountStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IIterationStopCriterium * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IterationCountStopCriterium__Get__DefaultMaximumNumberOfIterations(
	int * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.ResidualStopCriterium
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_ResidualStopCriterium__Create(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_ResidualStopCriterium * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_ResidualStopCriterium__Create_1(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_ResidualStopCriterium * __instance,
	double maximum,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_ResidualStopCriterium__Create_2(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_ResidualStopCriterium * __instance,
	int minimumIterationsBelowMaximum,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_ResidualStopCriterium__Create_3(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_ResidualStopCriterium * __instance,
	double maximum,
	int minimumIterationsBelowMaximum,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_ResidualStopCriterium_Get_Maximum(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_ResidualStopCriterium __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_ResidualStopCriterium_Set_Maximum(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_ResidualStopCriterium __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_ResidualStopCriterium_Get_MinimumIterationsBelowMaximum(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_ResidualStopCriterium __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_ResidualStopCriterium_Set_MinimumIterationsBelowMaximum(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_ResidualStopCriterium __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_ResidualStopCriterium_Get_Status(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_ResidualStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_ResidualStopCriterium_Get_StopLevel(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_ResidualStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_StopCriterium_StopLevel * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_ResidualStopCriterium_ResetMaximumResidualToDefault(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_ResidualStopCriterium __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_ResidualStopCriterium_ResetMinimumIterationsBelowMaximumToDefault(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_ResidualStopCriterium __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_ResidualStopCriterium_DetermineStatus(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_ResidualStopCriterium __instance,
	int iterationNumber,
	MathNet_Numerics_LinearAlgebra_Double_Vector solutionVector,
	MathNet_Numerics_LinearAlgebra_Double_Vector sourceVector,
	MathNet_Numerics_LinearAlgebra_Double_Vector residualVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_ResidualStopCriterium_ResetToPrecalculationState(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_ResidualStopCriterium __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_ResidualStopCriterium_Clone(
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_ResidualStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_IIterationStopCriterium * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_ResidualStopCriterium__Get__DefaultMaximumResidual(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_Solvers_StopCriterium_ResidualStopCriterium__Get__DefaultMinimumIterationsBelowMaximum(
	int * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.SparseMatrix
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix__Create(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix * __instance,
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 storage,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix__Create_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix * __instance,
	int order,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix__Create_2(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix * __instance,
	int rows,
	int columns,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix__Create_3(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix * __instance,
	int rows,
	int columns,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix__Create_4(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix * __instance,
	int rows,
	int columns,
	double * array,
	ssize_t __arrayLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix__Create_5(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix * __instance,
	double * array,
	ssize_t __arrayLength1,
	ssize_t __arrayLength2,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix__Create_6(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Get_NonZerosCount(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Get_IsSymmetric(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Get_Storage(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Get_ColumnCount(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Get_RowCount(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Get_Item(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	int row,
	int column,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Set_Item(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	int row,
	int column,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_OfMatrix(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_OfArray(
	double * array,
	ssize_t __arrayLength1,
	ssize_t __arrayLength2,
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_OfIndexed(
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 enumerable,
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_OfRowMajor(
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 rowMajor,
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_OfColumnMajor(
	int rows,
	int columns,
	System_Collections_Generic_IList_T1 columnMajor,
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_OfColumns(
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_OfColumnsCovariant(
	char * TColumn,
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_OfRows(
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_OfRowsCovariant(
	char * TRow,
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Create(
	int rows,
	int columns,
	System_Func_T3 init,
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_CreateMatrix(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	int numberOfRows,
	int numberOfColumns,
	int fullyMutable,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_CreateVector(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	int size,
	int fullyMutable,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_LowerTriangle(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_LowerTriangle_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_UpperTriangle(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_UpperTriangle_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_StrictlyLowerTriangle(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_StrictlyLowerTriangle_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_StrictlyUpperTriangle(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_StrictlyUpperTriangle_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Transpose(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_FrobeniusNorm(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_InfinityNorm(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Identity(
	int order,
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_KroneckerProduct(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_IndexedEnumerator(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_op_Addition(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix leftSide,
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_op_UnaryPlus(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_op_Subtraction(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix leftSide,
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_op_UnaryNegation(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_op_Multiply(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix leftSide,
	double rightSide,
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_op_Multiply_1(
	double leftSide,
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_op_Multiply_2(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix leftSide,
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_op_Multiply_3(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix leftSide,
	MathNet_Numerics_LinearAlgebra_Double_SparseVector rightSide,
	MathNet_Numerics_LinearAlgebra_Double_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_op_Multiply_4(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector leftSide,
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Double_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_op_Modulus(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix leftSide,
	double rightSide,
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_ToTypeString(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_L1Norm(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_ConjugateTranspose(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Trace(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_InsertColumn(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	int columnIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 column,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_SetColumn(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	int columnIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 column,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_SetColumn_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	int columnIndex,
	double * column,
	ssize_t __columnLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_InsertRow(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	int rowIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 row,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_SetRow(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	int rowIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 row,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_SetRow_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	int rowIndex,
	double * row,
	ssize_t __rowLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_SetSubMatrix(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 subMatrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_SetDiagonal(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 source,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_SetDiagonal_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	double * source,
	ssize_t __sourceLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_PermuteRows(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_Permutation p,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_PermuteColumns(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_Permutation p,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Append(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 right,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Append_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 right,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Stack(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Stack_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_DiagonalStack(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_DiagonalStack_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_L2Norm(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_ColumnEnumerator(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_ColumnEnumerator_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	int index,
	int length,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_RowEnumerator(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	int index,
	int length,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_RowEnumerator_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_ToArray(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	double ** __returnValue,
	ssize_t * ____returnValueLength1,
	ssize_t * ____returnValueLength2,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_ToColumnWiseArray(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_ToRowWiseArray(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_MapInplace(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	System_Func_T2 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_MapIndexedInplace(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	System_Func_T4 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Add(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Add_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Subtract(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Subtract_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Multiply(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	double scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Multiply_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	double scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Divide(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	double scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Divide_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	double scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Multiply_2(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Multiply_3(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_LeftMultiply(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_LeftMultiply_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Multiply_4(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Multiply_5(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_TransposeAndMultiply(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_TransposeAndMultiply_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_TransposeThisAndMultiply(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_TransposeThisAndMultiply_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_TransposeThisAndMultiply_2(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_TransposeThisAndMultiply_3(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Negate(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Negate_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Conjugate(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Conjugate_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_PointwiseMultiply(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_PointwiseMultiply_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_PointwiseDivide(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_PointwiseDivide_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Modulus(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	double divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Modulus_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	double divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Rank(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_ConditionNumber(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Determinant(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Inverse(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_KroneckerProduct_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_NormalizeColumns(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	int p,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_NormalizeRows(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	int p,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Equals(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Equals_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_GetHashCode(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_ToMatrixString(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	int maxRows,
	int maxColumns,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_ToMatrixString_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	int maxRows,
	int maxColumns,
	int padding,
	char * format,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_ToString(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	int maxRows,
	int maxColumns,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_ToString_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_ToString_2(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	char * format,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_At(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	int row,
	int column,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_At_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	int row,
	int column,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Clear(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_ClearColumn(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	int columnIndex,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_ClearRow(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	int rowIndex,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_ClearSubMatrix(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Clone(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_CopyTo(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 target,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Row(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Row_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Row_2(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	int rowIndex,
	int columnIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Row_3(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	int rowIndex,
	int columnIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Column(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Column_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Column_2(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	int columnIndex,
	int rowIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Column_3(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	int columnIndex,
	int rowIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_SubMatrix(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseMatrix_Diagonal(
	MathNet_Numerics_LinearAlgebra_Double_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Double.SparseVector
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector__Create(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector * __instance,
	MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1 storage,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector__Create_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector * __instance,
	int length,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector__Create_2(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector * __instance,
	int length,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector__Create_3(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector__Create_4(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector * __instance,
	System_Collections_Generic_IEnumerable_T1 other,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_Get_NonZerosCount(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_Get_Storage(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_Get_Count(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_Get_Item(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	int index,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_Set_Item(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	int index,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_OfVector(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 vector,
	MathNet_Numerics_LinearAlgebra_Double_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_OfEnumerable(
	System_Collections_Generic_IEnumerable_T1 enumerable,
	MathNet_Numerics_LinearAlgebra_Double_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_OfIndexedEnumerable(
	int length,
	System_Collections_Generic_IEnumerable_T1 enumerable,
	MathNet_Numerics_LinearAlgebra_Double_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_Create(
	int length,
	System_Func_T2 init,
	MathNet_Numerics_LinearAlgebra_Double_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_CreateMatrix(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	int rows,
	int columns,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_CreateVector(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	int size,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_op_Addition(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector leftSide,
	MathNet_Numerics_LinearAlgebra_Double_SparseVector rightSide,
	MathNet_Numerics_LinearAlgebra_Double_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_op_UnaryNegation(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector rightSide,
	MathNet_Numerics_LinearAlgebra_Double_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_op_Subtraction(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector leftSide,
	MathNet_Numerics_LinearAlgebra_Double_SparseVector rightSide,
	MathNet_Numerics_LinearAlgebra_Double_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_op_Multiply(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector leftSide,
	double rightSide,
	MathNet_Numerics_LinearAlgebra_Double_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_op_Multiply_1(
	double leftSide,
	MathNet_Numerics_LinearAlgebra_Double_SparseVector rightSide,
	MathNet_Numerics_LinearAlgebra_Double_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_op_Multiply_2(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector leftSide,
	MathNet_Numerics_LinearAlgebra_Double_SparseVector rightSide,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_op_Division(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector leftSide,
	double rightSide,
	MathNet_Numerics_LinearAlgebra_Double_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_op_Modulus(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector leftSide,
	double rightSide,
	MathNet_Numerics_LinearAlgebra_Double_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_AbsoluteMinimumIndex(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_MaximumIndex(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_MinimumIndex(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_Sum(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_SumMagnitudes(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_OuterProduct(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector u,
	MathNet_Numerics_LinearAlgebra_Double_SparseVector v,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_OuterProduct_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Double_SparseVector v,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_Norm(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	double p,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_Parse(
	char * value,
	MathNet_Numerics_LinearAlgebra_Double_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_Parse_1(
	char * value,
	System_IFormatProvider formatProvider,
	MathNet_Numerics_LinearAlgebra_Double_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_TryParse(
	char * value,
	MathNet_Numerics_LinearAlgebra_Double_SparseVector * result,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_TryParse_1(
	char * value,
	System_IFormatProvider formatProvider,
	MathNet_Numerics_LinearAlgebra_Double_SparseVector * result,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_ToTypeString(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_AbsoluteMinimum(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_AbsoluteMaximum(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_AbsoluteMaximumIndex(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_Normalize(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	double p,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_Clone(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_SetValues(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	double * values,
	ssize_t __valuesLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_CopyTo(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 target,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_SubVector(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	int index,
	int count,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_SetSubVector(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	int index,
	int count,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 subVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_CopySubVectorTo(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 destination,
	int sourceIndex,
	int targetIndex,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_CopyTo_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 destination,
	int sourceIndex,
	int targetIndex,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_ToArray(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_ToColumnMatrix(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_ToRowMatrix(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_GetEnumerator(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	System_Collections_Generic_IEnumerator_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_GetIndexedEnumerator(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_MapInplace(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	System_Func_T2 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_MapIndexedInplace(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	System_Func_T3 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_Equals(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_Equals_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_GetHashCode(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_ToVectorString(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	int maxLines,
	int maxPerLine,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_ToVectorString_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	int maxLines,
	int maxPerLine,
	int padding,
	char * format,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_ToString(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	int maxLines,
	int maxPerLine,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_ToString_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_ToString_2(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	char * format,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_ToString_3(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_At(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	int index,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_At_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	int index,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_Clear(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_ClearSubVector(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	int index,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_Add(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	double scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_Add_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	double scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_Plus(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_Add_2(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_Add_3(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_Subtract(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	double scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_Subtract_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	double scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_Negate(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_Negate_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_Subtract_2(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_Subtract_3(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_Conjugate(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_Conjugate_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_Multiply(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	double scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_Multiply_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	double scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_DotProduct(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_Divide(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	double scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_Divide_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	double scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_Modulus(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	double divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_Modulus_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	double divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_PointwiseMultiply(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_PointwiseMultiply_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_PointwiseDivide(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_PointwiseDivide_1(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_OuterProduct_2(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 v,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_Maximum(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Double_SparseVector_Minimum(
	MathNet_Numerics_LinearAlgebra_Double_SparseVector __instance,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.ICalculationStatus
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus_Get_TerminatesCalculation(
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus __instance,
	int * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationCancelled
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationCancelled__Create(
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationCancelled * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationCancelled_Get_TerminatesCalculation(
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationCancelled __instance,
	int * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationConverged
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationConverged__Create(
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationConverged * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationConverged_Get_TerminatesCalculation(
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationConverged __instance,
	int * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationDiverged
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationDiverged__Create(
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationDiverged * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationDiverged_Get_TerminatesCalculation(
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationDiverged __instance,
	int * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationFailure
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationFailure__Create(
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationFailure * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationFailure_Get_TerminatesCalculation(
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationFailure __instance,
	int * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationIndetermined
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationIndetermined__Create(
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationIndetermined * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationIndetermined_Get_TerminatesCalculation(
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationIndetermined __instance,
	int * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationRunning
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationRunning__Create(
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationRunning * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationRunning_Get_TerminatesCalculation(
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationRunning __instance,
	int * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationStoppedWithoutConvergence
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationStoppedWithoutConvergence__Create(
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationStoppedWithoutConvergence * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationStoppedWithoutConvergence_Get_TerminatesCalculation(
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_CalculationStoppedWithoutConvergence __instance,
	int * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.Matrix
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Get_Storage(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Get_ColumnCount(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Get_RowCount(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Get_Item(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	int row,
	int column,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Set_Item(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	int row,
	int column,
	float value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Get_IsSymmetric(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_L1Norm(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_ConjugateTranspose(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_FrobeniusNorm(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_InfinityNorm(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Trace(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_StrictlyLowerTriangle(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_StrictlyLowerTriangle_1(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_StrictlyUpperTriangle(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_StrictlyUpperTriangle_1(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_InsertColumn(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	int columnIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 column,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_SetColumn(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	int columnIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 column,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_SetColumn_1(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	int columnIndex,
	float * column,
	ssize_t __columnLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_InsertRow(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	int rowIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 row,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_SetRow(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	int rowIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 row,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_SetRow_1(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	int rowIndex,
	float * row,
	ssize_t __rowLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_SetSubMatrix(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 subMatrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_SetDiagonal(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 source,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_SetDiagonal_1(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	float * source,
	ssize_t __sourceLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Transpose(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_PermuteRows(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_Permutation p,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_PermuteColumns(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_Permutation p,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Append(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 right,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Append_1(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 right,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Stack(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Stack_1(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_DiagonalStack(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_DiagonalStack_1(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_L2Norm(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_ColumnEnumerator(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_ColumnEnumerator_1(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	int index,
	int length,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_RowEnumerator(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	int index,
	int length,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_RowEnumerator_1(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_IndexedEnumerator(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_ToArray(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	float ** __returnValue,
	ssize_t * ____returnValueLength1,
	ssize_t * ____returnValueLength2,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_ToColumnWiseArray(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	float ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_ToRowWiseArray(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	float ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_MapInplace(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	System_Func_T2 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_MapIndexedInplace(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	System_Func_T4 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Add(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Add_1(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Subtract(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Subtract_1(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Multiply(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	float scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Multiply_1(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	float scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Divide(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	float scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Divide_1(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	float scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Multiply_2(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Multiply_3(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_LeftMultiply(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_LeftMultiply_1(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Multiply_4(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Multiply_5(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_TransposeAndMultiply(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_TransposeAndMultiply_1(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_TransposeThisAndMultiply(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_TransposeThisAndMultiply_1(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_TransposeThisAndMultiply_2(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_TransposeThisAndMultiply_3(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Negate(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Negate_1(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Conjugate(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Conjugate_1(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_PointwiseMultiply(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_PointwiseMultiply_1(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_PointwiseDivide(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_PointwiseDivide_1(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Modulus(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	float divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Modulus_1(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	float divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Rank(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_ConditionNumber(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Determinant(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Inverse(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_KroneckerProduct(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_KroneckerProduct_1(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_NormalizeColumns(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	int p,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_NormalizeRows(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	int p,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Equals(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Equals_1(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_GetHashCode(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_ToTypeString(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_ToMatrixString(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	int maxRows,
	int maxColumns,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_ToMatrixString_1(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	int maxRows,
	int maxColumns,
	int padding,
	char * format,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_ToString(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	int maxRows,
	int maxColumns,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_ToString_1(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_ToString_2(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	char * format,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_At(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	int row,
	int column,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_At_1(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	int row,
	int column,
	float value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Clear(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_ClearColumn(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	int columnIndex,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_ClearRow(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	int rowIndex,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_ClearSubMatrix(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Clone(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_CopyTo(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 target,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_CreateMatrix(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	int numberOfRows,
	int numberOfColumns,
	int fullyMutable,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_CreateVector(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	int size,
	int fullyMutable,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Row(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Row_1(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Row_2(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	int rowIndex,
	int columnIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Row_3(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	int rowIndex,
	int columnIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Column(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Column_1(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Column_2(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	int columnIndex,
	int rowIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Column_3(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	int columnIndex,
	int rowIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_UpperTriangle(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_LowerTriangle(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_LowerTriangle_1(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_UpperTriangle_1(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_SubMatrix(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Matrix_Diagonal(
	MathNet_Numerics_LinearAlgebra_Single_Matrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.DenseMatrix
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix__Create(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix * __instance,
	MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1 storage,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix__Create_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix * __instance,
	int order,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix__Create_2(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix * __instance,
	int rows,
	int columns,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix__Create_3(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix * __instance,
	int rows,
	int columns,
	float * storage,
	ssize_t __storageLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix__Create_4(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix * __instance,
	int rows,
	int columns,
	float value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix__Create_5(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix * __instance,
	float * array,
	ssize_t __arrayLength1,
	ssize_t __arrayLength2,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix__Create_6(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Get_Data(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	float ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Get_Values(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	float ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Get_Storage(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Get_ColumnCount(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Get_RowCount(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Get_Item(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	int row,
	int column,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Set_Item(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	int row,
	int column,
	float value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Get_IsSymmetric(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_OfMatrix(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_OfArray(
	float * array,
	ssize_t __arrayLength1,
	ssize_t __arrayLength2,
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_OfIndexed(
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 enumerable,
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_OfColumnMajor(
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 columnMajor,
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_OfColumns(
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_OfColumnsCovariant(
	char * TColumn,
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_OfRows(
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_OfRowsCovariant(
	char * TRow,
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Create(
	int rows,
	int columns,
	System_Func_T3 init,
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_CreateRandom(
	int rows,
	int columns,
	MathNet_Numerics_Distributions_IContinuousDistribution distribution,
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_CreateMatrix(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	int numberOfRows,
	int numberOfColumns,
	int fullyMutable,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_CreateVector(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	int size,
	int fullyMutable,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Transpose(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_L1Norm(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_FrobeniusNorm(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_InfinityNorm(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Identity(
	int order,
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Trace(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_op_Addition(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix leftSide,
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_op_UnaryPlus(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_op_Subtraction(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix leftSide,
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_op_UnaryNegation(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_op_Multiply(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix leftSide,
	float rightSide,
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_op_Multiply_1(
	float leftSide,
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_op_Multiply_2(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix leftSide,
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_op_Multiply_3(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix leftSide,
	MathNet_Numerics_LinearAlgebra_Single_DenseVector rightSide,
	MathNet_Numerics_LinearAlgebra_Single_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_op_Multiply_4(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector leftSide,
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Single_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_op_Modulus(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix leftSide,
	float rightSide,
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_ConjugateTranspose(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_StrictlyLowerTriangle(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_StrictlyLowerTriangle_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_StrictlyUpperTriangle(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_StrictlyUpperTriangle_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_InsertColumn(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	int columnIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 column,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_SetColumn(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	int columnIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 column,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_SetColumn_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	int columnIndex,
	float * column,
	ssize_t __columnLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_InsertRow(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	int rowIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 row,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_SetRow(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	int rowIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 row,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_SetRow_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	int rowIndex,
	float * row,
	ssize_t __rowLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_SetSubMatrix(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 subMatrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_SetDiagonal(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 source,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_SetDiagonal_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	float * source,
	ssize_t __sourceLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_PermuteRows(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_Permutation p,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_PermuteColumns(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_Permutation p,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Append(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 right,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Append_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 right,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Stack(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Stack_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_DiagonalStack(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_DiagonalStack_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_L2Norm(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_ColumnEnumerator(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_ColumnEnumerator_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	int index,
	int length,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_RowEnumerator(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	int index,
	int length,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_RowEnumerator_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_IndexedEnumerator(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_ToArray(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	float ** __returnValue,
	ssize_t * ____returnValueLength1,
	ssize_t * ____returnValueLength2,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_ToColumnWiseArray(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	float ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_ToRowWiseArray(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	float ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_MapInplace(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	System_Func_T2 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_MapIndexedInplace(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	System_Func_T4 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Add(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Add_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Subtract(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Subtract_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Multiply(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	float scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Multiply_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	float scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Divide(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	float scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Divide_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	float scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Multiply_2(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Multiply_3(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_LeftMultiply(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_LeftMultiply_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Multiply_4(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Multiply_5(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_TransposeAndMultiply(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_TransposeAndMultiply_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_TransposeThisAndMultiply(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_TransposeThisAndMultiply_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_TransposeThisAndMultiply_2(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_TransposeThisAndMultiply_3(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Negate(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Negate_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Conjugate(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Conjugate_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_PointwiseMultiply(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_PointwiseMultiply_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_PointwiseDivide(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_PointwiseDivide_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Modulus(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	float divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Modulus_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	float divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Rank(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_ConditionNumber(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Determinant(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Inverse(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_KroneckerProduct(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_KroneckerProduct_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_NormalizeColumns(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	int p,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_NormalizeRows(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	int p,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Equals(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Equals_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_GetHashCode(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_ToTypeString(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_ToMatrixString(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	int maxRows,
	int maxColumns,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_ToMatrixString_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	int maxRows,
	int maxColumns,
	int padding,
	char * format,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_ToString(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	int maxRows,
	int maxColumns,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_ToString_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_ToString_2(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	char * format,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_At(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	int row,
	int column,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_At_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	int row,
	int column,
	float value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Clear(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_ClearColumn(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	int columnIndex,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_ClearRow(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	int rowIndex,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_ClearSubMatrix(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Clone(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_CopyTo(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 target,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Row(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Row_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Row_2(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	int rowIndex,
	int columnIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Row_3(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	int rowIndex,
	int columnIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Column(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Column_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Column_2(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	int columnIndex,
	int rowIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Column_3(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	int columnIndex,
	int rowIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_UpperTriangle(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_LowerTriangle(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_LowerTriangle_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_UpperTriangle_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_SubMatrix(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseMatrix_Diagonal(
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.Vector
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_Get_Storage(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_Get_Count(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_Get_Item(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	int index,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_Set_Item(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	int index,
	float value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_AbsoluteMinimum(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_AbsoluteMinimumIndex(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_AbsoluteMaximum(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_AbsoluteMaximumIndex(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_Sum(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_SumMagnitudes(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_Norm(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	double p,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_MaximumIndex(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_MinimumIndex(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_Normalize(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	double p,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_Clone(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_SetValues(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	float * values,
	ssize_t __valuesLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_CopyTo(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 target,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_SubVector(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	int index,
	int count,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_SetSubVector(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	int index,
	int count,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 subVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_CopySubVectorTo(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 destination,
	int sourceIndex,
	int targetIndex,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_CopyTo_1(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 destination,
	int sourceIndex,
	int targetIndex,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_ToArray(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	float ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_ToColumnMatrix(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_ToRowMatrix(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_GetEnumerator(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	System_Collections_Generic_IEnumerator_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_GetIndexedEnumerator(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_MapInplace(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	System_Func_T2 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_MapIndexedInplace(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	System_Func_T3 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_Equals(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_Equals_1(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_GetHashCode(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_ToTypeString(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_ToVectorString(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	int maxLines,
	int maxPerLine,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_ToVectorString_1(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	int maxLines,
	int maxPerLine,
	int padding,
	char * format,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_ToString(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	int maxLines,
	int maxPerLine,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_ToString_1(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_ToString_2(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	char * format,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_ToString_3(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_At(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	int index,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_At_1(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	int index,
	float value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_Clear(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_ClearSubVector(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	int index,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_CreateMatrix(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	int rows,
	int columns,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_CreateVector(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	int size,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_Add(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	float scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_Add_1(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	float scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_Plus(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_Add_2(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_Add_3(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_Subtract(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	float scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_Subtract_1(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	float scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_Negate(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_Negate_1(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_Subtract_2(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_Subtract_3(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_Conjugate(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_Conjugate_1(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_Multiply(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	float scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_Multiply_1(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	float scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_DotProduct(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_Divide(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	float scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_Divide_1(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	float scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_Modulus(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	float divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_Modulus_1(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	float divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_PointwiseMultiply(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_PointwiseMultiply_1(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_PointwiseDivide(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_PointwiseDivide_1(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_OuterProduct(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 v,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_Maximum(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Vector_Minimum(
	MathNet_Numerics_LinearAlgebra_Single_Vector __instance,
	float * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.DenseVector
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector__Create(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector * __instance,
	MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1 storage,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector__Create_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector * __instance,
	int length,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector__Create_2(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector * __instance,
	float * storage,
	ssize_t __storageLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector__Create_3(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector * __instance,
	int length,
	float value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector__Create_4(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector__Create_5(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector * __instance,
	System_Collections_Generic_IEnumerable_T1 other,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_Get_Values(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	float ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_Get_Storage(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_Get_Count(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_Get_Item(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	int index,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_Set_Item(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	int index,
	float value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_OfVector(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 vector,
	MathNet_Numerics_LinearAlgebra_Single_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_OfEnumerable(
	System_Collections_Generic_IEnumerable_T1 enumerable,
	MathNet_Numerics_LinearAlgebra_Single_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_OfIndexedEnumerable(
	int length,
	System_Collections_Generic_IEnumerable_T1 enumerable,
	MathNet_Numerics_LinearAlgebra_Single_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_Create(
	int length,
	System_Func_T2 init,
	MathNet_Numerics_LinearAlgebra_Single_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_CreateRandom(
	int length,
	MathNet_Numerics_Distributions_IContinuousDistribution distribution,
	MathNet_Numerics_LinearAlgebra_Single_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_op_Explicit(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector vector,
	float ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_op_Implicit(
	float * array,
	ssize_t __arrayLength,
	MathNet_Numerics_LinearAlgebra_Single_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_CreateMatrix(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	int rows,
	int columns,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_CreateVector(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	int size,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_op_Addition(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector leftSide,
	MathNet_Numerics_LinearAlgebra_Single_DenseVector rightSide,
	MathNet_Numerics_LinearAlgebra_Single_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_op_UnaryNegation(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector rightSide,
	MathNet_Numerics_LinearAlgebra_Single_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_op_Subtraction(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector leftSide,
	MathNet_Numerics_LinearAlgebra_Single_DenseVector rightSide,
	MathNet_Numerics_LinearAlgebra_Single_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_op_Multiply(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector leftSide,
	float rightSide,
	MathNet_Numerics_LinearAlgebra_Single_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_op_Multiply_1(
	float leftSide,
	MathNet_Numerics_LinearAlgebra_Single_DenseVector rightSide,
	MathNet_Numerics_LinearAlgebra_Single_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_op_Multiply_2(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector leftSide,
	MathNet_Numerics_LinearAlgebra_Single_DenseVector rightSide,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_op_Division(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector leftSide,
	float rightSide,
	MathNet_Numerics_LinearAlgebra_Single_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_op_Modulus(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector leftSide,
	float rightSide,
	MathNet_Numerics_LinearAlgebra_Single_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_AbsoluteMinimumIndex(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_AbsoluteMinimum(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_AbsoluteMaximum(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_AbsoluteMaximumIndex(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_MaximumIndex(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_MinimumIndex(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_Sum(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_SumMagnitudes(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_OuterProduct(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector u,
	MathNet_Numerics_LinearAlgebra_Single_DenseVector v,
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_OuterProduct_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Single_DenseVector v,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_Norm(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	double p,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_Parse(
	char * value,
	MathNet_Numerics_LinearAlgebra_Single_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_Parse_1(
	char * value,
	System_IFormatProvider formatProvider,
	MathNet_Numerics_LinearAlgebra_Single_DenseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_TryParse(
	char * value,
	MathNet_Numerics_LinearAlgebra_Single_DenseVector * result,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_TryParse_1(
	char * value,
	System_IFormatProvider formatProvider,
	MathNet_Numerics_LinearAlgebra_Single_DenseVector * result,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_Normalize(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	double p,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_Clone(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_SetValues(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	float * values,
	ssize_t __valuesLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_CopyTo(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 target,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_SubVector(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	int index,
	int count,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_SetSubVector(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	int index,
	int count,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 subVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_CopySubVectorTo(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 destination,
	int sourceIndex,
	int targetIndex,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_CopyTo_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 destination,
	int sourceIndex,
	int targetIndex,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_ToArray(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	float ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_ToColumnMatrix(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_ToRowMatrix(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_GetEnumerator(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	System_Collections_Generic_IEnumerator_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_GetIndexedEnumerator(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_MapInplace(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	System_Func_T2 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_MapIndexedInplace(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	System_Func_T3 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_Equals(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_Equals_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_GetHashCode(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_ToTypeString(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_ToVectorString(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	int maxLines,
	int maxPerLine,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_ToVectorString_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	int maxLines,
	int maxPerLine,
	int padding,
	char * format,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_ToString(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	int maxLines,
	int maxPerLine,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_ToString_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_ToString_2(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	char * format,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_ToString_3(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_At(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	int index,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_At_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	int index,
	float value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_Clear(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_ClearSubVector(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	int index,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_Add(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	float scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_Add_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	float scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_Plus(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_Add_2(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_Add_3(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_Subtract(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	float scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_Subtract_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	float scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_Negate(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_Negate_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_Subtract_2(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_Subtract_3(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_Conjugate(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_Conjugate_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_Multiply(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	float scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_Multiply_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	float scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_DotProduct(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_Divide(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	float scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_Divide_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	float scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_Modulus(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	float divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_Modulus_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	float divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_PointwiseMultiply(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_PointwiseMultiply_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_PointwiseDivide(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_PointwiseDivide_1(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_OuterProduct_2(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 v,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_Maximum(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DenseVector_Minimum(
	MathNet_Numerics_LinearAlgebra_Single_DenseVector __instance,
	float * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix__Create(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix * __instance,
	MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1 storage,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix__Create_1(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix * __instance,
	int order,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix__Create_2(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix * __instance,
	int rows,
	int columns,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix__Create_3(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix * __instance,
	int rows,
	int columns,
	float diagonalValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix__Create_4(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix * __instance,
	int rows,
	int columns,
	float * diagonalStorage,
	ssize_t __diagonalStorageLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix__Create_5(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix * __instance,
	float * array,
	ssize_t __arrayLength1,
	ssize_t __arrayLength2,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix__Create_6(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Get_IsSymmetric(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Get_Storage(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Get_ColumnCount(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Get_RowCount(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Get_Item(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	int row,
	int column,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Set_Item(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	int row,
	int column,
	float value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_OfMatrix(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_OfArray(
	float * array,
	ssize_t __arrayLength1,
	ssize_t __arrayLength2,
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_OfIndexedDiagonal(
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 diagonal,
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_OfDiagonal(
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 diagonal,
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Create(
	int rows,
	int columns,
	System_Func_T2 init,
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_CreateRandom(
	int rows,
	int columns,
	MathNet_Numerics_Distributions_IContinuousDistribution distribution,
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_CreateMatrix(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	int numberOfRows,
	int numberOfColumns,
	int fullyMutable,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_CreateVector(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	int size,
	int fullyMutable,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Add(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Subtract(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_SetDiagonal(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	float * source,
	ssize_t __sourceLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_SetDiagonal_1(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 source,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Multiply(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Multiply_1(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Multiply_2(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_LeftMultiply(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Determinant(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Diagonal(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_TransposeAndMultiply(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_TransposeAndMultiply_1(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Transpose(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_L1Norm(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_L2Norm(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_FrobeniusNorm(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_InfinityNorm(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_ConditionNumber(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Inverse(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_LowerTriangle(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_LowerTriangle_1(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_StrictlyLowerTriangle(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_StrictlyLowerTriangle_1(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_UpperTriangle(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_UpperTriangle_1(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_StrictlyUpperTriangle(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_StrictlyUpperTriangle_1(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_SubMatrix(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_InsertColumn(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	int columnIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 column,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_InsertRow(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	int rowIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 row,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_PermuteColumns(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_Permutation p,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_PermuteRows(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_Permutation p,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Identity(
	int order,
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_ConjugateTranspose(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Trace(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_SetColumn(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	int columnIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 column,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_SetColumn_1(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	int columnIndex,
	float * column,
	ssize_t __columnLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_SetRow(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	int rowIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 row,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_SetRow_1(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	int rowIndex,
	float * row,
	ssize_t __rowLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_SetSubMatrix(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 subMatrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Append(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 right,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Append_1(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 right,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Stack(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Stack_1(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_DiagonalStack(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_DiagonalStack_1(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_ColumnEnumerator(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_ColumnEnumerator_1(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	int index,
	int length,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_RowEnumerator(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	int index,
	int length,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_RowEnumerator_1(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_IndexedEnumerator(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_ToArray(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	float ** __returnValue,
	ssize_t * ____returnValueLength1,
	ssize_t * ____returnValueLength2,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_ToColumnWiseArray(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	float ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_ToRowWiseArray(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	float ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_MapInplace(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	System_Func_T2 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_MapIndexedInplace(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	System_Func_T4 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Add_1(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Subtract_1(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Multiply_3(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	float scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Multiply_4(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	float scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Divide(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	float scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Divide_1(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	float scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Multiply_5(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_LeftMultiply_1(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_TransposeThisAndMultiply(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_TransposeThisAndMultiply_1(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_TransposeThisAndMultiply_2(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_TransposeThisAndMultiply_3(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Negate(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Negate_1(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Conjugate(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Conjugate_1(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_PointwiseMultiply(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_PointwiseMultiply_1(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_PointwiseDivide(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_PointwiseDivide_1(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Modulus(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	float divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Modulus_1(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	float divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Rank(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_KroneckerProduct(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_KroneckerProduct_1(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_NormalizeColumns(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	int p,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_NormalizeRows(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	int p,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Equals(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Equals_1(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_GetHashCode(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_ToTypeString(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_ToMatrixString(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	int maxRows,
	int maxColumns,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_ToMatrixString_1(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	int maxRows,
	int maxColumns,
	int padding,
	char * format,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_ToString(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	int maxRows,
	int maxColumns,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_ToString_1(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_ToString_2(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	char * format,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_At(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	int row,
	int column,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_At_1(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	int row,
	int column,
	float value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Clear(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_ClearColumn(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	int columnIndex,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_ClearRow(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	int rowIndex,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_ClearSubMatrix(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Clone(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_CopyTo(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 target,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Row(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Row_1(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Row_2(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	int rowIndex,
	int columnIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Row_3(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	int rowIndex,
	int columnIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Column(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Column_1(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Column_2(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	int columnIndex,
	int rowIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix_Column_3(
	MathNet_Numerics_LinearAlgebra_Single_DiagonalMatrix __instance,
	int columnIndex,
	int rowIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.ExtensionMethods
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_ExtensionMethods_Cholesky(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	MathNet_Numerics_LinearAlgebra_Single_Factorization_Cholesky * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_ExtensionMethods_LU(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	MathNet_Numerics_LinearAlgebra_Single_Factorization_LU * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_ExtensionMethods_QR(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	MathNet_Numerics_LinearAlgebra_Single_Factorization_QR * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_ExtensionMethods_GramSchmidt(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	MathNet_Numerics_LinearAlgebra_Single_Factorization_GramSchmidt * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_ExtensionMethods_Svd(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	int computeVectors,
	MathNet_Numerics_LinearAlgebra_Single_Factorization_Svd * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_ExtensionMethods_Evd(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	MathNet_Numerics_LinearAlgebra_Single_Factorization_Evd * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.Factorization.Cholesky
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_Cholesky_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_Cholesky __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_Cholesky_Get_DeterminantLn(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_Cholesky __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_Cholesky_Get_Factor(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_Cholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_Cholesky_Solve(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_Cholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_Cholesky_Solve_1(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_Cholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_Cholesky_Solve_2(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_Cholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_Cholesky_Solve_3(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_Cholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseCholesky
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseCholesky__Create(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseCholesky * __instance,
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseCholesky_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseCholesky __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseCholesky_Get_DeterminantLn(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseCholesky __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseCholesky_Get_Factor(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseCholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseCholesky_Solve(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseCholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseCholesky_Solve_1(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseCholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseCholesky_Solve_2(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseCholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseCholesky_Solve_3(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseCholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.Factorization.Evd
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_Evd_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_Evd __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_Evd_Get_Rank(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_Evd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_Evd_Get_IsFullRank(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_Evd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_Evd_Get_IsSymmetric(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_Evd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_Evd_EigenValues(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_Evd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_Evd_EigenVectors(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_Evd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_Evd_D(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_Evd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_Evd_Solve(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_Evd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_Evd_Solve_1(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_Evd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_Evd_Solve_2(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_Evd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_Evd_Solve_3(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_Evd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseEvd
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseEvd__Create(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseEvd * __instance,
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseEvd_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseEvd __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseEvd_Get_Rank(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseEvd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseEvd_Get_IsFullRank(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseEvd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseEvd_Get_IsSymmetric(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseEvd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseEvd_Solve(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseEvd_Solve_1(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseEvd_EigenValues(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseEvd_EigenVectors(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseEvd_D(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseEvd_Solve_2(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseEvd_Solve_3(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.Factorization.GramSchmidt
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_GramSchmidt_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_GramSchmidt __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_GramSchmidt_Get_IsFullRank(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_GramSchmidt __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_GramSchmidt_Get_Q(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_GramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_GramSchmidt_Get_R(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_GramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_GramSchmidt_Solve(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_GramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_GramSchmidt_Solve_1(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_GramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_GramSchmidt_Solve_2(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_GramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_GramSchmidt_Solve_3(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_GramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseGramSchmidt
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseGramSchmidt__Create(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseGramSchmidt * __instance,
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseGramSchmidt_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseGramSchmidt __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseGramSchmidt_Get_IsFullRank(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseGramSchmidt __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseGramSchmidt_Get_Q(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseGramSchmidt_Get_R(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseGramSchmidt_Solve(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseGramSchmidt_Solve_1(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseGramSchmidt_Solve_2(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseGramSchmidt_Solve_3(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.Factorization.LU
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_LU_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_LU __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_LU_Get_L(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_LU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_LU_Get_U(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_LU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_LU_Get_P(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_LU __instance,
	MathNet_Numerics_Permutation * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_LU_Solve(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_LU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_LU_Solve_1(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_LU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_LU_Solve_2(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_LU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_LU_Solve_3(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_LU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_LU_Inverse(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_LU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseLU
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseLU__Create(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseLU * __instance,
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseLU_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseLU __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseLU_Get_L(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseLU_Get_U(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseLU_Get_P(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseLU __instance,
	MathNet_Numerics_Permutation * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseLU_Solve(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseLU_Solve_1(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseLU_Inverse(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseLU_Solve_2(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseLU_Solve_3(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.Factorization.QR
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_QR_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_QR __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_QR_Get_IsFullRank(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_QR __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_QR_Get_Q(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_QR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_QR_Get_R(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_QR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_QR_Solve(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_QR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_QR_Solve_1(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_QR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_QR_Solve_2(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_QR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_QR_Solve_3(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_QR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseQR
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseQR__Create(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseQR * __instance,
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix matrix,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseQR_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseQR __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseQR_Get_IsFullRank(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseQR __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseQR_Get_Q(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseQR_Get_R(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseQR_Solve(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseQR_Solve_1(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseQR_Solve_2(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseQR_Solve_3(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.Factorization.Svd
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_Svd_Get_Rank(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_Svd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_Svd_Get_Norm2(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_Svd __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_Svd_Get_ConditionNumber(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_Svd __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_Svd_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_Svd __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_Svd_U(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_Svd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_Svd_VT(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_Svd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_Svd_W(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_Svd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_Svd_S(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_Svd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_Svd_Solve(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_Svd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_Svd_Solve_1(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_Svd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_Svd_Solve_2(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_Svd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_Svd_Solve_3(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_Svd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseSvd
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseSvd__Create(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseSvd * __instance,
	MathNet_Numerics_LinearAlgebra_Single_DenseMatrix matrix,
	int computeVectors,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseSvd_Get_Rank(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseSvd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseSvd_Get_Norm2(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseSvd __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseSvd_Get_ConditionNumber(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseSvd __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseSvd_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseSvd __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseSvd_Solve(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseSvd_Solve_1(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseSvd_U(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseSvd_VT(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseSvd_W(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseSvd_S(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseSvd_Solve_2(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseSvd_Solve_3(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_DenseSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.Factorization.UserCholesky
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserCholesky__Create(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserCholesky * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserCholesky_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserCholesky __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserCholesky_Get_DeterminantLn(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserCholesky __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserCholesky_Get_Factor(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserCholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserCholesky_Solve(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserCholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserCholesky_Solve_1(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserCholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserCholesky_Solve_2(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserCholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserCholesky_Solve_3(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserCholesky __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.Factorization.UserEvd
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserEvd__Create(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserEvd * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserEvd_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserEvd __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserEvd_Get_Rank(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserEvd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserEvd_Get_IsFullRank(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserEvd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserEvd_Get_IsSymmetric(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserEvd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserEvd_Solve(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserEvd_Solve_1(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserEvd_EigenValues(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserEvd_EigenVectors(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserEvd_D(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserEvd_Solve_2(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserEvd_Solve_3(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserEvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.Factorization.UserGramSchmidt
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserGramSchmidt__Create(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserGramSchmidt * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserGramSchmidt_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserGramSchmidt __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserGramSchmidt_Get_IsFullRank(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserGramSchmidt __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserGramSchmidt_Get_Q(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserGramSchmidt_Get_R(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserGramSchmidt_Solve(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserGramSchmidt_Solve_1(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserGramSchmidt_Solve_2(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserGramSchmidt_Solve_3(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserGramSchmidt __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.Factorization.UserLU
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserLU__Create(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserLU * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserLU_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserLU __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserLU_Get_L(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserLU_Get_U(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserLU_Get_P(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserLU __instance,
	MathNet_Numerics_Permutation * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserLU_Solve(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserLU_Solve_1(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserLU_Inverse(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserLU_Solve_2(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserLU_Solve_3(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserLU __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.Factorization.UserQR
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserQR__Create(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserQR * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	MathNet_Numerics_LinearAlgebra_Generic_Factorization_QRMethod method,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserQR_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserQR __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserQR_Get_IsFullRank(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserQR __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserQR_Get_Q(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserQR_Get_R(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserQR_Solve(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserQR_Solve_1(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserQR_Solve_2(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserQR_Solve_3(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserQR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.Factorization.UserSvd
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserSvd__Create(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserSvd * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	int computeVectors,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserSvd_Get_Rank(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserSvd __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserSvd_Get_Norm2(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserSvd __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserSvd_Get_ConditionNumber(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserSvd __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserSvd_Get_Determinant(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserSvd __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserSvd_Solve(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserSvd_Solve_1(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserSvd_U(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserSvd_VT(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserSvd_W(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserSvd_S(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserSvd_Solve_2(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Factorization_UserSvd_Solve_3(
	MathNet_Numerics_LinearAlgebra_Single_Factorization_UserSvd __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 input,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterativeSolver
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterativeSolver_Get_IterationResult(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterativeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterativeSolver_StopSolve(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterativeSolver __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterativeSolver_SetIterator(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterativeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterativeSolver_Solve(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterativeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Single_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Single_Vector vector,
	MathNet_Numerics_LinearAlgebra_Single_Vector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterativeSolver_Solve_1(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterativeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Single_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Single_Vector input,
	MathNet_Numerics_LinearAlgebra_Single_Vector result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterativeSolver_Solve_2(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterativeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Single_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Single_Matrix input,
	MathNet_Numerics_LinearAlgebra_Single_Matrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterativeSolver_Solve_3(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterativeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Single_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Single_Matrix input,
	MathNet_Numerics_LinearAlgebra_Single_Matrix result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterativeSolverSetup
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterativeSolverSetup_Get_SolverType(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterativeSolverSetup __instance,
	System_Type * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterativeSolverSetup_Get_PreconditionerType(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterativeSolverSetup __instance,
	System_Type * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterativeSolverSetup_Get_SolutionSpeed(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterativeSolverSetup __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterativeSolverSetup_Get_Reliability(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterativeSolverSetup __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterativeSolverSetup_CreateNew(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterativeSolverSetup __instance,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterativeSolver * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterator_Get_Status(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterator __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterator_Add(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterator __instance,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IIterationStopCriterium stopCriterium,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterator_Remove(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterator __instance,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IIterationStopCriterium stopCriterium,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterator_Contains(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterator __instance,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IIterationStopCriterium stopCriterium,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterator_IterationCancelled(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterator __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterator_DetermineStatus(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterator __instance,
	int iterationNumber,
	MathNet_Numerics_LinearAlgebra_Single_Vector solutionVector,
	MathNet_Numerics_LinearAlgebra_Single_Vector sourceVector,
	MathNet_Numerics_LinearAlgebra_Single_Vector residualVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterator_ResetToPrecalculationState(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterator __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterator_Clone(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterator __instance,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterator * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.BiCgStab
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_BiCgStab__Create(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_BiCgStab * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_BiCgStab__Create_1(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_BiCgStab * __instance,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_BiCgStab__Create_2(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_BiCgStab * __instance,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_IPreConditioner preconditioner,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_BiCgStab__Create_3(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_BiCgStab * __instance,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_IPreConditioner preconditioner,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_BiCgStab_Get_IterationResult(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_BiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_BiCgStab_SetPreconditioner(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_BiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_IPreConditioner preconditioner,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_BiCgStab_SetIterator(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_BiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_BiCgStab_StopSolve(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_BiCgStab __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_BiCgStab_Solve(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_BiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Single_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Single_Vector vector,
	MathNet_Numerics_LinearAlgebra_Single_Vector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_BiCgStab_Solve_1(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_BiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Single_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Single_Vector input,
	MathNet_Numerics_LinearAlgebra_Single_Vector result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_BiCgStab_Solve_2(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_BiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Single_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Single_Matrix input,
	MathNet_Numerics_LinearAlgebra_Single_Matrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_BiCgStab_Solve_3(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_BiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Single_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Single_Matrix input,
	MathNet_Numerics_LinearAlgebra_Single_Matrix result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.CompositeSolver
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_CompositeSolver__Create(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_CompositeSolver * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_CompositeSolver__Create_1(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_CompositeSolver * __instance,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_CompositeSolver_Get_IterationResult(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_CompositeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_CompositeSolver_LoadSolverInformation(
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_CompositeSolver_LoadSolverInformation_1(
	System_Type * typesToExclude,
	ssize_t __typesToExcludeLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_CompositeSolver_LoadSolverInformationFromAssembly(
	System_Reflection_AssemblyName assemblyName,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_CompositeSolver_LoadSolverInformationFromAssembly_1(
	System_Reflection_AssemblyName assemblyName,
	System_Type * typesToExclude,
	ssize_t __typesToExcludeLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_CompositeSolver_LoadSolverInformationFromAssembly_2(
	System_Type typeInAssembly,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_CompositeSolver_LoadSolverInformationFromAssembly_3(
	System_Type typeInAssembly,
	System_Type * typesToExclude,
	ssize_t __typesToExcludeLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_CompositeSolver_LoadSolverInformationFromAssembly_4(
	System_Reflection_Assembly assembly,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_CompositeSolver_LoadSolverInformationFromAssembly_5(
	System_Reflection_Assembly assembly,
	System_Type * typesToExclude,
	ssize_t __typesToExcludeLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_CompositeSolver_SetIterator(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_CompositeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_CompositeSolver_StopSolve(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_CompositeSolver __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_CompositeSolver_Solve(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_CompositeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Single_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Single_Vector vector,
	MathNet_Numerics_LinearAlgebra_Single_Vector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_CompositeSolver_Solve_1(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_CompositeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Single_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Single_Vector input,
	MathNet_Numerics_LinearAlgebra_Single_Vector result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_CompositeSolver_Solve_2(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_CompositeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Single_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Single_Matrix input,
	MathNet_Numerics_LinearAlgebra_Single_Matrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_CompositeSolver_Solve_3(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_CompositeSolver __instance,
	MathNet_Numerics_LinearAlgebra_Single_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Single_Matrix input,
	MathNet_Numerics_LinearAlgebra_Single_Matrix result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.CompositeSolver+DoubleComparer
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_CompositeSolver_DoubleComparer__Create(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_CompositeSolver_DoubleComparer * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_CompositeSolver_DoubleComparer_Compare(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_CompositeSolver_DoubleComparer __instance,
	double x,
	double y,
	int * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.GpBiCg
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_GpBiCg__Create(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_GpBiCg * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_GpBiCg__Create_1(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_GpBiCg * __instance,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_GpBiCg__Create_2(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_GpBiCg * __instance,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_IPreConditioner preconditioner,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_GpBiCg__Create_3(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_GpBiCg * __instance,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_IPreConditioner preconditioner,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_GpBiCg_Get_NumberOfBiCgStabSteps(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_GpBiCg __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_GpBiCg_Set_NumberOfBiCgStabSteps(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_GpBiCg __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_GpBiCg_Get_NumberOfGpBiCgSteps(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_GpBiCg __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_GpBiCg_Set_NumberOfGpBiCgSteps(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_GpBiCg __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_GpBiCg_Get_IterationResult(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_GpBiCg __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_GpBiCg_SetPreconditioner(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_GpBiCg __instance,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_IPreConditioner preconditioner,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_GpBiCg_SetIterator(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_GpBiCg __instance,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_GpBiCg_StopSolve(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_GpBiCg __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_GpBiCg_Solve(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_GpBiCg __instance,
	MathNet_Numerics_LinearAlgebra_Single_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Single_Vector vector,
	MathNet_Numerics_LinearAlgebra_Single_Vector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_GpBiCg_Solve_1(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_GpBiCg __instance,
	MathNet_Numerics_LinearAlgebra_Single_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Single_Vector input,
	MathNet_Numerics_LinearAlgebra_Single_Vector result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_GpBiCg_Solve_2(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_GpBiCg __instance,
	MathNet_Numerics_LinearAlgebra_Single_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Single_Matrix input,
	MathNet_Numerics_LinearAlgebra_Single_Matrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_GpBiCg_Solve_3(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_GpBiCg __instance,
	MathNet_Numerics_LinearAlgebra_Single_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Single_Matrix input,
	MathNet_Numerics_LinearAlgebra_Single_Matrix result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.MlkBiCgStab
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_MlkBiCgStab__Create(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_MlkBiCgStab * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_MlkBiCgStab__Create_1(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_MlkBiCgStab * __instance,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_MlkBiCgStab__Create_2(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_MlkBiCgStab * __instance,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_IPreConditioner preconditioner,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_MlkBiCgStab__Create_3(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_MlkBiCgStab * __instance,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_IPreConditioner preconditioner,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_MlkBiCgStab_Get_NumberOfStartingVectors(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_MlkBiCgStab __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_MlkBiCgStab_Set_NumberOfStartingVectors(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_MlkBiCgStab __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_MlkBiCgStab_Get_StartingVectors(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_MlkBiCgStab __instance,
	System_Collections_Generic_IList_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_MlkBiCgStab_Set_StartingVectors(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_MlkBiCgStab __instance,
	System_Collections_Generic_IList_T1 value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_MlkBiCgStab_Get_IterationResult(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_MlkBiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_MlkBiCgStab_ResetNumberOfStartingVectors(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_MlkBiCgStab __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_MlkBiCgStab_SetPreconditioner(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_MlkBiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_IPreConditioner preconditioner,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_MlkBiCgStab_SetIterator(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_MlkBiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_MlkBiCgStab_StopSolve(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_MlkBiCgStab __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_MlkBiCgStab_Solve(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_MlkBiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Single_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Single_Vector vector,
	MathNet_Numerics_LinearAlgebra_Single_Vector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_MlkBiCgStab_Solve_1(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_MlkBiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Single_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Single_Vector input,
	MathNet_Numerics_LinearAlgebra_Single_Vector result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_MlkBiCgStab_Solve_2(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_MlkBiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Single_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Single_Matrix input,
	MathNet_Numerics_LinearAlgebra_Single_Matrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_MlkBiCgStab_Solve_3(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_MlkBiCgStab __instance,
	MathNet_Numerics_LinearAlgebra_Single_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Single_Matrix input,
	MathNet_Numerics_LinearAlgebra_Single_Matrix result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.TFQMR
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_TFQMR__Create(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_TFQMR * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_TFQMR__Create_1(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_TFQMR * __instance,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_TFQMR__Create_2(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_TFQMR * __instance,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_IPreConditioner preconditioner,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_TFQMR__Create_3(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_TFQMR * __instance,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_IPreConditioner preconditioner,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_TFQMR_Get_IterationResult(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_TFQMR __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_TFQMR_SetPreconditioner(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_TFQMR __instance,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_IPreConditioner preconditioner,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_TFQMR_SetIterator(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_TFQMR __instance,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterator iterator,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_TFQMR_StopSolve(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_TFQMR __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_TFQMR_Solve(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_TFQMR __instance,
	MathNet_Numerics_LinearAlgebra_Single_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Single_Vector vector,
	MathNet_Numerics_LinearAlgebra_Single_Vector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_TFQMR_Solve_1(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_TFQMR __instance,
	MathNet_Numerics_LinearAlgebra_Single_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Single_Vector input,
	MathNet_Numerics_LinearAlgebra_Single_Vector result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_TFQMR_Solve_2(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_TFQMR __instance,
	MathNet_Numerics_LinearAlgebra_Single_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Single_Matrix input,
	MathNet_Numerics_LinearAlgebra_Single_Matrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_TFQMR_Solve_3(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterative_TFQMR __instance,
	MathNet_Numerics_LinearAlgebra_Single_Matrix matrix,
	MathNet_Numerics_LinearAlgebra_Single_Matrix input,
	MathNet_Numerics_LinearAlgebra_Single_Matrix result,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterator
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterator__Create(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterator * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterator__Create_1(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterator * __instance,
	System_Collections_Generic_IEnumerable_T1 stopCriteria,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterator_Get_Status(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterator __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterator_CreateDefault(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterator * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterator_Add(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterator __instance,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IIterationStopCriterium stopCriterium,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterator_Remove(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterator __instance,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IIterationStopCriterium stopCriterium,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterator_Contains(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterator __instance,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IIterationStopCriterium stopCriterium,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterator_IterationCancelled(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterator __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterator_DetermineStatus(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterator __instance,
	int iterationNumber,
	MathNet_Numerics_LinearAlgebra_Single_Vector solutionVector,
	MathNet_Numerics_LinearAlgebra_Single_Vector sourceVector,
	MathNet_Numerics_LinearAlgebra_Single_Vector residualVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterator_ResetToPrecalculationState(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterator __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterator_Clone(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Iterator __instance,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_IIterator * __returnValue,
	CDotNetHandle * __exception);

int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_IPreConditioner_Initialize(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_IPreConditioner __instance,
	MathNet_Numerics_LinearAlgebra_Single_Matrix matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_IPreConditioner_Approximate(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_IPreConditioner __instance,
	MathNet_Numerics_LinearAlgebra_Single_Vector rhs,
	MathNet_Numerics_LinearAlgebra_Single_Vector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_IPreConditioner_Approximate_1(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_IPreConditioner __instance,
	MathNet_Numerics_LinearAlgebra_Single_Vector rhs,
	MathNet_Numerics_LinearAlgebra_Single_Vector lhs,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.Diagonal
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_Diagonal__Create(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_Diagonal * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_Diagonal_Initialize(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_Diagonal __instance,
	MathNet_Numerics_LinearAlgebra_Single_Matrix matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_Diagonal_Approximate(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_Diagonal __instance,
	MathNet_Numerics_LinearAlgebra_Single_Vector rhs,
	MathNet_Numerics_LinearAlgebra_Single_Vector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_Diagonal_Approximate_1(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_Diagonal __instance,
	MathNet_Numerics_LinearAlgebra_Single_Vector rhs,
	MathNet_Numerics_LinearAlgebra_Single_Vector lhs,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.Ilutp
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_Ilutp__Create(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_Ilutp * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_Ilutp__Create_1(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_Ilutp * __instance,
	double fillLevel,
	double dropTolerance,
	double pivotTolerance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_Ilutp_Get_FillLevel(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_Ilutp __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_Ilutp_Set_FillLevel(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_Ilutp __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_Ilutp_Get_DropTolerance(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_Ilutp __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_Ilutp_Set_DropTolerance(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_Ilutp __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_Ilutp_Get_PivotTolerance(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_Ilutp __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_Ilutp_Set_PivotTolerance(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_Ilutp __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_Ilutp_Initialize(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_Ilutp __instance,
	MathNet_Numerics_LinearAlgebra_Single_Matrix matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_Ilutp_Approximate(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_Ilutp __instance,
	MathNet_Numerics_LinearAlgebra_Single_Vector rhs,
	MathNet_Numerics_LinearAlgebra_Single_Vector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_Ilutp_Approximate_1(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_Ilutp __instance,
	MathNet_Numerics_LinearAlgebra_Single_Vector rhs,
	MathNet_Numerics_LinearAlgebra_Single_Vector lhs,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_Ilutp__Get__DefaultFillLevel(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_Ilutp__Get__DefaultDropTolerance(
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IncompleteLU
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_IncompleteLU__Create(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_IncompleteLU * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_IncompleteLU_Initialize(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_IncompleteLU __instance,
	MathNet_Numerics_LinearAlgebra_Single_Matrix matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_IncompleteLU_Approximate(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_IncompleteLU __instance,
	MathNet_Numerics_LinearAlgebra_Single_Vector rhs,
	MathNet_Numerics_LinearAlgebra_Single_Vector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_IncompleteLU_Approximate_1(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_Preconditioners_IncompleteLU __instance,
	MathNet_Numerics_LinearAlgebra_Single_Vector rhs,
	MathNet_Numerics_LinearAlgebra_Single_Vector lhs,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IIterationStopCriterium
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IIterationStopCriterium_Get_Status(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IIterationStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IIterationStopCriterium_Get_StopLevel(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IIterationStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_StopCriterium_StopLevel * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IIterationStopCriterium_DetermineStatus(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IIterationStopCriterium __instance,
	int iterationNumber,
	MathNet_Numerics_LinearAlgebra_Single_Vector solutionVector,
	MathNet_Numerics_LinearAlgebra_Single_Vector sourceVector,
	MathNet_Numerics_LinearAlgebra_Single_Vector residualVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IIterationStopCriterium_ResetToPrecalculationState(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IIterationStopCriterium __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IIterationStopCriterium_Clone(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IIterationStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IIterationStopCriterium * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.DivergenceStopCriterium
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_DivergenceStopCriterium__Create(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_DivergenceStopCriterium * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_DivergenceStopCriterium__Create_1(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_DivergenceStopCriterium * __instance,
	double maximumRelativeIncrease,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_DivergenceStopCriterium__Create_2(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_DivergenceStopCriterium * __instance,
	int minimumIterations,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_DivergenceStopCriterium__Create_3(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_DivergenceStopCriterium * __instance,
	double maximumRelativeIncrease,
	int minimumIterations,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_DivergenceStopCriterium_Get_MaximumRelativeIncrease(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_DivergenceStopCriterium_Set_MaximumRelativeIncrease(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_DivergenceStopCriterium_Get_MinimumNumberOfIterations(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_DivergenceStopCriterium_Set_MinimumNumberOfIterations(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_DivergenceStopCriterium_Get_Status(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_DivergenceStopCriterium_Get_StopLevel(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_StopCriterium_StopLevel * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_DivergenceStopCriterium_ResetMaximumRelativeIncreaseToDefault(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_DivergenceStopCriterium_ResetNumberOfIterationsToDefault(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_DivergenceStopCriterium_DetermineStatus(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	int iterationNumber,
	MathNet_Numerics_LinearAlgebra_Single_Vector solutionVector,
	MathNet_Numerics_LinearAlgebra_Single_Vector sourceVector,
	MathNet_Numerics_LinearAlgebra_Single_Vector residualVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_DivergenceStopCriterium_ResetToPrecalculationState(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_DivergenceStopCriterium_Clone(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_DivergenceStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IIterationStopCriterium * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_DivergenceStopCriterium__Get__DefaultMaximumRelativeIncrease(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_DivergenceStopCriterium__Get__DefaultMinimumNumberOfIterations(
	int * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.FailureStopCriterium
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_FailureStopCriterium__Create(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_FailureStopCriterium * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_FailureStopCriterium_Get_Status(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_FailureStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_FailureStopCriterium_Get_StopLevel(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_FailureStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_StopCriterium_StopLevel * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_FailureStopCriterium_DetermineStatus(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_FailureStopCriterium __instance,
	int iterationNumber,
	MathNet_Numerics_LinearAlgebra_Single_Vector solutionVector,
	MathNet_Numerics_LinearAlgebra_Single_Vector sourceVector,
	MathNet_Numerics_LinearAlgebra_Single_Vector residualVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_FailureStopCriterium_ResetToPrecalculationState(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_FailureStopCriterium __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_FailureStopCriterium_Clone(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_FailureStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IIterationStopCriterium * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IterationCountStopCriterium
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IterationCountStopCriterium__Create(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IterationCountStopCriterium * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IterationCountStopCriterium__Create_1(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IterationCountStopCriterium * __instance,
	int maximumNumberOfIterations,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IterationCountStopCriterium_Get_MaximumNumberOfIterations(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IterationCountStopCriterium __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IterationCountStopCriterium_Set_MaximumNumberOfIterations(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IterationCountStopCriterium __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IterationCountStopCriterium_Get_Status(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IterationCountStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IterationCountStopCriterium_Get_StopLevel(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IterationCountStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_StopCriterium_StopLevel * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IterationCountStopCriterium_ResetMaximumNumberOfIterationsToDefault(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IterationCountStopCriterium __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IterationCountStopCriterium_DetermineStatus(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IterationCountStopCriterium __instance,
	int iterationNumber,
	MathNet_Numerics_LinearAlgebra_Single_Vector solutionVector,
	MathNet_Numerics_LinearAlgebra_Single_Vector sourceVector,
	MathNet_Numerics_LinearAlgebra_Single_Vector residualVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IterationCountStopCriterium_ResetToPrecalculationState(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IterationCountStopCriterium __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IterationCountStopCriterium_Clone(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IterationCountStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IIterationStopCriterium * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IterationCountStopCriterium__Get__DefaultMaximumNumberOfIterations(
	int * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.ResidualStopCriterium
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_ResidualStopCriterium__Create(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_ResidualStopCriterium * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_ResidualStopCriterium__Create_1(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_ResidualStopCriterium * __instance,
	float maximum,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_ResidualStopCriterium__Create_2(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_ResidualStopCriterium * __instance,
	int minimumIterationsBelowMaximum,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_ResidualStopCriterium__Create_3(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_ResidualStopCriterium * __instance,
	float maximum,
	int minimumIterationsBelowMaximum,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_ResidualStopCriterium_Get_Maximum(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_ResidualStopCriterium __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_ResidualStopCriterium_Set_Maximum(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_ResidualStopCriterium __instance,
	float value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_ResidualStopCriterium_Get_MinimumIterationsBelowMaximum(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_ResidualStopCriterium __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_ResidualStopCriterium_Set_MinimumIterationsBelowMaximum(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_ResidualStopCriterium __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_ResidualStopCriterium_Get_Status(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_ResidualStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_Status_ICalculationStatus * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_ResidualStopCriterium_Get_StopLevel(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_ResidualStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Solvers_StopCriterium_StopLevel * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_ResidualStopCriterium_ResetMaximumResidualToDefault(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_ResidualStopCriterium __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_ResidualStopCriterium_ResetMinimumIterationsBelowMaximumToDefault(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_ResidualStopCriterium __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_ResidualStopCriterium_DetermineStatus(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_ResidualStopCriterium __instance,
	int iterationNumber,
	MathNet_Numerics_LinearAlgebra_Single_Vector solutionVector,
	MathNet_Numerics_LinearAlgebra_Single_Vector sourceVector,
	MathNet_Numerics_LinearAlgebra_Single_Vector residualVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_ResidualStopCriterium_ResetToPrecalculationState(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_ResidualStopCriterium __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_ResidualStopCriterium_Clone(
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_ResidualStopCriterium __instance,
	MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_IIterationStopCriterium * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_ResidualStopCriterium__Get__DefaultMaximumResidual(
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_Solvers_StopCriterium_ResidualStopCriterium__Get__DefaultMinimumIterationsBelowMaximum(
	int * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.SparseMatrix
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix__Create(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix * __instance,
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 storage,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix__Create_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix * __instance,
	int order,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix__Create_2(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix * __instance,
	int rows,
	int columns,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix__Create_3(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix * __instance,
	int rows,
	int columns,
	float value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix__Create_4(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix * __instance,
	int rows,
	int columns,
	float * array,
	ssize_t __arrayLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix__Create_5(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix * __instance,
	float * array,
	ssize_t __arrayLength1,
	ssize_t __arrayLength2,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix__Create_6(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Get_NonZerosCount(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Get_IsSymmetric(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Get_Storage(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Get_ColumnCount(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Get_RowCount(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Get_Item(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	int row,
	int column,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Set_Item(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	int row,
	int column,
	float value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_OfMatrix(
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 matrix,
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_OfArray(
	float * array,
	ssize_t __arrayLength1,
	ssize_t __arrayLength2,
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_OfIndexed(
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 enumerable,
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_OfRowMajor(
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 rowMajor,
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_OfColumnMajor(
	int rows,
	int columns,
	System_Collections_Generic_IList_T1 columnMajor,
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_OfColumns(
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_OfColumnsCovariant(
	char * TColumn,
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_OfRows(
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_OfRowsCovariant(
	char * TRow,
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Create(
	int rows,
	int columns,
	System_Func_T3 init,
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_CreateMatrix(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	int numberOfRows,
	int numberOfColumns,
	int fullyMutable,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_CreateVector(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	int size,
	int fullyMutable,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_LowerTriangle(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_LowerTriangle_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_UpperTriangle(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_UpperTriangle_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_StrictlyLowerTriangle(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_StrictlyLowerTriangle_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_StrictlyUpperTriangle(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_StrictlyUpperTriangle_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Transpose(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_FrobeniusNorm(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_InfinityNorm(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Identity(
	int order,
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_KroneckerProduct(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_IndexedEnumerator(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_op_Addition(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix leftSide,
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_op_UnaryPlus(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_op_Subtraction(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix leftSide,
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_op_UnaryNegation(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_op_Multiply(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix leftSide,
	float rightSide,
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_op_Multiply_1(
	float leftSide,
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_op_Multiply_2(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix leftSide,
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_op_Multiply_3(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix leftSide,
	MathNet_Numerics_LinearAlgebra_Single_SparseVector rightSide,
	MathNet_Numerics_LinearAlgebra_Single_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_op_Multiply_4(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector leftSide,
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix rightSide,
	MathNet_Numerics_LinearAlgebra_Single_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_op_Modulus(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix leftSide,
	float rightSide,
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_ToTypeString(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_L1Norm(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_ConjugateTranspose(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Trace(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_InsertColumn(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	int columnIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 column,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_SetColumn(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	int columnIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 column,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_SetColumn_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	int columnIndex,
	float * column,
	ssize_t __columnLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_InsertRow(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	int rowIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 row,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_SetRow(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	int rowIndex,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 row,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_SetRow_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	int rowIndex,
	float * row,
	ssize_t __rowLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_SetSubMatrix(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 subMatrix,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_SetDiagonal(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 source,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_SetDiagonal_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	float * source,
	ssize_t __sourceLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_PermuteRows(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_Permutation p,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_PermuteColumns(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_Permutation p,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Append(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 right,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Append_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 right,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Stack(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Stack_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_DiagonalStack(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_DiagonalStack_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 lower,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_L2Norm(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_ColumnEnumerator(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_ColumnEnumerator_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	int index,
	int length,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_RowEnumerator(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	int index,
	int length,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_RowEnumerator_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_ToArray(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	float ** __returnValue,
	ssize_t * ____returnValueLength1,
	ssize_t * ____returnValueLength2,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_ToColumnWiseArray(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	float ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_ToRowWiseArray(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	float ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_MapInplace(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	System_Func_T2 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_MapIndexedInplace(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	System_Func_T4 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Add(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Add_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Subtract(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Subtract_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Multiply(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	float scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Multiply_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	float scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Divide(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	float scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Divide_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	float scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Multiply_2(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Multiply_3(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_LeftMultiply(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_LeftMultiply_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 leftSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Multiply_4(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Multiply_5(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_TransposeAndMultiply(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_TransposeAndMultiply_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_TransposeThisAndMultiply(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_TransposeThisAndMultiply_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 rightSide,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_TransposeThisAndMultiply_2(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_TransposeThisAndMultiply_3(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Negate(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Negate_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Conjugate(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Conjugate_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_PointwiseMultiply(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_PointwiseMultiply_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_PointwiseDivide(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_PointwiseDivide_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Modulus(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	float divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Modulus_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	float divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Rank(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_ConditionNumber(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Determinant(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Inverse(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_KroneckerProduct_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_NormalizeColumns(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	int p,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_NormalizeRows(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	int p,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Equals(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 other,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Equals_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_GetHashCode(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_ToMatrixString(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	int maxRows,
	int maxColumns,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_ToMatrixString_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	int maxRows,
	int maxColumns,
	int padding,
	char * format,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_ToString(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	int maxRows,
	int maxColumns,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_ToString_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_ToString_2(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	char * format,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_At(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	int row,
	int column,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_At_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	int row,
	int column,
	float value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Clear(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_ClearColumn(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	int columnIndex,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_ClearRow(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	int rowIndex,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_ClearSubMatrix(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Clone(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_CopyTo(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 target,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Row(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Row_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Row_2(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	int rowIndex,
	int columnIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Row_3(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	int rowIndex,
	int columnIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Column(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Column_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	int index,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Column_2(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	int columnIndex,
	int rowIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Column_3(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	int columnIndex,
	int rowIndex,
	int length,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_SubMatrix(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseMatrix_Diagonal(
	MathNet_Numerics_LinearAlgebra_Single_SparseMatrix __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Single.SparseVector
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector__Create(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector * __instance,
	MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1 storage,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector__Create_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector * __instance,
	int length,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector__Create_2(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector * __instance,
	int length,
	float value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector__Create_3(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector * __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector__Create_4(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector * __instance,
	System_Collections_Generic_IEnumerable_T1 other,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_Get_NonZerosCount(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_Get_Storage(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_Get_Count(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_Get_Item(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	int index,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_Set_Item(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	int index,
	float value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_OfVector(
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 vector,
	MathNet_Numerics_LinearAlgebra_Single_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_OfEnumerable(
	System_Collections_Generic_IEnumerable_T1 enumerable,
	MathNet_Numerics_LinearAlgebra_Single_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_OfIndexedEnumerable(
	int length,
	System_Collections_Generic_IEnumerable_T1 enumerable,
	MathNet_Numerics_LinearAlgebra_Single_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_Create(
	int length,
	System_Func_T2 init,
	MathNet_Numerics_LinearAlgebra_Single_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_CreateMatrix(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	int rows,
	int columns,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_CreateVector(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	int size,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_op_Addition(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector leftSide,
	MathNet_Numerics_LinearAlgebra_Single_SparseVector rightSide,
	MathNet_Numerics_LinearAlgebra_Single_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_op_UnaryNegation(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector rightSide,
	MathNet_Numerics_LinearAlgebra_Single_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_op_Subtraction(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector leftSide,
	MathNet_Numerics_LinearAlgebra_Single_SparseVector rightSide,
	MathNet_Numerics_LinearAlgebra_Single_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_op_Multiply(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector leftSide,
	float rightSide,
	MathNet_Numerics_LinearAlgebra_Single_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_op_Multiply_1(
	float leftSide,
	MathNet_Numerics_LinearAlgebra_Single_SparseVector rightSide,
	MathNet_Numerics_LinearAlgebra_Single_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_op_Multiply_2(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector leftSide,
	MathNet_Numerics_LinearAlgebra_Single_SparseVector rightSide,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_op_Division(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector leftSide,
	float rightSide,
	MathNet_Numerics_LinearAlgebra_Single_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_op_Modulus(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector leftSide,
	float rightSide,
	MathNet_Numerics_LinearAlgebra_Single_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_AbsoluteMinimumIndex(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_MaximumIndex(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_MinimumIndex(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_Sum(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_SumMagnitudes(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_OuterProduct(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector u,
	MathNet_Numerics_LinearAlgebra_Single_SparseVector v,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_OuterProduct_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Single_SparseVector v,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_Norm(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	double p,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_Parse(
	char * value,
	MathNet_Numerics_LinearAlgebra_Single_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_Parse_1(
	char * value,
	System_IFormatProvider formatProvider,
	MathNet_Numerics_LinearAlgebra_Single_SparseVector * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_TryParse(
	char * value,
	MathNet_Numerics_LinearAlgebra_Single_SparseVector * result,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_TryParse_1(
	char * value,
	System_IFormatProvider formatProvider,
	MathNet_Numerics_LinearAlgebra_Single_SparseVector * result,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_ToTypeString(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_AbsoluteMinimum(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_AbsoluteMaximum(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_AbsoluteMaximumIndex(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_Normalize(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	double p,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_Clone(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_SetValues(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	float * values,
	ssize_t __valuesLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_CopyTo(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 target,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_SubVector(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	int index,
	int count,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_SetSubVector(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	int index,
	int count,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 subVector,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_CopySubVectorTo(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 destination,
	int sourceIndex,
	int targetIndex,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_CopyTo_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 destination,
	int sourceIndex,
	int targetIndex,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_ToArray(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	float ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_ToColumnMatrix(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_ToRowMatrix(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_GetEnumerator(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	System_Collections_Generic_IEnumerator_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_GetIndexedEnumerator(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_MapInplace(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	System_Func_T2 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_MapIndexedInplace(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	System_Func_T3 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_Equals(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_Equals_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_GetHashCode(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_ToVectorString(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	int maxLines,
	int maxPerLine,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_ToVectorString_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	int maxLines,
	int maxPerLine,
	int padding,
	char * format,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_ToString(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	int maxLines,
	int maxPerLine,
	System_IFormatProvider provider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_ToString_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_ToString_2(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	char * format,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_ToString_3(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	System_IFormatProvider formatProvider,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_At(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	int index,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_At_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	int index,
	float value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_Clear(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_ClearSubVector(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	int index,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_Add(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	float scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_Add_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	float scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_Plus(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_Add_2(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_Add_3(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_Subtract(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	float scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_Subtract_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	float scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_Negate(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_Negate_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_Subtract_2(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_Subtract_3(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_Conjugate(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_Conjugate_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_Multiply(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	float scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_Multiply_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	float scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_DotProduct(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_Divide(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	float scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_Divide_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	float scalar,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_Modulus(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	float divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_Modulus_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	float divisor,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_PointwiseMultiply(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_PointwiseMultiply_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_PointwiseDivide(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_PointwiseDivide_1(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 other,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 result,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_OuterProduct_2(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	MathNet_Numerics_LinearAlgebra_Generic_Vector_T1 v,
	MathNet_Numerics_LinearAlgebra_Generic_Matrix_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_Maximum(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	float * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Single_SparseVector_Minimum(
	MathNet_Numerics_LinearAlgebra_Single_SparseVector __instance,
	float * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage`1
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1_Get_Item(
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 __instance,
	int row,
	int column,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1_Set_Item(
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 __instance,
	int row,
	int column,
	void * value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1_Get_IsFullyMutable(
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1_At(
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 __instance,
	int row,
	int column,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1_At_1(
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 __instance,
	int row,
	int column,
	void * value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1_IsMutable(
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 __instance,
	int row,
	int column,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1_Clear(
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1_Clear_1(
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1_Equals(
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 other,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1_Equals_1(
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1_GetHashCode(
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1_CopyTo(
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 target,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1_CopySubMatrixTo(
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 target,
	int sourceRowIndex,
	int targetRowIndex,
	int rowCount,
	int sourceColumnIndex,
	int targetColumnIndex,
	int columnCount,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1_CopyRowTo(
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 target,
	int rowIndex,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1_CopySubRowTo(
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 target,
	int rowIndex,
	int sourceColumnIndex,
	int targetColumnIndex,
	int columnCount,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1_CopyColumnTo(
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 target,
	int columnIndex,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1_CopySubColumnTo(
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 target,
	int columnIndex,
	int sourceRowIndex,
	int targetRowIndex,
	int rowCount,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1_ToRowMajorArray(
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 __instance,
	void * __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1_ToColumnMajorArray(
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 __instance,
	void * __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1_ToArray(
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 __instance,
	void * __returnValue,
	ssize_t * ____returnValueLength1,
	ssize_t * ____returnValueLength2,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1_MapInplace(
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 __instance,
	System_Func_T2 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1_MapIndexedInplace(
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 __instance,
	System_Func_T4 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1__Get__RowCount(
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1__Get__ColumnCount(
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage`1
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1_Get_Item(
	MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1 __instance,
	int row,
	int column,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1_Set_Item(
	MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1 __instance,
	int row,
	int column,
	void * value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1_Get_IsFullyMutable(
	MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1_At(
	MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1 __instance,
	int row,
	int column,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1_At_1(
	MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1 __instance,
	int row,
	int column,
	void * value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1_Clear(
	MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1 __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1_Clear_1(
	MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1 __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1_OfMatrix(
	char * T,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 matrix,
	MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1_OfArray(
	char * T,
	void * array,
	ssize_t __arrayLength1,
	ssize_t __arrayLength2,
	MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1_OfInit(
	char * T,
	int rows,
	int columns,
	System_Func_T3 init,
	MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1_OfIndexedEnumerable(
	char * T,
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1_OfColumnMajorEnumerable(
	char * T,
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1_OfColumnEnumerables(
	char * T,
	char * TColumn,
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1_OfRowEnumerables(
	char * T,
	char * TRow,
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1_ToRowMajorArray(
	MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1 __instance,
	void * __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1_ToColumnMajorArray(
	MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1 __instance,
	void * __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1_ToArray(
	MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1 __instance,
	void * __returnValue,
	ssize_t * ____returnValueLength1,
	ssize_t * ____returnValueLength2,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1_MapInplace(
	MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1 __instance,
	System_Func_T2 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1_MapIndexedInplace(
	MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1 __instance,
	System_Func_T4 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1_IsMutable(
	MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1 __instance,
	int row,
	int column,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1_Equals(
	MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 other,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1_Equals_1(
	MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1 __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1_GetHashCode(
	MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1_CopyTo(
	MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 target,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1_CopySubMatrixTo(
	MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 target,
	int sourceRowIndex,
	int targetRowIndex,
	int rowCount,
	int sourceColumnIndex,
	int targetColumnIndex,
	int columnCount,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1_CopyRowTo(
	MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 target,
	int rowIndex,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1_CopySubRowTo(
	MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 target,
	int rowIndex,
	int sourceColumnIndex,
	int targetColumnIndex,
	int columnCount,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1_CopyColumnTo(
	MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 target,
	int columnIndex,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1_CopySubColumnTo(
	MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 target,
	int columnIndex,
	int sourceRowIndex,
	int targetRowIndex,
	int rowCount,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1__Get__Data(
	MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1 __instance,
	void * __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1__Get__RowCount(
	MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1__Get__ColumnCount(
	MathNet_Numerics_LinearAlgebra_Storage_DenseColumnMajorMatrixStorage_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Storage.VectorStorage`1
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1_Get_Item(
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 __instance,
	int index,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1_Set_Item(
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 __instance,
	int index,
	void * value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1_Get_IsFullyMutable(
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1_At(
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 __instance,
	int index,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1_At_1(
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 __instance,
	int index,
	void * value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1_IsMutable(
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 __instance,
	int index,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1_Clear(
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1_Clear_1(
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 __instance,
	int index,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1_Equals(
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 other,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1_Equals_1(
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1_GetHashCode(
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1_Enumerate(
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1_EnumerateNonZero(
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1_CopyTo(
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 target,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1_CopyToRow(
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 target,
	int rowIndex,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1_CopyToColumn(
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 target,
	int columnIndex,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1_CopySubVectorTo(
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 target,
	int sourceIndex,
	int targetIndex,
	int count,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1_CopyToSubRow(
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 target,
	int rowIndex,
	int sourceColumnIndex,
	int targetColumnIndex,
	int columnCount,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1_CopyToSubColumn(
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 target,
	int columnIndex,
	int sourceRowIndex,
	int targetRowIndex,
	int rowCount,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1_MapInplace(
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 __instance,
	System_Func_T2 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1_MapIndexedInplace(
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 __instance,
	System_Func_T3 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1__Get__Length(
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage`1
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1_Get_Item(
	MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1 __instance,
	int index,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1_Set_Item(
	MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1 __instance,
	int index,
	void * value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1_Get_IsFullyMutable(
	MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1_At(
	MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1 __instance,
	int index,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1_At_1(
	MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1 __instance,
	int index,
	void * value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1_Clear(
	MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1 __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1_Clear_1(
	MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1 __instance,
	int index,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1_OfVector(
	char * T,
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 vector,
	MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1_OfInit(
	char * T,
	int length,
	System_Func_T2 init,
	MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1_OfEnumerable(
	char * T,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1_OfIndexedEnumerable(
	char * T,
	int length,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1_Enumerate(
	MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1 __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1_EnumerateNonZero(
	MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1 __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1_MapInplace(
	MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1 __instance,
	System_Func_T2 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1_MapIndexedInplace(
	MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1 __instance,
	System_Func_T3 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1_IsMutable(
	MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1 __instance,
	int index,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1_Equals(
	MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 other,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1_Equals_1(
	MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1 __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1_GetHashCode(
	MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1_CopyTo(
	MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 target,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1_CopyToRow(
	MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 target,
	int rowIndex,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1_CopyToColumn(
	MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 target,
	int columnIndex,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1_CopySubVectorTo(
	MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 target,
	int sourceIndex,
	int targetIndex,
	int count,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1_CopyToSubRow(
	MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 target,
	int rowIndex,
	int sourceColumnIndex,
	int targetColumnIndex,
	int columnCount,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1_CopyToSubColumn(
	MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 target,
	int columnIndex,
	int sourceRowIndex,
	int targetRowIndex,
	int rowCount,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1__Get__Data(
	MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1 __instance,
	void * __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1__Get__Length(
	MathNet_Numerics_LinearAlgebra_Storage_DenseVectorStorage_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage`1
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1_Get_IsFullyMutable(
	MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1_Get_Item(
	MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1 __instance,
	int row,
	int column,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1_Set_Item(
	MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1 __instance,
	int row,
	int column,
	void * value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1_At(
	MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1 __instance,
	int row,
	int column,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1_At_1(
	MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1 __instance,
	int row,
	int column,
	void * value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1_IsMutable(
	MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1 __instance,
	int row,
	int column,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1_Clear(
	MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1 __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1_Clear_1(
	MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1 __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1_Equals(
	MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 other,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1_GetHashCode(
	MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1_OfMatrix(
	char * T,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 matrix,
	MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1_OfArray(
	char * T,
	void * array,
	ssize_t __arrayLength1,
	ssize_t __arrayLength2,
	MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1_OfInit(
	char * T,
	int rows,
	int columns,
	System_Func_T2 init,
	MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1_OfEnumerable(
	char * T,
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1_OfIndexedEnumerable(
	char * T,
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1_ToRowMajorArray(
	MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1 __instance,
	void * __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1_ToColumnMajorArray(
	MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1 __instance,
	void * __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1_ToArray(
	MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1 __instance,
	void * __returnValue,
	ssize_t * ____returnValueLength1,
	ssize_t * ____returnValueLength2,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1_MapInplace(
	MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1 __instance,
	System_Func_T2 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1_MapIndexedInplace(
	MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1 __instance,
	System_Func_T4 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1_Equals_1(
	MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1 __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1_CopyTo(
	MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 target,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1_CopySubMatrixTo(
	MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 target,
	int sourceRowIndex,
	int targetRowIndex,
	int rowCount,
	int sourceColumnIndex,
	int targetColumnIndex,
	int columnCount,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1_CopyRowTo(
	MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 target,
	int rowIndex,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1_CopySubRowTo(
	MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 target,
	int rowIndex,
	int sourceColumnIndex,
	int targetColumnIndex,
	int columnCount,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1_CopyColumnTo(
	MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 target,
	int columnIndex,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1_CopySubColumnTo(
	MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 target,
	int columnIndex,
	int sourceRowIndex,
	int targetRowIndex,
	int rowCount,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1__Get__Data(
	MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1 __instance,
	void * __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1__Get__RowCount(
	MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1__Get__ColumnCount(
	MathNet_Numerics_LinearAlgebra_Storage_DiagonalMatrixStorage_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage`1
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1_Get_Item(
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 __instance,
	int row,
	int column,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1_Set_Item(
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 __instance,
	int row,
	int column,
	void * value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1_Get_IsFullyMutable(
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1_At(
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 __instance,
	int row,
	int column,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1_At_1(
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 __instance,
	int row,
	int column,
	void * value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1_FindItem(
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 __instance,
	int row,
	int column,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1_Clear(
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1_Clear_1(
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 __instance,
	int rowIndex,
	int rowCount,
	int columnIndex,
	int columnCount,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1_Equals(
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 other,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1_GetHashCode(
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1_OfMatrix(
	char * T,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 matrix,
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1_OfArray(
	char * T,
	void * array,
	ssize_t __arrayLength1,
	ssize_t __arrayLength2,
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1_OfInit(
	char * T,
	int rows,
	int columns,
	System_Func_T3 init,
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1_OfIndexedEnumerable(
	char * T,
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1_OfRowEnumerables(
	char * T,
	char * TRow,
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1_OfColumnEnumerables(
	char * T,
	char * TColumn,
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1_OfRowMajorEnumerable(
	char * T,
	int rows,
	int columns,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1_OfColumnMajorList(
	char * T,
	int rows,
	int columns,
	System_Collections_Generic_IList_T1 data,
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1_ToRowMajorArray(
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 __instance,
	void * __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1_ToColumnMajorArray(
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 __instance,
	void * __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1_ToArray(
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 __instance,
	void * __returnValue,
	ssize_t * ____returnValueLength1,
	ssize_t * ____returnValueLength2,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1_MapInplace(
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 __instance,
	System_Func_T2 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1_MapIndexedInplace(
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 __instance,
	System_Func_T4 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1_IsMutable(
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 __instance,
	int row,
	int column,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1_Equals_1(
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1_CopyTo(
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 target,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1_CopySubMatrixTo(
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 target,
	int sourceRowIndex,
	int targetRowIndex,
	int rowCount,
	int sourceColumnIndex,
	int targetColumnIndex,
	int columnCount,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1_CopyRowTo(
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 target,
	int rowIndex,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1_CopySubRowTo(
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 target,
	int rowIndex,
	int sourceColumnIndex,
	int targetColumnIndex,
	int columnCount,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1_CopyColumnTo(
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 target,
	int columnIndex,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1_CopySubColumnTo(
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 target,
	int columnIndex,
	int sourceRowIndex,
	int targetRowIndex,
	int rowCount,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1__Get__RowPointers(
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 __instance,
	int ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1__Get__ColumnIndices(
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 __instance,
	int ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1__Set__ColumnIndices(
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 __instance,
	int * ColumnIndices,
	ssize_t __ColumnIndicesLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1__Get__Values(
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 __instance,
	void * __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1__Set__Values(
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 __instance,
	void * Values,
	ssize_t __ValuesLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1__Get__ValueCount(
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1__Set__ValueCount(
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 __instance,
	int ValueCount,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1__Get__RowCount(
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1__Get__ColumnCount(
	MathNet_Numerics_LinearAlgebra_Storage_SparseCompressedRowMatrixStorage_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage`1
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1_Get_Item(
	MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1 __instance,
	int index,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1_Set_Item(
	MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1 __instance,
	int index,
	void * value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1_Get_IsFullyMutable(
	MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1_At(
	MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1 __instance,
	int index,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1_At_1(
	MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1 __instance,
	int index,
	void * value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1_Clear(
	MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1 __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1_Clear_1(
	MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1 __instance,
	int index,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1_Equals(
	MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 other,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1_GetHashCode(
	MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1_OfVector(
	char * T,
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 vector,
	MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1_OfInit(
	char * T,
	int length,
	System_Func_T2 init,
	MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1_OfEnumerable(
	char * T,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1_OfIndexedEnumerable(
	char * T,
	int length,
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1_Enumerate(
	MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1 __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1_EnumerateNonZero(
	MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1 __instance,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1_MapInplace(
	MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1 __instance,
	System_Func_T2 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1_MapIndexedInplace(
	MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1 __instance,
	System_Func_T3 f,
	int forceMapZeros,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1_IsMutable(
	MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1 __instance,
	int index,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1_Equals_1(
	MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1 __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1_CopyTo(
	MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 target,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1_CopyToRow(
	MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 target,
	int rowIndex,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1_CopyToColumn(
	MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 target,
	int columnIndex,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1_CopySubVectorTo(
	MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_VectorStorage_T1 target,
	int sourceIndex,
	int targetIndex,
	int count,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1_CopyToSubRow(
	MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 target,
	int rowIndex,
	int sourceColumnIndex,
	int targetColumnIndex,
	int columnCount,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1_CopyToSubColumn(
	MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1 __instance,
	MathNet_Numerics_LinearAlgebra_Storage_MatrixStorage_T1 target,
	int columnIndex,
	int sourceRowIndex,
	int targetRowIndex,
	int rowCount,
	int skipClearing,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1__Get__Indices(
	MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1 __instance,
	int ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1__Set__Indices(
	MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1 __instance,
	int * Indices,
	ssize_t __IndicesLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1__Get__Values(
	MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1 __instance,
	void * __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1__Set__Values(
	MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1 __instance,
	void * Values,
	ssize_t __ValuesLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1__Get__ValueCount(
	MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1__Set__ValueCount(
	MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1 __instance,
	int ValueCount,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1__Get__Length(
	MathNet_Numerics_LinearAlgebra_Storage_SparseVectorStorage_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.NumberTheory.IntegerTheory
int CVIFUNC MathNet_Numerics_NumberTheory_IntegerTheory_IsEven(
	int number,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_NumberTheory_IntegerTheory_IsEven_1(
	__int64 number,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_NumberTheory_IntegerTheory_IsOdd(
	int number,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_NumberTheory_IntegerTheory_IsOdd_1(
	__int64 number,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_NumberTheory_IntegerTheory_IsPowerOfTwo(
	int number,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_NumberTheory_IntegerTheory_IsPowerOfTwo_1(
	__int64 number,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_NumberTheory_IntegerTheory_CeilingToPowerOfTwo(
	int number,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_NumberTheory_IntegerTheory_CeilingToPowerOfTwo_1(
	__int64 number,
	__int64 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_NumberTheory_IntegerTheory_PowerOfTwo(
	int exponent,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_NumberTheory_IntegerTheory_PowerOfTwo_1(
	__int64 exponent,
	__int64 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_NumberTheory_IntegerTheory_IsPerfectSquare(
	int number,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_NumberTheory_IntegerTheory_IsPerfectSquare_1(
	__int64 number,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_NumberTheory_IntegerTheory_GreatestCommonDivisor(
	__int64 a,
	__int64 b,
	__int64 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_NumberTheory_IntegerTheory_GreatestCommonDivisor_1(
	System_Collections_Generic_IList_T1 integers,
	__int64 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_NumberTheory_IntegerTheory_GreatestCommonDivisor_2(
	__int64 * integers,
	ssize_t __integersLength,
	__int64 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_NumberTheory_IntegerTheory_ExtendedGreatestCommonDivisor(
	__int64 a,
	__int64 b,
	__int64 * x,
	__int64 * y,
	__int64 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_NumberTheory_IntegerTheory_LeastCommonMultiple(
	__int64 a,
	__int64 b,
	__int64 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_NumberTheory_IntegerTheory_LeastCommonMultiple_1(
	System_Collections_Generic_IList_T1 integers,
	__int64 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_NumberTheory_IntegerTheory_LeastCommonMultiple_2(
	__int64 * integers,
	ssize_t __integersLength,
	__int64 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Permutation
int CVIFUNC MathNet_Numerics_Permutation__Create(
	MathNet_Numerics_Permutation * __instance,
	int * indices,
	ssize_t __indicesLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Permutation_Get_Dimension(
	MathNet_Numerics_Permutation __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Permutation_Get_Item(
	MathNet_Numerics_Permutation __instance,
	int idx,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Permutation_Inverse(
	MathNet_Numerics_Permutation __instance,
	MathNet_Numerics_Permutation * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Permutation_FromInversions(
	int * inv,
	ssize_t __invLength,
	MathNet_Numerics_Permutation * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Permutation_ToInversions(
	MathNet_Numerics_Permutation __instance,
	int ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Precision
int CVIFUNC MathNet_Numerics_Precision_Get_DoubleMachinePrecision(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_Get_SingleMachinePrecision(
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_Get_NumberOfDecimalPlacesForFloats(
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_Get_NumberOfDecimalPlacesForDoubles(
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_Magnitude(
	double value,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_Magnitude_1(
	float value,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_GetMagnitudeScaledValue(
	double value,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_Increment(
	double value,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_Increment_1(
	double value,
	int count,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_Decrement(
	double value,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_Decrement_1(
	double value,
	int count,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_CoerceZero(
	double a,
	int maxNumbersBetween,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_CoerceZero_1(
	double a,
	__int64 maxNumbersBetween,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_CoerceZero_2(
	double a,
	double maximumAbsoluteError,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_CoerceZero_3(
	double a,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_RangeOfMatchingFloatingPointNumbers(
	double value,
	__int64 maxNumbersBetween,
	double * bottomRangeEnd,
	double * topRangeEnd,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_MaximumMatchingFloatingPointNumber(
	double value,
	__int64 maxNumbersBetween,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_MinimumMatchingFloatingPointNumber(
	double value,
	__int64 maxNumbersBetween,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_RangeOfMatchingNumbers(
	double value,
	double relativeDifference,
	__int64 * bottomRangeEnd,
	__int64 * topRangeEnd,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_NumbersBetween(
	double a,
	double b,
	unsigned __int64 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_AlmostEqual(
	double a,
	double b,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_AlmostEqual_1(
	float a,
	float b,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_AlmostEqual_2(
	System_Numerics_Complex a,
	System_Numerics_Complex b,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_AlmostEqual_3(
	MathNet_Numerics_Complex32 a,
	MathNet_Numerics_Complex32 b,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_AlmostEqual_4(
	char * T,
	void * a,
	void * b,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_AlmostEqualWithError(
	System_Numerics_Complex a,
	System_Numerics_Complex b,
	double maximumError,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_AlmostEqualWithError_1(
	float a,
	float b,
	double maximumError,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_AlmostEqualWithError_2(
	double a,
	double b,
	double maximumError,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_AlmostEqualListWithError(
	System_Collections_Generic_IList_T1 a,
	System_Collections_Generic_IList_T1 b,
	double maximumError,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_AlmostEqualListWithError_1(
	System_Collections_Generic_IList_T1 a,
	System_Collections_Generic_IList_T1 b,
	double maximumError,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_AlmostEqualWithError_3(
	char * T,
	void * a,
	void * b,
	double maximumError,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_AlmostEqualListWithError_2(
	char * T,
	System_Collections_Generic_IList_T1 a,
	System_Collections_Generic_IList_T1 b,
	double maximumError,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_AlmostEqualWithError_4(
	double a,
	double b,
	double diff,
	double maximumError,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_AlmostEqualWithAbsoluteError(
	double a,
	double b,
	double diff,
	double maximumAbsoluteError,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_AlmostEqualWithRelativeError(
	double a,
	double b,
	double diff,
	double maximumRelativeError,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_AlmostEqualInDecimalPlaces(
	double a,
	double b,
	int decimalPlaces,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_AlmostEqualInDecimalPlaces_1(
	float a,
	float b,
	int decimalPlaces,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_AlmostEqual_5(
	double a,
	double b,
	__int64 maxNumbersBetween,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_AlmostEqual_6(
	float a,
	float b,
	int maxNumbersBetween,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_IsLarger(
	double a,
	double b,
	__int64 maxNumbersBetween,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_IsLargerWithDecimalPlaces(
	double a,
	double b,
	int decimalPlaces,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_IsSmaller(
	double a,
	double b,
	__int64 maxNumbersBetween,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_IsSmaller_1(
	float a,
	float b,
	__int64 maxNumbersBetween,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_IsSmallerWithDecimalPlaces(
	double a,
	double b,
	int decimalPlaces,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_IsSmallerWithDecimalPlaces_1(
	float a,
	float b,
	int decimalPlaces,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_CompareTo(
	double a,
	double b,
	__int64 maxNumbersBetween,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_CompareToInDecimalPlaces(
	double a,
	double b,
	int decimalPlaces,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_EpsilonOf(
	double value,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_PositiveEpsilonOf(
	double value,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Precision+DoubleLongUnion
int CVIFUNC MathNet_Numerics_Precision_DoubleLongUnion__Create(
	MathNet_Numerics_Precision_DoubleLongUnion * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_DoubleLongUnion__Get__Double(
	MathNet_Numerics_Precision_DoubleLongUnion __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_DoubleLongUnion__Set__Double(
	MathNet_Numerics_Precision_DoubleLongUnion __instance,
	double Double,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_DoubleLongUnion__Get__Int64(
	MathNet_Numerics_Precision_DoubleLongUnion __instance,
	__int64 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Precision_DoubleLongUnion__Set__Int64(
	MathNet_Numerics_Precision_DoubleLongUnion __instance,
	__int64 Int64,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Properties.Resources
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ResourceManager(
	System_Resources_ResourceManager * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_Culture(
	System_Globalization_CultureInfo * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Set_Culture(
	System_Globalization_CultureInfo value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentArraysSameLength(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentArrayWrongLength(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentBetween0And1(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentCannotBeBetweenOneAndNegativeOne(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentEven(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentHistogramContainsNot(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentInIntervalXYInclusive(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentItemNull(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentLessThanOne(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentLowerBoundLargerThanUpperBound(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentMatrixDimensions(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentMatrixDimensions1(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentMatrixDimensions2(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentMatrixDimensions3(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentMatrixDoesNotExist(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentMatrixIndexOutOfRange(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentMatrixNotRankDeficient(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentMatrixNotSingular(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentMatrixPositiveDefinite(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentMatrixSameColumnDimension(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentMatrixSameRowDimension(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentMatrixSingleColumn(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentMatrixSingleColumnRow(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentMatrixSingleRow(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentMatrixSquare(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentMatrixSymmetric(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentMatrixSymmetricPositiveDefinite(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentMinValueGreaterThanMaxValue(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentMustBePositive(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentNotInfinityNaN(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentNotNegative(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentNull(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentOdd(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentOutOfRangeGreater(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentOutOfRangeGreaterEqual(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentParameterSetInvalid(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentParseComplexNumber(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentPositive(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentPowerOfTwo(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentPowerOfTwoEveryDimension(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentRangeLessEqual(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentReferenceDifferent(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentSingleDimensionArray(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentTooLarge(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentTooLargeForIterationLimit(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentTypeMismatch(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentVectorLengthsMultipleOf(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentVectorsSameLength(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArgumentVectorThreeDimensional(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ArrayTooSmall(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_BigEndianNotSupported(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_CollectionEmpty(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ComplexMatricesNotSupported(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ConvergenceFailed(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_FeaturePlannedButNotImplementedYet(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_FileDoesNotExist(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_Interpolation_Initialize_SamplePointsNotStrictlyAscendingOrder(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_Interpolation_Initialize_SamplePointsNotUnique(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_InvalidDistributionParameters(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_InvalidLeftBoundaryCondition(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_InvalidOperationAccumulatorEmpty(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_InvalidOperationHistogramEmpty(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_InvalidOperationHistogramNotEnoughPoints(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_InvalidOperationNoSamplesProvided(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_InvalidRightBoundaryCondition(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_MatlabDateHeaderFormat(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_MatrixColumnsMustBePositive(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_MatrixRowsMustBePositive(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_MatrixRowsOrColumnsMustBePositive(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_MoreThan2D(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_MustContainAtLeast(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_NameCannotContainASpace(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_NotSupportedType(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_PartialOrderException(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_PermutationAsIntArrayInvalid(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_ProposalDistributionNoUpperBound(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_RowsLessThanColumns(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_SingularVectorsNotComputed(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_SpecialCasePlannedButNotImplementedYet(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_StopCriteriumDuplicate(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_StopCriteriumMissing(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_StringNullOrEmpty(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_TooManyElements(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_UndefinedMoment(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_UserDefinedProviderNotSpecified(
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Properties_Resources_Get_WorkArrayTooSmall(
	char ** __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Random.AbstractRandomNumberGenerator
int CVIFUNC MathNet_Numerics_Random_AbstractRandomNumberGenerator_NextDouble(
	MathNet_Numerics_Random_AbstractRandomNumberGenerator __instance,
	int n,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_AbstractRandomNumberGenerator_Next(
	MathNet_Numerics_Random_AbstractRandomNumberGenerator __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_AbstractRandomNumberGenerator_Next_1(
	MathNet_Numerics_Random_AbstractRandomNumberGenerator __instance,
	int maxValue,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_AbstractRandomNumberGenerator_Next_2(
	MathNet_Numerics_Random_AbstractRandomNumberGenerator __instance,
	int minValue,
	int maxValue,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_AbstractRandomNumberGenerator_NextBytes(
	MathNet_Numerics_Random_AbstractRandomNumberGenerator __instance,
	unsigned char * buffer,
	ssize_t __bufferLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_AbstractRandomNumberGenerator_NextDouble_1(
	MathNet_Numerics_Random_AbstractRandomNumberGenerator __instance,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Random.Mcg31m1
int CVIFUNC MathNet_Numerics_Random_Mcg31m1__Create(
	MathNet_Numerics_Random_Mcg31m1 * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Mcg31m1__Create_1(
	MathNet_Numerics_Random_Mcg31m1 * __instance,
	int threadSafe,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Mcg31m1__Create_2(
	MathNet_Numerics_Random_Mcg31m1 * __instance,
	int seed,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Mcg31m1__Create_3(
	MathNet_Numerics_Random_Mcg31m1 * __instance,
	int seed,
	int threadSafe,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Mcg31m1_NextDouble(
	MathNet_Numerics_Random_Mcg31m1 __instance,
	int n,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Mcg31m1_Next(
	MathNet_Numerics_Random_Mcg31m1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Mcg31m1_Next_1(
	MathNet_Numerics_Random_Mcg31m1 __instance,
	int maxValue,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Mcg31m1_Next_2(
	MathNet_Numerics_Random_Mcg31m1 __instance,
	int minValue,
	int maxValue,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Mcg31m1_NextBytes(
	MathNet_Numerics_Random_Mcg31m1 __instance,
	unsigned char * buffer,
	ssize_t __bufferLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Mcg31m1_NextDouble_1(
	MathNet_Numerics_Random_Mcg31m1 __instance,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Random.Mcg59
int CVIFUNC MathNet_Numerics_Random_Mcg59__Create(
	MathNet_Numerics_Random_Mcg59 * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Mcg59__Create_1(
	MathNet_Numerics_Random_Mcg59 * __instance,
	int threadSafe,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Mcg59__Create_2(
	MathNet_Numerics_Random_Mcg59 * __instance,
	int seed,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Mcg59__Create_3(
	MathNet_Numerics_Random_Mcg59 * __instance,
	int seed,
	int threadSafe,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Mcg59_NextDouble(
	MathNet_Numerics_Random_Mcg59 __instance,
	int n,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Mcg59_Next(
	MathNet_Numerics_Random_Mcg59 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Mcg59_Next_1(
	MathNet_Numerics_Random_Mcg59 __instance,
	int maxValue,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Mcg59_Next_2(
	MathNet_Numerics_Random_Mcg59 __instance,
	int minValue,
	int maxValue,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Mcg59_NextBytes(
	MathNet_Numerics_Random_Mcg59 __instance,
	unsigned char * buffer,
	ssize_t __bufferLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Mcg59_NextDouble_1(
	MathNet_Numerics_Random_Mcg59 __instance,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Random.MersenneTwister
int CVIFUNC MathNet_Numerics_Random_MersenneTwister__Create(
	MathNet_Numerics_Random_MersenneTwister * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_MersenneTwister__Create_1(
	MathNet_Numerics_Random_MersenneTwister * __instance,
	int threadSafe,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_MersenneTwister__Create_2(
	MathNet_Numerics_Random_MersenneTwister * __instance,
	int seed,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_MersenneTwister__Create_3(
	MathNet_Numerics_Random_MersenneTwister * __instance,
	int seed,
	int threadSafe,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_MersenneTwister_Dispose(
	MathNet_Numerics_Random_MersenneTwister __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_MersenneTwister_NextDouble(
	MathNet_Numerics_Random_MersenneTwister __instance,
	int n,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_MersenneTwister_Next(
	MathNet_Numerics_Random_MersenneTwister __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_MersenneTwister_Next_1(
	MathNet_Numerics_Random_MersenneTwister __instance,
	int maxValue,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_MersenneTwister_Next_2(
	MathNet_Numerics_Random_MersenneTwister __instance,
	int minValue,
	int maxValue,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_MersenneTwister_NextBytes(
	MathNet_Numerics_Random_MersenneTwister __instance,
	unsigned char * buffer,
	ssize_t __bufferLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_MersenneTwister_NextDouble_1(
	MathNet_Numerics_Random_MersenneTwister __instance,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Random.Mrg32k3a
int CVIFUNC MathNet_Numerics_Random_Mrg32k3a__Create(
	MathNet_Numerics_Random_Mrg32k3a * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Mrg32k3a__Create_1(
	MathNet_Numerics_Random_Mrg32k3a * __instance,
	int threadSafe,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Mrg32k3a__Create_2(
	MathNet_Numerics_Random_Mrg32k3a * __instance,
	int seed,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Mrg32k3a__Create_3(
	MathNet_Numerics_Random_Mrg32k3a * __instance,
	int seed,
	int threadSafe,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Mrg32k3a_NextDouble(
	MathNet_Numerics_Random_Mrg32k3a __instance,
	int n,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Mrg32k3a_Next(
	MathNet_Numerics_Random_Mrg32k3a __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Mrg32k3a_Next_1(
	MathNet_Numerics_Random_Mrg32k3a __instance,
	int maxValue,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Mrg32k3a_Next_2(
	MathNet_Numerics_Random_Mrg32k3a __instance,
	int minValue,
	int maxValue,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Mrg32k3a_NextBytes(
	MathNet_Numerics_Random_Mrg32k3a __instance,
	unsigned char * buffer,
	ssize_t __bufferLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Mrg32k3a_NextDouble_1(
	MathNet_Numerics_Random_Mrg32k3a __instance,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Random.Palf
int CVIFUNC MathNet_Numerics_Random_Palf__Create(
	MathNet_Numerics_Random_Palf * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Palf__Create_1(
	MathNet_Numerics_Random_Palf * __instance,
	int threadSafe,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Palf__Create_2(
	MathNet_Numerics_Random_Palf * __instance,
	int seed,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Palf__Create_3(
	MathNet_Numerics_Random_Palf * __instance,
	int seed,
	int threadSafe,
	int shortLag,
	int longLag,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Palf_Get_ShortLag(
	MathNet_Numerics_Random_Palf __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Palf_Get_LongLag(
	MathNet_Numerics_Random_Palf __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Palf_NextDouble(
	MathNet_Numerics_Random_Palf __instance,
	int n,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Palf_Next(
	MathNet_Numerics_Random_Palf __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Palf_Next_1(
	MathNet_Numerics_Random_Palf __instance,
	int maxValue,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Palf_Next_2(
	MathNet_Numerics_Random_Palf __instance,
	int minValue,
	int maxValue,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Palf_NextBytes(
	MathNet_Numerics_Random_Palf __instance,
	unsigned char * buffer,
	ssize_t __bufferLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Palf_NextDouble_1(
	MathNet_Numerics_Random_Palf __instance,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Random.SystemRandomExtensions
int CVIFUNC MathNet_Numerics_Random_SystemRandomExtensions_NextInt64(
	System_Random rnd,
	__int64 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_SystemRandomExtensions_NextFullRangeInt32(
	System_Random rnd,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_SystemRandomExtensions_NextFullRangeInt64(
	System_Random rnd,
	__int64 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_SystemRandomExtensions_NextDecimal(
	System_Random rnd,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Random.WH1982
int CVIFUNC MathNet_Numerics_Random_WH1982__Create(
	MathNet_Numerics_Random_WH1982 * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_WH1982__Create_1(
	MathNet_Numerics_Random_WH1982 * __instance,
	int threadSafe,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_WH1982__Create_2(
	MathNet_Numerics_Random_WH1982 * __instance,
	int seed,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_WH1982__Create_3(
	MathNet_Numerics_Random_WH1982 * __instance,
	int seed,
	int threadSafe,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_WH1982_NextDouble(
	MathNet_Numerics_Random_WH1982 __instance,
	int n,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_WH1982_Next(
	MathNet_Numerics_Random_WH1982 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_WH1982_Next_1(
	MathNet_Numerics_Random_WH1982 __instance,
	int maxValue,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_WH1982_Next_2(
	MathNet_Numerics_Random_WH1982 __instance,
	int minValue,
	int maxValue,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_WH1982_NextBytes(
	MathNet_Numerics_Random_WH1982 __instance,
	unsigned char * buffer,
	ssize_t __bufferLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_WH1982_NextDouble_1(
	MathNet_Numerics_Random_WH1982 __instance,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Random.WH2006
int CVIFUNC MathNet_Numerics_Random_WH2006__Create(
	MathNet_Numerics_Random_WH2006 * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_WH2006__Create_1(
	MathNet_Numerics_Random_WH2006 * __instance,
	int threadSafe,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_WH2006__Create_2(
	MathNet_Numerics_Random_WH2006 * __instance,
	int seed,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_WH2006__Create_3(
	MathNet_Numerics_Random_WH2006 * __instance,
	int seed,
	int threadSafe,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_WH2006_NextDouble(
	MathNet_Numerics_Random_WH2006 __instance,
	int n,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_WH2006_Next(
	MathNet_Numerics_Random_WH2006 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_WH2006_Next_1(
	MathNet_Numerics_Random_WH2006 __instance,
	int maxValue,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_WH2006_Next_2(
	MathNet_Numerics_Random_WH2006 __instance,
	int minValue,
	int maxValue,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_WH2006_NextBytes(
	MathNet_Numerics_Random_WH2006 __instance,
	unsigned char * buffer,
	ssize_t __bufferLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_WH2006_NextDouble_1(
	MathNet_Numerics_Random_WH2006 __instance,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Random.Xorshift
int CVIFUNC MathNet_Numerics_Random_Xorshift__Create(
	MathNet_Numerics_Random_Xorshift * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Xorshift__Create_1(
	MathNet_Numerics_Random_Xorshift * __instance,
	__int64 a,
	__int64 c,
	__int64 x1,
	__int64 x2,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Xorshift__Create_2(
	MathNet_Numerics_Random_Xorshift * __instance,
	int threadSafe,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Xorshift__Create_3(
	MathNet_Numerics_Random_Xorshift * __instance,
	int threadSafe,
	__int64 a,
	__int64 c,
	__int64 x1,
	__int64 x2,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Xorshift__Create_4(
	MathNet_Numerics_Random_Xorshift * __instance,
	int seed,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Xorshift__Create_5(
	MathNet_Numerics_Random_Xorshift * __instance,
	int seed,
	__int64 a,
	__int64 c,
	__int64 x1,
	__int64 x2,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Xorshift__Create_6(
	MathNet_Numerics_Random_Xorshift * __instance,
	int seed,
	int threadSafe,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Xorshift__Create_7(
	MathNet_Numerics_Random_Xorshift * __instance,
	int seed,
	int threadSafe,
	__int64 a,
	__int64 c,
	__int64 x1,
	__int64 x2,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Xorshift_NextDouble(
	MathNet_Numerics_Random_Xorshift __instance,
	int n,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Xorshift_Next(
	MathNet_Numerics_Random_Xorshift __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Xorshift_Next_1(
	MathNet_Numerics_Random_Xorshift __instance,
	int maxValue,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Xorshift_Next_2(
	MathNet_Numerics_Random_Xorshift __instance,
	int minValue,
	int maxValue,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Xorshift_NextBytes(
	MathNet_Numerics_Random_Xorshift __instance,
	unsigned char * buffer,
	ssize_t __bufferLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Random_Xorshift_NextDouble_1(
	MathNet_Numerics_Random_Xorshift __instance,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.SerializableAttribute
int CVIFUNC MathNet_Numerics_SerializableAttribute__Create(
	MathNet_Numerics_SerializableAttribute * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SerializableAttribute_Get_TypeId(
	MathNet_Numerics_SerializableAttribute __instance,
	CDotNetHandle * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SerializableAttribute_Equals(
	MathNet_Numerics_SerializableAttribute __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SerializableAttribute_GetHashCode(
	MathNet_Numerics_SerializableAttribute __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SerializableAttribute_Match(
	MathNet_Numerics_SerializableAttribute __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SerializableAttribute_IsDefaultAttribute(
	MathNet_Numerics_SerializableAttribute __instance,
	int * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Signals.SignalGenerator
int CVIFUNC MathNet_Numerics_Signals_SignalGenerator_ChebyshevNodesFirstKind(
	char * T,
	System_Func_T2 function,
	double intervalBegin,
	double intervalEnd,
	int sampleCount,
	void * __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Signals_SignalGenerator_ChebyshevNodesSecondKind(
	char * T,
	System_Func_T2 function,
	double intervalBegin,
	double intervalEnd,
	int sampleCount,
	void * __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Signals_SignalGenerator_EquidistantInterval(
	char * T,
	System_Func_T2 function,
	double intervalBegin,
	double intervalEnd,
	int sampleCount,
	void * __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Signals_SignalGenerator_EquidistantInterval_1(
	char * T,
	System_Func_T2 function,
	double intervalBegin,
	double intervalEnd,
	int sampleCount,
	double ** samplePoints,
	ssize_t * __samplePointsLength,
	void * __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Signals_SignalGenerator_EquidistantPeriodic(
	char * T,
	System_Func_T2 function,
	double periodLength,
	double periodOffset,
	int sampleCount,
	void * __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Signals_SignalGenerator_EquidistantPeriodic_1(
	char * T,
	System_Func_T2 function,
	double periodLength,
	double periodOffset,
	int sampleCount,
	double ** samplePoints,
	ssize_t * __samplePointsLength,
	void * __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Signals_SignalGenerator_EquidistantStartingAt(
	char * T,
	System_Func_T2 function,
	double start,
	double step,
	int sampleCount,
	void * __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Signals_SignalGenerator_EquidistantStartingAt_1(
	char * T,
	System_Func_T2 function,
	double start,
	double step,
	int sampleCount,
	double ** samplePoints,
	ssize_t * __samplePointsLength,
	void * __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Signals_SignalGenerator_EquidistantContinuous(
	char * T,
	System_Func_T2 function,
	double start,
	double step,
	System_Collections_Generic_IEnumerable_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Signals_SignalGenerator_EquidistantToFunction(
	char * T,
	System_Func_T2 function,
	double start,
	double step,
	System_Func_T2 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Signals_SignalGenerator_Random(
	char * T,
	System_Func_T2 function,
	MathNet_Numerics_Distributions_IContinuousDistribution distribution,
	int sampleCount,
	void * __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Signals_SignalGenerator_Random_1(
	char * T,
	System_Func_T2 function,
	MathNet_Numerics_Distributions_IContinuousDistribution distribution,
	int sampleCount,
	double ** samplePoints,
	ssize_t * __samplePointsLength,
	void * __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Signals_SignalGenerator_Random_2(
	char * T,
	System_Func_T3 function,
	MathNet_Numerics_Distributions_IContinuousDistribution distribution,
	int sampleCount,
	void * __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Sorting
int CVIFUNC MathNet_Numerics_Sorting_Sort(
	char * T,
	System_Collections_Generic_IList_T1 keys,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Sorting_Sort_1(
	char * TKey,
	char * TItem,
	System_Collections_Generic_IList_T1 keys,
	System_Collections_Generic_IList_T1 items,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Sorting_Sort_2(
	char * TKey,
	char * TItem1,
	char * TItem2,
	System_Collections_Generic_IList_T1 keys,
	System_Collections_Generic_IList_T1 items1,
	System_Collections_Generic_IList_T1 items2,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Sorting_Sort_3(
	char * T,
	System_Collections_Generic_IList_T1 keys,
	int index,
	int count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Sorting_Sort_4(
	char * T,
	System_Collections_Generic_IList_T1 keys,
	System_Collections_Generic_IComparer_T1 comparer,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Sorting_Sort_5(
	char * TKey,
	char * TItem,
	System_Collections_Generic_IList_T1 keys,
	System_Collections_Generic_IList_T1 items,
	System_Collections_Generic_IComparer_T1 comparer,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Sorting_Sort_6(
	char * TKey,
	char * TItem1,
	char * TItem2,
	System_Collections_Generic_IList_T1 keys,
	System_Collections_Generic_IList_T1 items1,
	System_Collections_Generic_IList_T1 items2,
	System_Collections_Generic_IComparer_T1 comparer,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Sorting_Sort_7(
	char * T,
	System_Collections_Generic_IList_T1 keys,
	int index,
	int count,
	System_Collections_Generic_IComparer_T1 comparer,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.SpecialFunctions
int CVIFUNC MathNet_Numerics_SpecialFunctions_BetaLn(
	double z,
	double w,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SpecialFunctions_Beta(
	double z,
	double w,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SpecialFunctions_BetaIncomplete(
	double a,
	double b,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SpecialFunctions_BetaRegularized(
	double a,
	double b,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SpecialFunctions_Erf(
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SpecialFunctions_Erfc(
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SpecialFunctions_ErfInv(
	double z,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SpecialFunctions_ErfcInv(
	double z,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SpecialFunctions_Factorial(
	int x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SpecialFunctions_FactorialLn(
	int x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SpecialFunctions_Binomial(
	int n,
	int k,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SpecialFunctions_BinomialLn(
	int n,
	int k,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SpecialFunctions_Multinomial(
	int n,
	int * ni,
	ssize_t __niLength,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SpecialFunctions_GammaLn(
	double z,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SpecialFunctions_Gamma(
	double z,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SpecialFunctions_GammaUpperRegularized(
	double a,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SpecialFunctions_GammaUpperIncomplete(
	double a,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SpecialFunctions_GammaLowerIncomplete(
	double a,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SpecialFunctions_GammaLowerRegularized(
	double a,
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SpecialFunctions_DiGamma(
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SpecialFunctions_DiGammaInv(
	double p,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SpecialFunctions_Harmonic(
	int t,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SpecialFunctions_GeneralHarmonic(
	int n,
	double m,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SpecialFunctions_Logistic(
	double p,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SpecialFunctions_Logit(
	double p,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SpecialFunctions_BesselI0(
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SpecialFunctions_BesselI1(
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SpecialFunctions_BesselK0(
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SpecialFunctions_BesselK0e(
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SpecialFunctions_BesselK1(
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SpecialFunctions_BesselK1e(
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SpecialFunctions_StruveL0(
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SpecialFunctions_StruveL1(
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SpecialFunctions_BesselI0MStruveL0(
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SpecialFunctions_BesselI1MStruveL1(
	double x,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SpecialFunctions_ExponentialMinusOne(
	double power,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SpecialFunctions_Hypotenuse(
	System_Numerics_Complex a,
	System_Numerics_Complex b,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SpecialFunctions_Hypotenuse_1(
	MathNet_Numerics_Complex32 a,
	MathNet_Numerics_Complex32 b,
	MathNet_Numerics_Complex32 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SpecialFunctions_Hypotenuse_2(
	double a,
	double b,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_SpecialFunctions_Hypotenuse_3(
	float a,
	float b,
	float * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Evaluate
int CVIFUNC MathNet_Numerics_Evaluate_Polynomial(
	double * coefficients,
	ssize_t __coefficientsLength,
	double z,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Statistics.ArrayStatistics
int CVIFUNC MathNet_Numerics_Statistics_ArrayStatistics_Minimum(
	double * data,
	ssize_t __dataLength,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_ArrayStatistics_Maximum(
	double * data,
	ssize_t __dataLength,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_ArrayStatistics_Mean(
	double * data,
	ssize_t __dataLength,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_ArrayStatistics_Variance(
	double * samples,
	ssize_t __samplesLength,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_ArrayStatistics_StandardDeviation(
	double * samples,
	ssize_t __samplesLength,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_ArrayStatistics_PopulationVariance(
	double * population,
	ssize_t __populationLength,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_ArrayStatistics_PopulationStandardDeviation(
	double * population,
	ssize_t __populationLength,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_ArrayStatistics_OrderStatisticInplace(
	double * data,
	ssize_t __dataLength,
	int order,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_ArrayStatistics_MedianInplace(
	double * data,
	ssize_t __dataLength,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_ArrayStatistics_PercentileInplace(
	double * data,
	ssize_t __dataLength,
	int p,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_ArrayStatistics_LowerQuartileInplace(
	double * data,
	ssize_t __dataLength,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_ArrayStatistics_UpperQuartileInplace(
	double * data,
	ssize_t __dataLength,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_ArrayStatistics_InterquartileRangeInplace(
	double * data,
	ssize_t __dataLength,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_ArrayStatistics_FiveNumberSummaryInplace(
	double * data,
	ssize_t __dataLength,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_ArrayStatistics_QuantileInplace(
	double * data,
	ssize_t __dataLength,
	double tau,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_ArrayStatistics_QuantileCustomInplace(
	double * data,
	ssize_t __dataLength,
	double tau,
	double a,
	double b,
	double c,
	double d,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_ArrayStatistics_QuantileCustomInplace_1(
	double * data,
	ssize_t __dataLength,
	double tau,
	MathNet_Numerics_Statistics_QuantileDefinition definition,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Statistics.Correlation
int CVIFUNC MathNet_Numerics_Statistics_Correlation_Pearson(
	System_Collections_Generic_IEnumerable_T1 dataA,
	System_Collections_Generic_IEnumerable_T1 dataB,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Statistics.DescriptiveStatistics
int CVIFUNC MathNet_Numerics_Statistics_DescriptiveStatistics__Create(
	MathNet_Numerics_Statistics_DescriptiveStatistics * __instance,
	System_Collections_Generic_IEnumerable_T1 data,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_DescriptiveStatistics__Create_1(
	MathNet_Numerics_Statistics_DescriptiveStatistics * __instance,
	System_Collections_Generic_IEnumerable_T1 data,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_DescriptiveStatistics__Create_2(
	MathNet_Numerics_Statistics_DescriptiveStatistics * __instance,
	System_Collections_Generic_IEnumerable_T1 data,
	int increasedAccuracy,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_DescriptiveStatistics__Create_3(
	MathNet_Numerics_Statistics_DescriptiveStatistics * __instance,
	System_Collections_Generic_IEnumerable_T1 data,
	int increasedAccuracy,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_DescriptiveStatistics_Get_Count(
	MathNet_Numerics_Statistics_DescriptiveStatistics __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_DescriptiveStatistics_Get_Mean(
	MathNet_Numerics_Statistics_DescriptiveStatistics __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_DescriptiveStatistics_Get_Variance(
	MathNet_Numerics_Statistics_DescriptiveStatistics __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_DescriptiveStatistics_Get_StandardDeviation(
	MathNet_Numerics_Statistics_DescriptiveStatistics __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_DescriptiveStatistics_Get_Skewness(
	MathNet_Numerics_Statistics_DescriptiveStatistics __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_DescriptiveStatistics_Get_Median(
	MathNet_Numerics_Statistics_DescriptiveStatistics __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_DescriptiveStatistics_Get_Kurtosis(
	MathNet_Numerics_Statistics_DescriptiveStatistics __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_DescriptiveStatistics_Get_Maximum(
	MathNet_Numerics_Statistics_DescriptiveStatistics __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_DescriptiveStatistics_Get_Minimum(
	MathNet_Numerics_Statistics_DescriptiveStatistics __instance,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Statistics.Bucket
int CVIFUNC MathNet_Numerics_Statistics_Bucket__Create(
	MathNet_Numerics_Statistics_Bucket * __instance,
	double lowerBound,
	double upperBound,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Bucket__Create_1(
	MathNet_Numerics_Statistics_Bucket * __instance,
	double lowerBound,
	double upperBound,
	double count,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Bucket_Get_LowerBound(
	MathNet_Numerics_Statistics_Bucket __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Bucket_Set_LowerBound(
	MathNet_Numerics_Statistics_Bucket __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Bucket_Get_UpperBound(
	MathNet_Numerics_Statistics_Bucket __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Bucket_Set_UpperBound(
	MathNet_Numerics_Statistics_Bucket __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Bucket_Get_Count(
	MathNet_Numerics_Statistics_Bucket __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Bucket_Set_Count(
	MathNet_Numerics_Statistics_Bucket __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Bucket_Get_Width(
	MathNet_Numerics_Statistics_Bucket __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Bucket_Get_DefaultPointComparer(
	System_Collections_Generic_IComparer_T1 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Bucket_Clone(
	MathNet_Numerics_Statistics_Bucket __instance,
	CDotNetHandle * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Bucket_Contains(
	MathNet_Numerics_Statistics_Bucket __instance,
	double x,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Bucket_CompareTo(
	MathNet_Numerics_Statistics_Bucket __instance,
	MathNet_Numerics_Statistics_Bucket bucket,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Bucket_Equals(
	MathNet_Numerics_Statistics_Bucket __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Bucket_GetHashCode(
	MathNet_Numerics_Statistics_Bucket __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Bucket_ToString(
	MathNet_Numerics_Statistics_Bucket __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Statistics.Histogram
int CVIFUNC MathNet_Numerics_Statistics_Histogram__Create(
	MathNet_Numerics_Statistics_Histogram * __instance,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Histogram__Create_1(
	MathNet_Numerics_Statistics_Histogram * __instance,
	System_Collections_Generic_IEnumerable_T1 data,
	int nbuckets,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Histogram__Create_2(
	MathNet_Numerics_Statistics_Histogram * __instance,
	System_Collections_Generic_IEnumerable_T1 data,
	int nbuckets,
	double lower,
	double upper,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Histogram_Get_LowerBound(
	MathNet_Numerics_Statistics_Histogram __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Histogram_Get_UpperBound(
	MathNet_Numerics_Statistics_Histogram __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Histogram_Get_Item(
	MathNet_Numerics_Statistics_Histogram __instance,
	int n,
	MathNet_Numerics_Statistics_Bucket * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Histogram_Get_BucketCount(
	MathNet_Numerics_Statistics_Histogram __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Histogram_Get_DataCount(
	MathNet_Numerics_Statistics_Histogram __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Histogram_AddData(
	MathNet_Numerics_Statistics_Histogram __instance,
	double d,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Histogram_AddData_1(
	MathNet_Numerics_Statistics_Histogram __instance,
	System_Collections_Generic_IEnumerable_T1 data,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Histogram_AddBucket(
	MathNet_Numerics_Statistics_Histogram __instance,
	MathNet_Numerics_Statistics_Bucket bucket,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Histogram_GetBucketOf(
	MathNet_Numerics_Statistics_Histogram __instance,
	double v,
	MathNet_Numerics_Statistics_Bucket * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Histogram_GetBucketIndexOf(
	MathNet_Numerics_Statistics_Histogram __instance,
	double v,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Histogram_ToString(
	MathNet_Numerics_Statistics_Histogram __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Statistics.Mcmc.McmcSampler`1
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_McmcSampler_T1_Get_RandomSource(
	MathNet_Numerics_Statistics_Mcmc_McmcSampler_T1 __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_McmcSampler_T1_Set_RandomSource(
	MathNet_Numerics_Statistics_Mcmc_McmcSampler_T1 __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_McmcSampler_T1_Get_AcceptanceRate(
	MathNet_Numerics_Statistics_Mcmc_McmcSampler_T1 __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_McmcSampler_T1_Sample(
	MathNet_Numerics_Statistics_Mcmc_McmcSampler_T1 __instance,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_McmcSampler_T1_Sample_1(
	MathNet_Numerics_Statistics_Mcmc_McmcSampler_T1 __instance,
	int n,
	void * __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Statistics.Mcmc.HybridMCGeneric`1
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1__Create(
	MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1 * __instance,
	char * T,
	void * x0,
	MathNet_Numerics_Statistics_Mcmc_DensityLn_T1 pdfLnP,
	int frogLeapSteps,
	double stepSize,
	int burnInterval,
	System_Random randomSource,
	MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_DiffMethod diff,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_Get_BurnInterval(
	MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_Set_BurnInterval(
	MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1 __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_Get_FrogLeapSteps(
	MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_Set_FrogLeapSteps(
	MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1 __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_Get_StepSize(
	MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1 __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_Set_StepSize(
	MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1 __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_Get_RandomSource(
	MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1 __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_Set_RandomSource(
	MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1 __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_Get_AcceptanceRate(
	MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1 __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_Sample(
	MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1 __instance,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_Sample_1(
	MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1 __instance,
	int n,
	void * __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Statistics.Mcmc.HybridMCGeneric`1+DiffMethod
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_DiffMethod__Create(
	MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_DiffMethod * __instance,
	char * T,
	MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_DiffMethod__Callback_t __userCallback,
	void * __userCallbackData,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_DiffMethod_Get_Method(
	MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_DiffMethod __instance,
	System_Reflection_MethodInfo * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_DiffMethod_Get_Target(
	MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_DiffMethod __instance,
	CDotNetHandle * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_DiffMethod_Invoke(
	MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_DiffMethod __instance,
	MathNet_Numerics_Statistics_Mcmc_DensityLn_T1 f,
	void * x,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_DiffMethod_BeginInvoke(
	MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_DiffMethod __instance,
	MathNet_Numerics_Statistics_Mcmc_DensityLn_T1 f,
	void * x,
	System_AsyncCallback callback,
	CDotNetHandle object,
	System_IAsyncResult * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_DiffMethod_EndInvoke(
	MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_DiffMethod __instance,
	System_IAsyncResult result,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_DiffMethod_GetObjectData(
	MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_DiffMethod __instance,
	System_Runtime_Serialization_SerializationInfo info,
	System_Runtime_Serialization_StreamingContext context,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_DiffMethod_Equals(
	MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_DiffMethod __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_DiffMethod_GetInvocationList(
	MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_DiffMethod __instance,
	System_Delegate ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_DiffMethod_GetHashCode(
	MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_DiffMethod __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_DiffMethod_DynamicInvoke(
	MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_DiffMethod __instance,
	CDotNetHandle * args,
	ssize_t __argsLength,
	CDotNetHandle * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_DiffMethod_Clone(
	MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_DiffMethod __instance,
	CDotNetHandle * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Statistics.Mcmc.HybridMC
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMC__Create(
	MathNet_Numerics_Statistics_Mcmc_HybridMC * __instance,
	double * x0,
	ssize_t __x0Length,
	MathNet_Numerics_Statistics_Mcmc_DensityLn_T1 pdfLnP,
	int frogLeapSteps,
	double stepSize,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMC__Create_1(
	MathNet_Numerics_Statistics_Mcmc_HybridMC * __instance,
	double * x0,
	ssize_t __x0Length,
	MathNet_Numerics_Statistics_Mcmc_DensityLn_T1 pdfLnP,
	int frogLeapSteps,
	double stepSize,
	int burnInterval,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMC__Create_2(
	MathNet_Numerics_Statistics_Mcmc_HybridMC * __instance,
	double * x0,
	ssize_t __x0Length,
	MathNet_Numerics_Statistics_Mcmc_DensityLn_T1 pdfLnP,
	int frogLeapSteps,
	double stepSize,
	int burnInterval,
	double * pSdv,
	ssize_t __pSdvLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMC__Create_3(
	MathNet_Numerics_Statistics_Mcmc_HybridMC * __instance,
	double * x0,
	ssize_t __x0Length,
	MathNet_Numerics_Statistics_Mcmc_DensityLn_T1 pdfLnP,
	int frogLeapSteps,
	double stepSize,
	int burnInterval,
	double * pSdv,
	ssize_t __pSdvLength,
	System_Random randomSource,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMC__Create_4(
	MathNet_Numerics_Statistics_Mcmc_HybridMC * __instance,
	double * x0,
	ssize_t __x0Length,
	MathNet_Numerics_Statistics_Mcmc_DensityLn_T1 pdfLnP,
	int frogLeapSteps,
	double stepSize,
	int burnInterval,
	double * pSdv,
	ssize_t __pSdvLength,
	System_Random randomSource,
	MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_DiffMethod diff,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMC_Get_MomentumStdDev(
	MathNet_Numerics_Statistics_Mcmc_HybridMC __instance,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMC_Set_MomentumStdDev(
	MathNet_Numerics_Statistics_Mcmc_HybridMC __instance,
	double * value,
	ssize_t __valueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMC_Get_BurnInterval(
	MathNet_Numerics_Statistics_Mcmc_HybridMC __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMC_Set_BurnInterval(
	MathNet_Numerics_Statistics_Mcmc_HybridMC __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMC_Get_FrogLeapSteps(
	MathNet_Numerics_Statistics_Mcmc_HybridMC __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMC_Set_FrogLeapSteps(
	MathNet_Numerics_Statistics_Mcmc_HybridMC __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMC_Get_StepSize(
	MathNet_Numerics_Statistics_Mcmc_HybridMC __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMC_Set_StepSize(
	MathNet_Numerics_Statistics_Mcmc_HybridMC __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMC_Get_RandomSource(
	MathNet_Numerics_Statistics_Mcmc_HybridMC __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMC_Set_RandomSource(
	MathNet_Numerics_Statistics_Mcmc_HybridMC __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMC_Get_AcceptanceRate(
	MathNet_Numerics_Statistics_Mcmc_HybridMC __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMC_Sample(
	MathNet_Numerics_Statistics_Mcmc_HybridMC __instance,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_HybridMC_Sample_1(
	MathNet_Numerics_Statistics_Mcmc_HybridMC __instance,
	int n,
	CDotNetHandle * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Statistics.Mcmc.Diagnostics.MCMCDiagnostics
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_Diagnostics_MCMCDiagnostics_ACF(
	char * T,
	System_Collections_Generic_IEnumerable_T1 series,
	int lag,
	System_Func_T2 f,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_Diagnostics_MCMCDiagnostics_EffectiveSize(
	char * T,
	System_Collections_Generic_IEnumerable_T1 series,
	System_Func_T2 f,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Statistics.Mcmc.GlobalProposalSampler`1
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_GlobalProposalSampler_T1__Create(
	MathNet_Numerics_Statistics_Mcmc_GlobalProposalSampler_T1 * __instance,
	char * T,
	MathNet_Numerics_Statistics_Mcmc_GlobalProposalSampler_T1__Callback_t __userCallback,
	void * __userCallbackData,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_GlobalProposalSampler_T1_Get_Method(
	MathNet_Numerics_Statistics_Mcmc_GlobalProposalSampler_T1 __instance,
	System_Reflection_MethodInfo * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_GlobalProposalSampler_T1_Get_Target(
	MathNet_Numerics_Statistics_Mcmc_GlobalProposalSampler_T1 __instance,
	CDotNetHandle * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_GlobalProposalSampler_T1_Invoke(
	MathNet_Numerics_Statistics_Mcmc_GlobalProposalSampler_T1 __instance,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_GlobalProposalSampler_T1_BeginInvoke(
	MathNet_Numerics_Statistics_Mcmc_GlobalProposalSampler_T1 __instance,
	System_AsyncCallback callback,
	CDotNetHandle object,
	System_IAsyncResult * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_GlobalProposalSampler_T1_EndInvoke(
	MathNet_Numerics_Statistics_Mcmc_GlobalProposalSampler_T1 __instance,
	System_IAsyncResult result,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_GlobalProposalSampler_T1_GetObjectData(
	MathNet_Numerics_Statistics_Mcmc_GlobalProposalSampler_T1 __instance,
	System_Runtime_Serialization_SerializationInfo info,
	System_Runtime_Serialization_StreamingContext context,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_GlobalProposalSampler_T1_Equals(
	MathNet_Numerics_Statistics_Mcmc_GlobalProposalSampler_T1 __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_GlobalProposalSampler_T1_GetInvocationList(
	MathNet_Numerics_Statistics_Mcmc_GlobalProposalSampler_T1 __instance,
	System_Delegate ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_GlobalProposalSampler_T1_GetHashCode(
	MathNet_Numerics_Statistics_Mcmc_GlobalProposalSampler_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_GlobalProposalSampler_T1_DynamicInvoke(
	MathNet_Numerics_Statistics_Mcmc_GlobalProposalSampler_T1 __instance,
	CDotNetHandle * args,
	ssize_t __argsLength,
	CDotNetHandle * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_GlobalProposalSampler_T1_Clone(
	MathNet_Numerics_Statistics_Mcmc_GlobalProposalSampler_T1 __instance,
	CDotNetHandle * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Statistics.Mcmc.LocalProposalSampler`1
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_LocalProposalSampler_T1__Create(
	MathNet_Numerics_Statistics_Mcmc_LocalProposalSampler_T1 * __instance,
	char * T,
	MathNet_Numerics_Statistics_Mcmc_LocalProposalSampler_T1__Callback_t __userCallback,
	void * __userCallbackData,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_LocalProposalSampler_T1_Get_Method(
	MathNet_Numerics_Statistics_Mcmc_LocalProposalSampler_T1 __instance,
	System_Reflection_MethodInfo * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_LocalProposalSampler_T1_Get_Target(
	MathNet_Numerics_Statistics_Mcmc_LocalProposalSampler_T1 __instance,
	CDotNetHandle * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_LocalProposalSampler_T1_Invoke(
	MathNet_Numerics_Statistics_Mcmc_LocalProposalSampler_T1 __instance,
	void * init,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_LocalProposalSampler_T1_BeginInvoke(
	MathNet_Numerics_Statistics_Mcmc_LocalProposalSampler_T1 __instance,
	void * init,
	System_AsyncCallback callback,
	CDotNetHandle object,
	System_IAsyncResult * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_LocalProposalSampler_T1_EndInvoke(
	MathNet_Numerics_Statistics_Mcmc_LocalProposalSampler_T1 __instance,
	System_IAsyncResult result,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_LocalProposalSampler_T1_GetObjectData(
	MathNet_Numerics_Statistics_Mcmc_LocalProposalSampler_T1 __instance,
	System_Runtime_Serialization_SerializationInfo info,
	System_Runtime_Serialization_StreamingContext context,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_LocalProposalSampler_T1_Equals(
	MathNet_Numerics_Statistics_Mcmc_LocalProposalSampler_T1 __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_LocalProposalSampler_T1_GetInvocationList(
	MathNet_Numerics_Statistics_Mcmc_LocalProposalSampler_T1 __instance,
	System_Delegate ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_LocalProposalSampler_T1_GetHashCode(
	MathNet_Numerics_Statistics_Mcmc_LocalProposalSampler_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_LocalProposalSampler_T1_DynamicInvoke(
	MathNet_Numerics_Statistics_Mcmc_LocalProposalSampler_T1 __instance,
	CDotNetHandle * args,
	ssize_t __argsLength,
	CDotNetHandle * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_LocalProposalSampler_T1_Clone(
	MathNet_Numerics_Statistics_Mcmc_LocalProposalSampler_T1 __instance,
	CDotNetHandle * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Statistics.Mcmc.Density`1
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_Density_T1__Create(
	MathNet_Numerics_Statistics_Mcmc_Density_T1 * __instance,
	char * T,
	MathNet_Numerics_Statistics_Mcmc_Density_T1__Callback_t __userCallback,
	void * __userCallbackData,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_Density_T1_Get_Method(
	MathNet_Numerics_Statistics_Mcmc_Density_T1 __instance,
	System_Reflection_MethodInfo * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_Density_T1_Get_Target(
	MathNet_Numerics_Statistics_Mcmc_Density_T1 __instance,
	CDotNetHandle * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_Density_T1_Invoke(
	MathNet_Numerics_Statistics_Mcmc_Density_T1 __instance,
	void * sample,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_Density_T1_BeginInvoke(
	MathNet_Numerics_Statistics_Mcmc_Density_T1 __instance,
	void * sample,
	System_AsyncCallback callback,
	CDotNetHandle object,
	System_IAsyncResult * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_Density_T1_EndInvoke(
	MathNet_Numerics_Statistics_Mcmc_Density_T1 __instance,
	System_IAsyncResult result,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_Density_T1_GetObjectData(
	MathNet_Numerics_Statistics_Mcmc_Density_T1 __instance,
	System_Runtime_Serialization_SerializationInfo info,
	System_Runtime_Serialization_StreamingContext context,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_Density_T1_Equals(
	MathNet_Numerics_Statistics_Mcmc_Density_T1 __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_Density_T1_GetInvocationList(
	MathNet_Numerics_Statistics_Mcmc_Density_T1 __instance,
	System_Delegate ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_Density_T1_GetHashCode(
	MathNet_Numerics_Statistics_Mcmc_Density_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_Density_T1_DynamicInvoke(
	MathNet_Numerics_Statistics_Mcmc_Density_T1 __instance,
	CDotNetHandle * args,
	ssize_t __argsLength,
	CDotNetHandle * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_Density_T1_Clone(
	MathNet_Numerics_Statistics_Mcmc_Density_T1 __instance,
	CDotNetHandle * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Statistics.Mcmc.DensityLn`1
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_DensityLn_T1__Create(
	MathNet_Numerics_Statistics_Mcmc_DensityLn_T1 * __instance,
	char * T,
	MathNet_Numerics_Statistics_Mcmc_DensityLn_T1__Callback_t __userCallback,
	void * __userCallbackData,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_DensityLn_T1_Get_Method(
	MathNet_Numerics_Statistics_Mcmc_DensityLn_T1 __instance,
	System_Reflection_MethodInfo * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_DensityLn_T1_Get_Target(
	MathNet_Numerics_Statistics_Mcmc_DensityLn_T1 __instance,
	CDotNetHandle * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_DensityLn_T1_Invoke(
	MathNet_Numerics_Statistics_Mcmc_DensityLn_T1 __instance,
	void * sample,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_DensityLn_T1_BeginInvoke(
	MathNet_Numerics_Statistics_Mcmc_DensityLn_T1 __instance,
	void * sample,
	System_AsyncCallback callback,
	CDotNetHandle object,
	System_IAsyncResult * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_DensityLn_T1_EndInvoke(
	MathNet_Numerics_Statistics_Mcmc_DensityLn_T1 __instance,
	System_IAsyncResult result,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_DensityLn_T1_GetObjectData(
	MathNet_Numerics_Statistics_Mcmc_DensityLn_T1 __instance,
	System_Runtime_Serialization_SerializationInfo info,
	System_Runtime_Serialization_StreamingContext context,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_DensityLn_T1_Equals(
	MathNet_Numerics_Statistics_Mcmc_DensityLn_T1 __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_DensityLn_T1_GetInvocationList(
	MathNet_Numerics_Statistics_Mcmc_DensityLn_T1 __instance,
	System_Delegate ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_DensityLn_T1_GetHashCode(
	MathNet_Numerics_Statistics_Mcmc_DensityLn_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_DensityLn_T1_DynamicInvoke(
	MathNet_Numerics_Statistics_Mcmc_DensityLn_T1 __instance,
	CDotNetHandle * args,
	ssize_t __argsLength,
	CDotNetHandle * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_DensityLn_T1_Clone(
	MathNet_Numerics_Statistics_Mcmc_DensityLn_T1 __instance,
	CDotNetHandle * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Statistics.Mcmc.TransitionKernelLn`1
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_TransitionKernelLn_T1__Create(
	MathNet_Numerics_Statistics_Mcmc_TransitionKernelLn_T1 * __instance,
	char * T,
	MathNet_Numerics_Statistics_Mcmc_TransitionKernelLn_T1__Callback_t __userCallback,
	void * __userCallbackData,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_TransitionKernelLn_T1_Get_Method(
	MathNet_Numerics_Statistics_Mcmc_TransitionKernelLn_T1 __instance,
	System_Reflection_MethodInfo * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_TransitionKernelLn_T1_Get_Target(
	MathNet_Numerics_Statistics_Mcmc_TransitionKernelLn_T1 __instance,
	CDotNetHandle * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_TransitionKernelLn_T1_Invoke(
	MathNet_Numerics_Statistics_Mcmc_TransitionKernelLn_T1 __instance,
	void * to,
	void * from,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_TransitionKernelLn_T1_BeginInvoke(
	MathNet_Numerics_Statistics_Mcmc_TransitionKernelLn_T1 __instance,
	void * to,
	void * from,
	System_AsyncCallback callback,
	CDotNetHandle object,
	System_IAsyncResult * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_TransitionKernelLn_T1_EndInvoke(
	MathNet_Numerics_Statistics_Mcmc_TransitionKernelLn_T1 __instance,
	System_IAsyncResult result,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_TransitionKernelLn_T1_GetObjectData(
	MathNet_Numerics_Statistics_Mcmc_TransitionKernelLn_T1 __instance,
	System_Runtime_Serialization_SerializationInfo info,
	System_Runtime_Serialization_StreamingContext context,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_TransitionKernelLn_T1_Equals(
	MathNet_Numerics_Statistics_Mcmc_TransitionKernelLn_T1 __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_TransitionKernelLn_T1_GetInvocationList(
	MathNet_Numerics_Statistics_Mcmc_TransitionKernelLn_T1 __instance,
	System_Delegate ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_TransitionKernelLn_T1_GetHashCode(
	MathNet_Numerics_Statistics_Mcmc_TransitionKernelLn_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_TransitionKernelLn_T1_DynamicInvoke(
	MathNet_Numerics_Statistics_Mcmc_TransitionKernelLn_T1 __instance,
	CDotNetHandle * args,
	ssize_t __argsLength,
	CDotNetHandle * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_TransitionKernelLn_T1_Clone(
	MathNet_Numerics_Statistics_Mcmc_TransitionKernelLn_T1 __instance,
	CDotNetHandle * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Statistics.Mcmc.MetropolisHastingsSampler`1
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_MetropolisHastingsSampler_T1__Create(
	MathNet_Numerics_Statistics_Mcmc_MetropolisHastingsSampler_T1 * __instance,
	char * T,
	void * x0,
	MathNet_Numerics_Statistics_Mcmc_DensityLn_T1 pdfLnP,
	MathNet_Numerics_Statistics_Mcmc_TransitionKernelLn_T1 krnlQ,
	MathNet_Numerics_Statistics_Mcmc_LocalProposalSampler_T1 proposal,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_MetropolisHastingsSampler_T1__Create_1(
	MathNet_Numerics_Statistics_Mcmc_MetropolisHastingsSampler_T1 * __instance,
	char * T,
	void * x0,
	MathNet_Numerics_Statistics_Mcmc_DensityLn_T1 pdfLnP,
	MathNet_Numerics_Statistics_Mcmc_TransitionKernelLn_T1 krnlQ,
	MathNet_Numerics_Statistics_Mcmc_LocalProposalSampler_T1 proposal,
	int burnInterval,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_MetropolisHastingsSampler_T1_Get_BurnInterval(
	MathNet_Numerics_Statistics_Mcmc_MetropolisHastingsSampler_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_MetropolisHastingsSampler_T1_Set_BurnInterval(
	MathNet_Numerics_Statistics_Mcmc_MetropolisHastingsSampler_T1 __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_MetropolisHastingsSampler_T1_Get_RandomSource(
	MathNet_Numerics_Statistics_Mcmc_MetropolisHastingsSampler_T1 __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_MetropolisHastingsSampler_T1_Set_RandomSource(
	MathNet_Numerics_Statistics_Mcmc_MetropolisHastingsSampler_T1 __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_MetropolisHastingsSampler_T1_Get_AcceptanceRate(
	MathNet_Numerics_Statistics_Mcmc_MetropolisHastingsSampler_T1 __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_MetropolisHastingsSampler_T1_Sample(
	MathNet_Numerics_Statistics_Mcmc_MetropolisHastingsSampler_T1 __instance,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_MetropolisHastingsSampler_T1_Sample_1(
	MathNet_Numerics_Statistics_Mcmc_MetropolisHastingsSampler_T1 __instance,
	int n,
	void * __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Statistics.Mcmc.MetropolisSampler`1
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_MetropolisSampler_T1__Create(
	MathNet_Numerics_Statistics_Mcmc_MetropolisSampler_T1 * __instance,
	char * T,
	void * x0,
	MathNet_Numerics_Statistics_Mcmc_DensityLn_T1 pdfLnP,
	MathNet_Numerics_Statistics_Mcmc_LocalProposalSampler_T1 proposal,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_MetropolisSampler_T1__Create_1(
	MathNet_Numerics_Statistics_Mcmc_MetropolisSampler_T1 * __instance,
	char * T,
	void * x0,
	MathNet_Numerics_Statistics_Mcmc_DensityLn_T1 pdfLnP,
	MathNet_Numerics_Statistics_Mcmc_LocalProposalSampler_T1 proposal,
	int burnInterval,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_MetropolisSampler_T1_Get_BurnInterval(
	MathNet_Numerics_Statistics_Mcmc_MetropolisSampler_T1 __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_MetropolisSampler_T1_Set_BurnInterval(
	MathNet_Numerics_Statistics_Mcmc_MetropolisSampler_T1 __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_MetropolisSampler_T1_Get_RandomSource(
	MathNet_Numerics_Statistics_Mcmc_MetropolisSampler_T1 __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_MetropolisSampler_T1_Set_RandomSource(
	MathNet_Numerics_Statistics_Mcmc_MetropolisSampler_T1 __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_MetropolisSampler_T1_Get_AcceptanceRate(
	MathNet_Numerics_Statistics_Mcmc_MetropolisSampler_T1 __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_MetropolisSampler_T1_Sample(
	MathNet_Numerics_Statistics_Mcmc_MetropolisSampler_T1 __instance,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_MetropolisSampler_T1_Sample_1(
	MathNet_Numerics_Statistics_Mcmc_MetropolisSampler_T1 __instance,
	int n,
	void * __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Statistics.Mcmc.RejectionSampler`1
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_RejectionSampler_T1__Create(
	MathNet_Numerics_Statistics_Mcmc_RejectionSampler_T1 * __instance,
	char * T,
	MathNet_Numerics_Statistics_Mcmc_Density_T1 pdfP,
	MathNet_Numerics_Statistics_Mcmc_Density_T1 pdfQ,
	MathNet_Numerics_Statistics_Mcmc_GlobalProposalSampler_T1 proposal,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_RejectionSampler_T1_Get_RandomSource(
	MathNet_Numerics_Statistics_Mcmc_RejectionSampler_T1 __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_RejectionSampler_T1_Set_RandomSource(
	MathNet_Numerics_Statistics_Mcmc_RejectionSampler_T1 __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_RejectionSampler_T1_Get_AcceptanceRate(
	MathNet_Numerics_Statistics_Mcmc_RejectionSampler_T1 __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_RejectionSampler_T1_Sample(
	MathNet_Numerics_Statistics_Mcmc_RejectionSampler_T1 __instance,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_RejectionSampler_T1_Sample_1(
	MathNet_Numerics_Statistics_Mcmc_RejectionSampler_T1 __instance,
	int n,
	void * __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Statistics.Mcmc.UnivariateHybridMC
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_UnivariateHybridMC__Create(
	MathNet_Numerics_Statistics_Mcmc_UnivariateHybridMC * __instance,
	double x0,
	MathNet_Numerics_Statistics_Mcmc_DensityLn_T1 pdfLnP,
	int frogLeapSteps,
	double stepSize,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_UnivariateHybridMC__Create_1(
	MathNet_Numerics_Statistics_Mcmc_UnivariateHybridMC * __instance,
	double x0,
	MathNet_Numerics_Statistics_Mcmc_DensityLn_T1 pdfLnP,
	int frogLeapSteps,
	double stepSize,
	int burnInterval,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_UnivariateHybridMC__Create_2(
	MathNet_Numerics_Statistics_Mcmc_UnivariateHybridMC * __instance,
	double x0,
	MathNet_Numerics_Statistics_Mcmc_DensityLn_T1 pdfLnP,
	int frogLeapSteps,
	double stepSize,
	int burnInterval,
	double pSdv,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_UnivariateHybridMC__Create_3(
	MathNet_Numerics_Statistics_Mcmc_UnivariateHybridMC * __instance,
	double x0,
	MathNet_Numerics_Statistics_Mcmc_DensityLn_T1 pdfLnP,
	int frogLeapSteps,
	double stepSize,
	int burnInterval,
	double pSdv,
	System_Random randomSource,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_UnivariateHybridMC__Create_4(
	MathNet_Numerics_Statistics_Mcmc_UnivariateHybridMC * __instance,
	double x0,
	MathNet_Numerics_Statistics_Mcmc_DensityLn_T1 pdfLnP,
	int frogLeapSteps,
	double stepSize,
	int burnInterval,
	double pSdv,
	System_Random randomSource,
	MathNet_Numerics_Statistics_Mcmc_HybridMCGeneric_T1_DiffMethod diff,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_UnivariateHybridMC_Get_MomentumStdDev(
	MathNet_Numerics_Statistics_Mcmc_UnivariateHybridMC __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_UnivariateHybridMC_Set_MomentumStdDev(
	MathNet_Numerics_Statistics_Mcmc_UnivariateHybridMC __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_UnivariateHybridMC_Get_BurnInterval(
	MathNet_Numerics_Statistics_Mcmc_UnivariateHybridMC __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_UnivariateHybridMC_Set_BurnInterval(
	MathNet_Numerics_Statistics_Mcmc_UnivariateHybridMC __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_UnivariateHybridMC_Get_FrogLeapSteps(
	MathNet_Numerics_Statistics_Mcmc_UnivariateHybridMC __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_UnivariateHybridMC_Set_FrogLeapSteps(
	MathNet_Numerics_Statistics_Mcmc_UnivariateHybridMC __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_UnivariateHybridMC_Get_StepSize(
	MathNet_Numerics_Statistics_Mcmc_UnivariateHybridMC __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_UnivariateHybridMC_Set_StepSize(
	MathNet_Numerics_Statistics_Mcmc_UnivariateHybridMC __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_UnivariateHybridMC_Get_RandomSource(
	MathNet_Numerics_Statistics_Mcmc_UnivariateHybridMC __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_UnivariateHybridMC_Set_RandomSource(
	MathNet_Numerics_Statistics_Mcmc_UnivariateHybridMC __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_UnivariateHybridMC_Get_AcceptanceRate(
	MathNet_Numerics_Statistics_Mcmc_UnivariateHybridMC __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_UnivariateHybridMC_Sample(
	MathNet_Numerics_Statistics_Mcmc_UnivariateHybridMC __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_UnivariateHybridMC_Sample_1(
	MathNet_Numerics_Statistics_Mcmc_UnivariateHybridMC __instance,
	int n,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Statistics.Mcmc.UnivariateSliceSampler
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_UnivariateSliceSampler__Create(
	MathNet_Numerics_Statistics_Mcmc_UnivariateSliceSampler * __instance,
	double x0,
	MathNet_Numerics_Statistics_Mcmc_DensityLn_T1 pdfLnP,
	double scale,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_UnivariateSliceSampler__Create_1(
	MathNet_Numerics_Statistics_Mcmc_UnivariateSliceSampler * __instance,
	double x0,
	MathNet_Numerics_Statistics_Mcmc_DensityLn_T1 pdfLnP,
	int burnInterval,
	double scale,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_UnivariateSliceSampler_Get_BurnInterval(
	MathNet_Numerics_Statistics_Mcmc_UnivariateSliceSampler __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_UnivariateSliceSampler_Set_BurnInterval(
	MathNet_Numerics_Statistics_Mcmc_UnivariateSliceSampler __instance,
	int value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_UnivariateSliceSampler_Get_Scale(
	MathNet_Numerics_Statistics_Mcmc_UnivariateSliceSampler __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_UnivariateSliceSampler_Set_Scale(
	MathNet_Numerics_Statistics_Mcmc_UnivariateSliceSampler __instance,
	double value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_UnivariateSliceSampler_Get_RandomSource(
	MathNet_Numerics_Statistics_Mcmc_UnivariateSliceSampler __instance,
	System_Random * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_UnivariateSliceSampler_Set_RandomSource(
	MathNet_Numerics_Statistics_Mcmc_UnivariateSliceSampler __instance,
	System_Random value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_UnivariateSliceSampler_Get_AcceptanceRate(
	MathNet_Numerics_Statistics_Mcmc_UnivariateSliceSampler __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_UnivariateSliceSampler_Sample(
	MathNet_Numerics_Statistics_Mcmc_UnivariateSliceSampler __instance,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Mcmc_UnivariateSliceSampler_Sample_1(
	MathNet_Numerics_Statistics_Mcmc_UnivariateSliceSampler __instance,
	int n,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Statistics.Percentile
int CVIFUNC MathNet_Numerics_Statistics_Percentile__Create(
	MathNet_Numerics_Statistics_Percentile * __instance,
	System_Collections_Generic_IEnumerable_T1 data,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Percentile_Get_Method(
	MathNet_Numerics_Statistics_Percentile __instance,
	MathNet_Numerics_Statistics_PercentileMethod * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Percentile_Set_Method(
	MathNet_Numerics_Statistics_Percentile __instance,
	MathNet_Numerics_Statistics_PercentileMethod value,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Percentile_Compute(
	MathNet_Numerics_Statistics_Percentile __instance,
	double percentile,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Percentile_Compute_1(
	MathNet_Numerics_Statistics_Percentile __instance,
	System_Collections_Generic_IEnumerable_T1 percentiles,
	System_Collections_Generic_IList_T1 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Statistics.SortedArrayStatistics
int CVIFUNC MathNet_Numerics_Statistics_SortedArrayStatistics_Minimum(
	double * data,
	ssize_t __dataLength,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_SortedArrayStatistics_Maximum(
	double * data,
	ssize_t __dataLength,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_SortedArrayStatistics_OrderStatistic(
	double * data,
	ssize_t __dataLength,
	int order,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_SortedArrayStatistics_Median(
	double * data,
	ssize_t __dataLength,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_SortedArrayStatistics_Percentile(
	double * data,
	ssize_t __dataLength,
	int p,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_SortedArrayStatistics_LowerQuartile(
	double * data,
	ssize_t __dataLength,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_SortedArrayStatistics_UpperQuartile(
	double * data,
	ssize_t __dataLength,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_SortedArrayStatistics_InterquartileRange(
	double * data,
	ssize_t __dataLength,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_SortedArrayStatistics_FiveNumberSummary(
	double * data,
	ssize_t __dataLength,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_SortedArrayStatistics_Quantile(
	double * data,
	ssize_t __dataLength,
	double tau,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_SortedArrayStatistics_QuantileCustom(
	double * data,
	ssize_t __dataLength,
	double tau,
	double a,
	double b,
	double c,
	double d,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_SortedArrayStatistics_QuantileCustom_1(
	double * data,
	ssize_t __dataLength,
	double tau,
	MathNet_Numerics_Statistics_QuantileDefinition definition,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Statistics.Statistics
int CVIFUNC MathNet_Numerics_Statistics_Statistics_Minimum(
	System_Collections_Generic_IEnumerable_T1 data,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_Minimum_1(
	System_Collections_Generic_IEnumerable_T1 data,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_Maximum(
	System_Collections_Generic_IEnumerable_T1 data,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_Maximum_1(
	System_Collections_Generic_IEnumerable_T1 data,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_Mean(
	System_Collections_Generic_IEnumerable_T1 data,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_Mean_1(
	System_Collections_Generic_IEnumerable_T1 data,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_Variance(
	System_Collections_Generic_IEnumerable_T1 samples,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_Variance_1(
	System_Collections_Generic_IEnumerable_T1 samples,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_PopulationVariance(
	System_Collections_Generic_IEnumerable_T1 population,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_PopulationVariance_1(
	System_Collections_Generic_IEnumerable_T1 population,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_StandardDeviation(
	System_Collections_Generic_IEnumerable_T1 samples,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_StandardDeviation_1(
	System_Collections_Generic_IEnumerable_T1 samples,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_PopulationStandardDeviation(
	System_Collections_Generic_IEnumerable_T1 population,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_PopulationStandardDeviation_1(
	System_Collections_Generic_IEnumerable_T1 population,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_Median(
	System_Collections_Generic_IEnumerable_T1 data,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_Median_1(
	System_Collections_Generic_IEnumerable_T1 data,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_Quantile(
	System_Collections_Generic_IEnumerable_T1 data,
	double tau,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_Quantile_1(
	System_Collections_Generic_IEnumerable_T1 data,
	double tau,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_QuantileFunc(
	System_Collections_Generic_IEnumerable_T1 data,
	System_Func_T2 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_QuantileFunc_1(
	System_Collections_Generic_IEnumerable_T1 data,
	System_Func_T2 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_InverseCDF(
	System_Collections_Generic_IEnumerable_T1 data,
	double tau,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_InverseCDF_1(
	System_Collections_Generic_IEnumerable_T1 data,
	double tau,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_InverseCDFFunc(
	System_Collections_Generic_IEnumerable_T1 data,
	System_Func_T2 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_InverseCDFFunc_1(
	System_Collections_Generic_IEnumerable_T1 data,
	System_Func_T2 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_QuantileCustom(
	System_Collections_Generic_IEnumerable_T1 data,
	double tau,
	MathNet_Numerics_Statistics_QuantileDefinition definition,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_QuantileCustom_1(
	System_Collections_Generic_IEnumerable_T1 data,
	double tau,
	MathNet_Numerics_Statistics_QuantileDefinition definition,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_QuantileCustomFunc(
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_Statistics_QuantileDefinition definition,
	System_Func_T2 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_QuantileCustomFunc_1(
	System_Collections_Generic_IEnumerable_T1 data,
	MathNet_Numerics_Statistics_QuantileDefinition definition,
	System_Func_T2 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_Percentile(
	System_Collections_Generic_IEnumerable_T1 data,
	int p,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_Percentile_1(
	System_Collections_Generic_IEnumerable_T1 data,
	int p,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_PercentileFunc(
	System_Collections_Generic_IEnumerable_T1 data,
	System_Func_T2 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_PercentileFunc_1(
	System_Collections_Generic_IEnumerable_T1 data,
	System_Func_T2 * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_LowerQuartile(
	System_Collections_Generic_IEnumerable_T1 data,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_LowerQuartile_1(
	System_Collections_Generic_IEnumerable_T1 data,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_UpperQuartile(
	System_Collections_Generic_IEnumerable_T1 data,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_UpperQuartile_1(
	System_Collections_Generic_IEnumerable_T1 data,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_InterquartileRange(
	System_Collections_Generic_IEnumerable_T1 data,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_InterquartileRange_1(
	System_Collections_Generic_IEnumerable_T1 data,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_FiveNumberSummary(
	System_Collections_Generic_IEnumerable_T1 data,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_FiveNumberSummary_1(
	System_Collections_Generic_IEnumerable_T1 data,
	double ** __returnValue,
	ssize_t * ____returnValueLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_OrderStatistic(
	System_Collections_Generic_IEnumerable_T1 data,
	int order,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_Statistics_OrderStatisticFunc(
	System_Collections_Generic_IEnumerable_T1 data,
	System_Func_T2 * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Statistics.StreamingStatistics
int CVIFUNC MathNet_Numerics_Statistics_StreamingStatistics_Minimum(
	System_Collections_Generic_IEnumerable_T1 stream,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_StreamingStatistics_Maximum(
	System_Collections_Generic_IEnumerable_T1 stream,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_StreamingStatistics_Mean(
	System_Collections_Generic_IEnumerable_T1 stream,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_StreamingStatistics_Variance(
	System_Collections_Generic_IEnumerable_T1 samples,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_StreamingStatistics_StandardDeviation(
	System_Collections_Generic_IEnumerable_T1 samples,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_StreamingStatistics_PopulationVariance(
	System_Collections_Generic_IEnumerable_T1 population,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Statistics_StreamingStatistics_PopulationStandardDeviation(
	System_Collections_Generic_IEnumerable_T1 population,
	double * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.TargetedPatchingOptOutAttribute
int CVIFUNC MathNet_Numerics_TargetedPatchingOptOutAttribute__Create(
	MathNet_Numerics_TargetedPatchingOptOutAttribute * __instance,
	char * reason,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_TargetedPatchingOptOutAttribute_Get_Reason(
	MathNet_Numerics_TargetedPatchingOptOutAttribute __instance,
	char ** __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_TargetedPatchingOptOutAttribute_Get_TypeId(
	MathNet_Numerics_TargetedPatchingOptOutAttribute __instance,
	CDotNetHandle * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_TargetedPatchingOptOutAttribute_Equals(
	MathNet_Numerics_TargetedPatchingOptOutAttribute __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_TargetedPatchingOptOutAttribute_GetHashCode(
	MathNet_Numerics_TargetedPatchingOptOutAttribute __instance,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_TargetedPatchingOptOutAttribute_Match(
	MathNet_Numerics_TargetedPatchingOptOutAttribute __instance,
	CDotNetHandle obj,
	int * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_TargetedPatchingOptOutAttribute_IsDefaultAttribute(
	MathNet_Numerics_TargetedPatchingOptOutAttribute __instance,
	int * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Threading.CommonParallel
int CVIFUNC MathNet_Numerics_Threading_CommonParallel_For(
	int fromInclusive,
	int toExclusive,
	System_Action_T1 body,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Threading_CommonParallel_For_1(
	int fromInclusive,
	int toExclusive,
	System_Action_T2 body,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Threading_CommonParallel_For_2(
	int fromInclusive,
	int toExclusive,
	int rangeSize,
	System_Action_T2 body,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Threading_CommonParallel_For_3(
	char * T,
	void * array,
	ssize_t __arrayLength,
	System_Action_T2 body,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Threading_CommonParallel_Invoke(
	System_Action * actions,
	ssize_t __actionsLength,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Threading_CommonParallel_Aggregate(
	char * T,
	int fromInclusive,
	int toExclusive,
	System_Func_T2 select,
	System_Func_T2 reduce,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Threading_CommonParallel_Aggregate_1(
	char * T,
	char * U,
	void * array,
	ssize_t __arrayLength,
	System_Func_T3 select,
	System_Func_T2 reduce,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Threading_CommonParallel_Aggregate_2(
	char * T,
	int fromInclusive,
	int toExclusive,
	System_Func_T2 select,
	System_Func_T3 reducePair,
	void * reduceDefault,
	void * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Threading_CommonParallel_Aggregate_3(
	char * T,
	char * U,
	void * array,
	ssize_t __arrayLength,
	System_Func_T3 select,
	System_Func_T3 reducePair,
	void * reduceDefault,
	void * __returnValue,
	CDotNetHandle * __exception);

// Type: MathNet.Numerics.Trig
int CVIFUNC MathNet_Numerics_Trig_Cosecant(
	double radian,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_Cosecant_1(
	System_Numerics_Complex value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_Cosine(
	double radian,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_Cosine_1(
	System_Numerics_Complex value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_Cotangent(
	double radian,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_Cotangent_1(
	System_Numerics_Complex value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_DegreeToGrad(
	double degree,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_DegreeToRadian(
	double degree,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_GradToDegree(
	double grad,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_GradToRadian(
	double grad,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_HyperbolicCosecant(
	double radian,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_HyperbolicCosecant_1(
	System_Numerics_Complex value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_HyperbolicCosine(
	double radian,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_HyperbolicCosine_1(
	System_Numerics_Complex value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_HyperbolicCotangent(
	double radian,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_HyperbolicCotangent_1(
	System_Numerics_Complex value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_HyperbolicSecant(
	double radian,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_HyperbolicSecant_1(
	System_Numerics_Complex value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_HyperbolicSine(
	double radian,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_HyperbolicSine_1(
	System_Numerics_Complex value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_HyperbolicTangent(
	double radian,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_HyperbolicTangent_1(
	System_Numerics_Complex value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_InverseCosecant(
	double radian,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_InverseCosecant_1(
	System_Numerics_Complex value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_InverseCosine(
	double radian,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_InverseCosine_1(
	System_Numerics_Complex value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_InverseCotangent(
	double radian,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_InverseCotangent_1(
	System_Numerics_Complex value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_InverseHyperbolicCosecant(
	double radian,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_InverseHyperbolicCosecant_1(
	System_Numerics_Complex value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_InverseHyperbolicCosine(
	double radian,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_InverseHyperbolicCosine_1(
	System_Numerics_Complex value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_InverseHyperbolicCotangent(
	double radian,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_InverseHyperbolicCotangent_1(
	System_Numerics_Complex value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_InverseHyperbolicSecant(
	double radian,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_InverseHyperbolicSecant_1(
	System_Numerics_Complex value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_InverseHyperbolicSine(
	double radian,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_InverseHyperbolicSine_1(
	System_Numerics_Complex value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_InverseHyperbolicTangent(
	double radian,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_InverseHyperbolicTangent_1(
	System_Numerics_Complex value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_InverseSecant(
	double radian,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_InverseSecant_1(
	System_Numerics_Complex value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_InverseSine(
	double radian,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_InverseSine_1(
	System_Numerics_Complex value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_InverseTangent(
	double radian,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_InverseTangent_1(
	System_Numerics_Complex value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_RadianToDegree(
	double radian,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_RadianToGrad(
	double radian,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_Secant(
	double radian,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_Secant_1(
	System_Numerics_Complex value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_Sine(
	double radian,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_Sine_1(
	System_Numerics_Complex value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_Tangent(
	double radian,
	double * __returnValue,
	CDotNetHandle * __exception);
int CVIFUNC MathNet_Numerics_Trig_Tangent_1(
	System_Numerics_Complex value,
	System_Numerics_Complex * __returnValue,
	CDotNetHandle * __exception);


#ifdef __cplusplus
}
#endif
